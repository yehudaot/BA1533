CCS PCH C Compiler, Version 5.008, 5967               07-Jun-18 12:02

               Filename:   C:\BA\Software_projects\PIC\1533\BA_1533\BA1533RXv1_0\BA1533RX.lst

               ROM used:   12976 bytes (40%)
                           Largest free fragment is 19788
               RAM used:   273 (18%) at main() level
                           473 (31%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   311C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.1
004A:  GOTO   0054
004E:  BTFSC  F9E.1
0050:  GOTO   043C
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   046C
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0472
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0478
0078:  BTFSS  FA3.5
007A:  GOTO   0084
007E:  BTFSC  FA4.5
0080:  GOTO   04A6
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   0436
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <BA1533RX.h> 
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  EC
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSC  0D.7
00E8:  BSF    FF2.7
00EA:  RETURN 0
00EC:  DATA 00,00
00EE:  DATA DC,00
00F0:  DATA 91,81
00F2:  DATA 00,08
00F4:  DATA C2,5E
00F6:  DATA 00,18
00F8:  DATA B3,04
00FA:  DATA 00,00
00FC:  DATA 3C,00
00FE:  DATA 95,00
0100:  DATA 00,00
0102:  DATA 40,00
0104:  MOVFF  FF2,0D
0108:  BCF    FF2.7
010A:  CLRF   FF7
010C:  ADDLW  1E
010E:  MOVWF  FF6
0110:  MOVLW  01
0112:  ADDWFC FF7,F
0114:  TBLRD*+
0116:  MOVF   FF5,W
0118:  BTFSC  0D.7
011A:  BSF    FF2.7
011C:  RETURN 0
011E:  DATA 24,46
0120:  DATA 20,3C
0122:  DATA 66,72
0124:  DATA 65,71
0126:  DATA 75,65
0128:  DATA 6E,63
012A:  DATA 79,3E
012C:  DATA 3C,63
012E:  DATA 72,3E
0130:  DATA 20,20
0132:  DATA 09,53
0134:  DATA 65,74
0136:  DATA 20,66
0138:  DATA 72,65
013A:  DATA 71,75
013C:  DATA 65,6E
013E:  DATA 63,79
0140:  DATA 20,69
0142:  DATA 6E,20
0144:  DATA 31,4D
0146:  DATA 48,7A
0148:  DATA 20,69
014A:  DATA 6E,63
014C:  DATA 72,65
014E:  DATA 6D,65
0150:  DATA 6E,74
0152:  DATA 73,20
0154:  DATA 28,69
0156:  DATA 2E,65
0158:  DATA 2E,35
015A:  DATA 31,37
015C:  DATA 33,20
015E:  DATA 69,73
0160:  DATA 20,35
0162:  DATA 2E,31
0164:  DATA 37,33
0166:  DATA 47,48
0168:  DATA 7A,29
016A:  DATA 0D,0A
016C:  DATA 00,00
016E:  MOVFF  FF2,0D
0172:  BCF    FF2.7
0174:  CLRF   FF7
0176:  ADDLW  88
0178:  MOVWF  FF6
017A:  MOVLW  01
017C:  ADDWFC FF7,F
017E:  TBLRD*+
0180:  MOVF   FF5,W
0182:  BTFSC  0D.7
0184:  BSF    FF2.7
0186:  RETURN 0
0188:  DATA 24,4F
018A:  DATA 4E,20
018C:  DATA 3C,6F
018E:  DATA 6E,6F
0190:  DATA 66,66
0192:  DATA 3E,3C
0194:  DATA 63,72
0196:  DATA 3E,20
0198:  DATA 20,09
019A:  DATA 53,65
019C:  DATA 74,20
019E:  DATA 50,4C
01A0:  DATA 4C,20
01A2:  DATA 52,46
01A4:  DATA 20,4F
01A6:  DATA 55,54
01A8:  DATA 20,6F
01AA:  DATA 6E,28
01AC:  DATA 31,29
01AE:  DATA 20,6F
01B0:  DATA 72,20
01B2:  DATA 6F,66
01B4:  DATA 66,28
01B6:  DATA 30,29
01B8:  DATA 0D,0A
01BA:  DATA 00,00
01BC:  MOVFF  FF2,0D
01C0:  BCF    FF2.7
01C2:  CLRF   FF7
01C4:  ADDLW  D6
01C6:  MOVWF  FF6
01C8:  MOVLW  01
01CA:  ADDWFC FF7,F
01CC:  TBLRD*+
01CE:  MOVF   FF5,W
01D0:  BTFSC  0D.7
01D2:  BSF    FF2.7
01D4:  RETURN 0
01D6:  DATA 24,50
01D8:  DATA 53,20
01DA:  DATA 3C,70
01DC:  DATA 6F,77
01DE:  DATA 65,72
01E0:  DATA 3E,3C
01E2:  DATA 63,72
01E4:  DATA 3E,20
01E6:  DATA 20,09
01E8:  DATA 53,65
01EA:  DATA 74,20
01EC:  DATA 61,6D
01EE:  DATA 70,20
01F0:  DATA 70,6F
01F2:  DATA 77,65
01F4:  DATA 72,20
01F6:  DATA 6F,6E
01F8:  DATA 28,31
01FA:  DATA 29,20
01FC:  DATA 6F,72
01FE:  DATA 20,6F
0200:  DATA 66,66
0202:  DATA 28,30
0204:  DATA 29,0D
0206:  DATA 0A,00
0208:  MOVFF  FF2,0D
020C:  BCF    FF2.7
020E:  CLRF   FF7
0210:  ADDLW  22
0212:  MOVWF  FF6
0214:  MOVLW  02
0216:  ADDWFC FF7,F
0218:  TBLRD*+
021A:  MOVF   FF5,W
021C:  BTFSC  0D.7
021E:  BSF    FF2.7
0220:  RETURN 0
0222:  DATA 24,50
0224:  DATA 20,3C
0226:  DATA 6C,65
0228:  DATA 76,65
022A:  DATA 6C,3E
022C:  DATA 3C,63
022E:  DATA 72,3E
0230:  DATA 20,20
0232:  DATA 09,53
0234:  DATA 65,74
0236:  DATA 20,70
0238:  DATA 6F,77
023A:  DATA 65,72
023C:  DATA 20,6C
023E:  DATA 65,76
0240:  DATA 65,6C
0242:  DATA 20,68
0244:  DATA 69,67
0246:  DATA 68,28
0248:  DATA 31,29
024A:  DATA 20,6F
024C:  DATA 72,20
024E:  DATA 6C,6F
0250:  DATA 77,28
0252:  DATA 30,29
0254:  DATA 0D,0A
0256:  DATA 00,00
0258:  MOVFF  FF2,0D
025C:  BCF    FF2.7
025E:  CLRF   FF7
0260:  ADDLW  72
0262:  MOVWF  FF6
0264:  MOVLW  02
0266:  ADDWFC FF7,F
0268:  TBLRD*+
026A:  MOVF   FF5,W
026C:  BTFSC  0D.7
026E:  BSF    FF2.7
0270:  RETURN 0
0272:  DATA 24,4C
0274:  DATA 44,20
0276:  DATA 3C,66
0278:  DATA 77,64
027A:  DATA 3E,3C
027C:  DATA 63,72
027E:  DATA 3E,20
0280:  DATA 20,09
0282:  DATA 53,65
0284:  DATA 74,20
0286:  DATA 46,77
0288:  DATA 64,20
028A:  DATA 70,6F
028C:  DATA 77,65
028E:  DATA 72,20
0290:  DATA 6D,65
0292:  DATA 61,73
0294:  DATA 75,72
0296:  DATA 65,6D
0298:  DATA 65,6E
029A:  DATA 74,20
029C:  DATA 6F,6E
029E:  DATA 28,31
02A0:  DATA 29,20
02A2:  DATA 6F,72
02A4:  DATA 20,6F
02A6:  DATA 66,66
02A8:  DATA 28,30
02AA:  DATA 29,0D
02AC:  DATA 0A,00
02AE:  MOVFF  FF2,0D
02B2:  BCF    FF2.7
02B4:  CLRF   FF7
02B6:  ADDLW  C8
02B8:  MOVWF  FF6
02BA:  MOVLW  02
02BC:  ADDWFC FF7,F
02BE:  TBLRD*+
02C0:  MOVF   FF5,W
02C2:  BTFSC  0D.7
02C4:  BSF    FF2.7
02C6:  RETURN 0
02C8:  DATA 24,51
02CA:  DATA 3C,63
02CC:  DATA 72,3E
02CE:  DATA 20,20
02D0:  DATA 09,52
02D2:  DATA 65,71
02D4:  DATA 75,65
02D6:  DATA 73,74
02D8:  DATA 20,73
02DA:  DATA 74,61
02DC:  DATA 74,75
02DE:  DATA 73,0D
02E0:  DATA 0A,00
02E2:  MOVFF  FF2,0D
02E6:  BCF    FF2.7
02E8:  CLRF   FF7
02EA:  ADDLW  FC
02EC:  MOVWF  FF6
02EE:  MOVLW  02
02F0:  ADDWFC FF7,F
02F2:  TBLRD*+
02F4:  MOVF   FF5,W
02F6:  BTFSC  0D.7
02F8:  BSF    FF2.7
02FA:  RETURN 0
02FC:  DATA 24,42
02FE:  DATA 4D,3C
0300:  DATA 63,72
0302:  DATA 3E,20
0304:  DATA 20,09
0306:  DATA 42,49
0308:  DATA 54,20
030A:  DATA 4D,6F
030C:  DATA 64,65
030E:  DATA 20,4F
0310:  DATA 4E,28
0312:  DATA 31,29
0314:  DATA 20,4F
0316:  DATA 46,46
0318:  DATA 28,30
031A:  DATA 29,0D
031C:  DATA 0A,00
031E:  MOVFF  FF2,0D
0322:  BCF    FF2.7
0324:  CLRF   FF7
0326:  ADDLW  38
0328:  MOVWF  FF6
032A:  MOVLW  03
032C:  ADDWFC FF7,F
032E:  TBLRD*+
0330:  MOVF   FF5,W
0332:  BTFSC  0D.7
0334:  BSF    FF2.7
0336:  RETURN 0
0338:  DATA 24,54
033A:  DATA 52,3C
033C:  DATA 63,72
033E:  DATA 3E,20
0340:  DATA 20,09
0342:  DATA 54,52
0344:  DATA 41,4E
0346:  DATA 53,49
0348:  DATA 56,45
034A:  DATA 52,28
034C:  DATA 54,29
034E:  DATA 20,52
0350:  DATA 45,43
0352:  DATA 49,56
0354:  DATA 45,52
0356:  DATA 28,52
0358:  DATA 29,00
035A:  MOVFF  FF2,0D
035E:  BCF    FF2.7
0360:  CLRF   FF7
0362:  ADDLW  74
0364:  MOVWF  FF6
0366:  MOVLW  03
0368:  ADDWFC FF7,F
036A:  TBLRD*+
036C:  MOVF   FF5,W
036E:  BTFSC  0D.7
0370:  BSF    FF2.7
0372:  RETURN 0
0374:  DATA 0D,0A
0376:  DATA 24,46
0378:  DATA 41,49
037A:  DATA 4C,0D
037C:  DATA 0A,00
037E:  MOVFF  FF2,0D
0382:  BCF    FF2.7
0384:  CLRF   FF7
0386:  ADDLW  98
0388:  MOVWF  FF6
038A:  MOVLW  03
038C:  ADDWFC FF7,F
038E:  TBLRD*+
0390:  MOVF   FF5,W
0392:  BTFSC  0D.7
0394:  BSF    FF2.7
0396:  RETURN 0
0398:  DATA 0D,0A
039A:  DATA 24,52
039C:  DATA 0D,0A
039E:  DATA 00,00
03A0:  MOVFF  FF2,0D
03A4:  BCF    FF2.7
03A6:  CLRF   FF7
03A8:  ADDLW  BA
03AA:  MOVWF  FF6
03AC:  MOVLW  03
03AE:  ADDWFC FF7,F
03B0:  TBLRD*+
03B2:  MOVF   FF5,W
03B4:  BTFSC  0D.7
03B6:  BSF    FF2.7
03B8:  RETURN 0
03BA:  DATA 0D,0A
03BC:  DATA 24,46
03BE:  DATA 41,55
03C0:  DATA 4C,54
03C2:  DATA 0D,0A
03C4:  DATA 00,00
03C6:  MOVFF  FF2,0D
03CA:  BCF    FF2.7
03CC:  CLRF   FF7
03CE:  ADDLW  E0
03D0:  MOVWF  FF6
03D2:  MOVLW  03
03D4:  ADDWFC FF7,F
03D6:  TBLRD*+
03D8:  MOVF   FF5,W
03DA:  BTFSC  0D.7
03DC:  BSF    FF2.7
03DE:  RETURN 0
03E0:  DATA 0D,0A
03E2:  DATA 24,4F
03E4:  DATA 4B,0D
03E6:  DATA 0A,00
03E8:  MOVFF  FF2,0D
03EC:  BCF    FF2.7
03EE:  CLRF   FF7
03F0:  ADDLW  02
03F2:  MOVWF  FF6
03F4:  MOVLW  04
03F6:  ADDWFC FF7,F
03F8:  TBLRD*+
03FA:  MOVF   FF5,W
03FC:  BTFSC  0D.7
03FE:  BSF    FF2.7
0400:  RETURN 0
0402:  DATA 0D,0A
0404:  DATA 24,42
0406:  DATA 52,45
0408:  DATA 41,4B
040A:  DATA 0D,0A
040C:  DATA 00,00
040E:  MOVFF  FF2,0D
0412:  BCF    FF2.7
0414:  CLRF   FF7
0416:  ADDLW  28
0418:  MOVWF  FF6
041A:  MOVLW  04
041C:  ADDWFC FF7,F
041E:  TBLRD*+
0420:  MOVF   FF5,W
0422:  BTFSC  0D.7
0424:  BSF    FF2.7
0426:  RETURN 0
0428:  DATA 42,41
042A:  DATA 31,35
042C:  DATA 33,33
042E:  DATA 52,58
0430:  DATA 20,56
0432:  DATA 31,2E
0434:  DATA 30,00
*
04B6:  DATA 0D,0A
04B8:  DATA 46,52
04BA:  DATA 45,51
04BC:  DATA 3D,25
04BE:  DATA 6C,75
04C0:  DATA 2C,20
04C2:  DATA 52,53
04C4:  DATA 53,49
04C6:  DATA 3D,25
04C8:  DATA 6C,75
04CA:  DATA 64,42
04CC:  DATA 4D,2C
04CE:  DATA 20,54
04D0:  DATA 45,4D
04D2:  DATA 50,3D
04D4:  DATA 25,35
04D6:  DATA 2E,31
04D8:  DATA 66,28
04DA:  DATA 63,29
04DC:  DATA 2C,20
04DE:  DATA 49,44
04E0:  DATA 3D,25
04E2:  DATA 6C,75
04E4:  DATA 2C,20
04E6:  DATA 44,43
04E8:  DATA 3D,25
04EA:  DATA 30,32
04EC:  DATA 6C,75
04EE:  DATA 25,30
04F0:  DATA 32,75
04F2:  DATA 2C,20
04F4:  DATA 56,45
04F6:  DATA 52,20
04F8:  DATA 25,6C
04FA:  DATA 73,2C
04FC:  DATA 20,00
04FE:  DATA 56,31
0500:  DATA 2E,30
0502:  DATA 00,00
0504:  DATA 4C,49
0506:  DATA 47,48
0508:  DATA 54,3D
050A:  DATA 4F,4E
050C:  DATA 2C,20
050E:  DATA 00,00
0510:  DATA 4C,49
0512:  DATA 47,48
0514:  DATA 54,3D
0516:  DATA 4F,46
0518:  DATA 46,2C
051A:  DATA 20,00
051C:  DATA 50,41
051E:  DATA 53,53
0520:  DATA 20,42
0522:  DATA 69,74
0524:  DATA 3D,25
0526:  DATA 6C,64
0528:  DATA 20,00
052A:  DATA 46,41
052C:  DATA 49,4C
052E:  DATA 20,42
0530:  DATA 69,74
0532:  DATA 3D,25
0534:  DATA 6C,64
0536:  DATA 20,00
0538:  DATA 53,59
053A:  DATA 4E,54
053C:  DATA 48,20
053E:  DATA 4C,4F
0540:  DATA 43,4B
0542:  DATA 3D,4C
0544:  DATA 4F,43
0546:  DATA 4B,2C
0548:  DATA 20,00
054A:  DATA 53,59
054C:  DATA 4E,54
054E:  DATA 48,20
0550:  DATA 4C,4F
0552:  DATA 43,4B
0554:  DATA 3D,4E
0556:  DATA 4F,54
0558:  DATA 20,4C
055A:  DATA 4F,43
055C:  DATA 4B,2C
055E:  DATA 20,00
0560:  DATA 42,49
0562:  DATA 54,20
0564:  DATA 4D,4F
0566:  DATA 44,45
0568:  DATA 3D,53
056A:  DATA 54,41
056C:  DATA 52,54
056E:  DATA 2C,20
0570:  DATA 00,00
0572:  DATA 42,49
0574:  DATA 54,20
0576:  DATA 4D,4F
0578:  DATA 44,45
057A:  DATA 3D,53
057C:  DATA 54,4F
057E:  DATA 50,2C
0580:  DATA 20,00
0582:  DATA 50,4F
0584:  DATA 57,45
0586:  DATA 52,20
0588:  DATA 4D,4F
058A:  DATA 44,45
058C:  DATA 3D,48
058E:  DATA 49,47
0590:  DATA 48,2C
0592:  DATA 20,00
0594:  DATA 50,4F
0596:  DATA 57,45
0598:  DATA 52,20
059A:  DATA 4D,4F
059C:  DATA 44,45
059E:  DATA 3D,4C
05A0:  DATA 4F,57
05A2:  DATA 2C,20
05A4:  DATA 00,00
05A6:  DATA 41,55
05A8:  DATA 54,4F
05AA:  DATA 5F,50
05AC:  DATA 4F,57
05AE:  DATA 45,52
05B0:  DATA 3D,31
05B2:  DATA 2C,20
05B4:  DATA 00,00
05B6:  DATA 41,55
05B8:  DATA 54,4F
05BA:  DATA 5F,50
05BC:  DATA 4F,57
05BE:  DATA 45,52
05C0:  DATA 3D,30
05C2:  DATA 2C,20
05C4:  DATA 00,00
05C6:  DATA 0D,0A
05C8:  DATA 24,46
05CA:  DATA 41,49
05CC:  DATA 4C,0D
05CE:  DATA 0A,00
*
06C4:  TSTFSZ 01
06C6:  BRA    06CE
06C8:  TSTFSZ 02
06CA:  BRA    06D0
06CC:  BRA    06DC
06CE:  INCF   02,F
06D0:  MOVFF  00,FEE
06D4:  DECFSZ 01,F
06D6:  BRA    06D0
06D8:  DECFSZ 02,F
06DA:  BRA    06D0
06DC:  GOTO   0718 (RETURN)
*
0896:  MOVLB  1
0898:  MOVF   x74,W
089A:  MULWF  x76
089C:  MOVFF  FF3,01
08A0:  MOVFF  FF4,00
08A4:  MULWF  x77
08A6:  MOVF   FF3,W
08A8:  ADDWF  00,F
08AA:  MOVF   x75,W
08AC:  MULWF  x76
08AE:  MOVF   FF3,W
08B0:  ADDWFC 00,W
08B2:  MOVWF  02
08B4:  MOVLB  0
08B6:  GOTO   0C4A (RETURN)
08BA:  MOVLB  1
08BC:  CLRF   x90
08BE:  CLRF   x91
08C0:  MOVLW  01
08C2:  MOVWF  x92
08C4:  CLRF   FDA
08C6:  CLRF   FD9
08C8:  MOVWF  x95
08CA:  MOVLW  88
08CC:  MOVWF  x94
08CE:  MOVLW  01
08D0:  MOVWF  FEA
08D2:  MOVLW  8C
08D4:  MOVWF  FE9
08D6:  MOVFF  195,FE2
08DA:  MOVFF  194,FE1
08DE:  MOVFF  192,193
08E2:  BCF    FD8.0
08E4:  MOVF   FE5,W
08E6:  MULWF  FEE
08E8:  MOVF   FF3,W
08EA:  ADDWFC x90,F
08EC:  MOVF   FF4,W
08EE:  ADDWFC x91,F
08F0:  DECFSZ x93,F
08F2:  BRA    08E2
08F4:  MOVFF  190,FDE
08F8:  MOVFF  191,190
08FC:  CLRF   x91
08FE:  BTFSC  FD8.0
0900:  INCF   x91,F
0902:  INCF   x94,F
0904:  BTFSC  FD8.2
0906:  INCF   x95,F
0908:  INCF   x92,F
090A:  MOVF   x92,W
090C:  SUBLW  05
090E:  BNZ   08CE
0910:  MOVLB  0
0912:  RETURN 0
0914:  BTFSC  FD8.1
0916:  BRA    0920
0918:  MOVLW  01
091A:  MOVWF  FEA
091C:  MOVLW  D1
091E:  MOVWF  FE9
0920:  CLRF   00
0922:  CLRF   01
0924:  CLRF   02
0926:  CLRF   03
0928:  MOVLB  1
092A:  CLRF   xD1
092C:  CLRF   xD2
092E:  CLRF   xD3
0930:  CLRF   xD4
0932:  MOVF   xD0,W
0934:  IORWF  xCF,W
0936:  IORWF  xCE,W
0938:  IORWF  xCD,W
093A:  BZ    0994
093C:  MOVLW  20
093E:  MOVWF  xD5
0940:  BCF    FD8.0
0942:  RLCF   xC9,F
0944:  RLCF   xCA,F
0946:  RLCF   xCB,F
0948:  RLCF   xCC,F
094A:  RLCF   xD1,F
094C:  RLCF   xD2,F
094E:  RLCF   xD3,F
0950:  RLCF   xD4,F
0952:  MOVF   xD0,W
0954:  SUBWF  xD4,W
0956:  BNZ   0968
0958:  MOVF   xCF,W
095A:  SUBWF  xD3,W
095C:  BNZ   0968
095E:  MOVF   xCE,W
0960:  SUBWF  xD2,W
0962:  BNZ   0968
0964:  MOVF   xCD,W
0966:  SUBWF  xD1,W
0968:  BNC   0988
096A:  MOVF   xCD,W
096C:  SUBWF  xD1,F
096E:  MOVF   xCE,W
0970:  BTFSS  FD8.0
0972:  INCFSZ xCE,W
0974:  SUBWF  xD2,F
0976:  MOVF   xCF,W
0978:  BTFSS  FD8.0
097A:  INCFSZ xCF,W
097C:  SUBWF  xD3,F
097E:  MOVF   xD0,W
0980:  BTFSS  FD8.0
0982:  INCFSZ xD0,W
0984:  SUBWF  xD4,F
0986:  BSF    FD8.0
0988:  RLCF   00,F
098A:  RLCF   01,F
098C:  RLCF   02,F
098E:  RLCF   03,F
0990:  DECFSZ xD5,F
0992:  BRA    0940
0994:  MOVFF  1D1,FEF
0998:  MOVFF  1D2,FEC
099C:  MOVFF  1D3,FEC
09A0:  MOVFF  1D4,FEC
09A4:  MOVLB  0
09A6:  RETURN 0
*
1470:  MOVLB  1
1472:  MOVF   x79,W
1474:  XORWF  x7B,W
1476:  ANDLW  80
1478:  MOVWF  x7D
147A:  BTFSS  x79.7
147C:  BRA    1488
147E:  COMF   x78,F
1480:  COMF   x79,F
1482:  INCF   x78,F
1484:  BTFSC  FD8.2
1486:  INCF   x79,F
1488:  BTFSS  x7B.7
148A:  BRA    1496
148C:  COMF   x7A,F
148E:  COMF   x7B,F
1490:  INCF   x7A,F
1492:  BTFSC  FD8.2
1494:  INCF   x7B,F
1496:  MOVF   x78,W
1498:  MULWF  x7A
149A:  MOVFF  FF3,01
149E:  MOVFF  FF4,00
14A2:  MULWF  x7B
14A4:  MOVF   FF3,W
14A6:  ADDWF  00,F
14A8:  MOVF   x79,W
14AA:  MULWF  x7A
14AC:  MOVF   FF3,W
14AE:  ADDWFC 00,W
14B0:  MOVWF  02
14B2:  BTFSS  x7D.7
14B4:  BRA    14C0
14B6:  COMF   01,F
14B8:  COMF   02,F
14BA:  INCF   01,F
14BC:  BTFSC  FD8.2
14BE:  INCF   02,F
14C0:  MOVLB  0
14C2:  RETURN 0
*
168E:  MOVLW  8E
1690:  MOVWF  00
1692:  MOVFF  1BD,01
1696:  MOVFF  1BC,02
169A:  CLRF   03
169C:  MOVF   01,F
169E:  BNZ   16B2
16A0:  MOVFF  02,01
16A4:  CLRF   02
16A6:  MOVLW  08
16A8:  SUBWF  00,F
16AA:  MOVF   01,F
16AC:  BNZ   16B2
16AE:  CLRF   00
16B0:  BRA    16C2
16B2:  BCF    FD8.0
16B4:  BTFSC  01.7
16B6:  BRA    16C0
16B8:  RLCF   02,F
16BA:  RLCF   01,F
16BC:  DECF   00,F
16BE:  BRA    16B2
16C0:  BCF    01.7
16C2:  GOTO   20A6 (RETURN)
16C6:  MOVLB  1
16C8:  MOVF   xC0,W
16CA:  BTFSC  FD8.2
16CC:  BRA    1818
16CE:  MOVWF  xCC
16D0:  MOVF   xC4,W
16D2:  BTFSC  FD8.2
16D4:  BRA    1818
16D6:  SUBWF  xCC,F
16D8:  BNC   16E4
16DA:  MOVLW  7F
16DC:  ADDWF  xCC,F
16DE:  BTFSC  FD8.0
16E0:  BRA    1818
16E2:  BRA    16F0
16E4:  MOVLW  81
16E6:  SUBWF  xCC,F
16E8:  BTFSS  FD8.0
16EA:  BRA    1818
16EC:  BTFSC  FD8.2
16EE:  BRA    1818
16F0:  MOVFF  1CC,00
16F4:  CLRF   01
16F6:  CLRF   02
16F8:  CLRF   03
16FA:  CLRF   xCB
16FC:  MOVFF  1C1,1CA
1700:  BSF    xCA.7
1702:  MOVFF  1C2,1C9
1706:  MOVFF  1C3,1C8
170A:  MOVLW  19
170C:  MOVWF  xCC
170E:  MOVF   xC7,W
1710:  SUBWF  xC8,F
1712:  BC    172E
1714:  MOVLW  01
1716:  SUBWF  xC9,F
1718:  BC    172E
171A:  SUBWF  xCA,F
171C:  BC    172E
171E:  SUBWF  xCB,F
1720:  BC    172E
1722:  INCF   xCB,F
1724:  INCF   xCA,F
1726:  INCF   xC9,F
1728:  MOVF   xC7,W
172A:  ADDWF  xC8,F
172C:  BRA    177E
172E:  MOVF   xC6,W
1730:  SUBWF  xC9,F
1732:  BC    1758
1734:  MOVLW  01
1736:  SUBWF  xCA,F
1738:  BC    1758
173A:  SUBWF  xCB,F
173C:  BC    1758
173E:  INCF   xCB,F
1740:  INCF   xCA,F
1742:  MOVF   xC6,W
1744:  ADDWF  xC9,F
1746:  MOVF   xC7,W
1748:  ADDWF  xC8,F
174A:  BNC   177E
174C:  INCF   xC9,F
174E:  BNZ   177E
1750:  INCF   xCA,F
1752:  BNZ   177E
1754:  INCF   xCB,F
1756:  BRA    177E
1758:  MOVF   xC5,W
175A:  IORLW  80
175C:  SUBWF  xCA,F
175E:  BC    177C
1760:  MOVLW  01
1762:  SUBWF  xCB,F
1764:  BC    177C
1766:  INCF   xCB,F
1768:  MOVF   xC5,W
176A:  IORLW  80
176C:  ADDWF  xCA,F
176E:  MOVF   xC6,W
1770:  ADDWF  xC9,F
1772:  BNC   1746
1774:  INCF   xCA,F
1776:  BNZ   1746
1778:  INCF   xCB,F
177A:  BRA    1746
177C:  BSF    03.0
177E:  DECFSZ xCC,F
1780:  BRA    1784
1782:  BRA    179A
1784:  BCF    FD8.0
1786:  RLCF   xC8,F
1788:  RLCF   xC9,F
178A:  RLCF   xCA,F
178C:  RLCF   xCB,F
178E:  BCF    FD8.0
1790:  RLCF   03,F
1792:  RLCF   02,F
1794:  RLCF   01,F
1796:  RLCF   xCD,F
1798:  BRA    170E
179A:  BTFSS  xCD.0
179C:  BRA    17AA
179E:  BCF    FD8.0
17A0:  RRCF   01,F
17A2:  RRCF   02,F
17A4:  RRCF   03,F
17A6:  RRCF   xCD,F
17A8:  BRA    17AE
17AA:  DECF   00,F
17AC:  BZ    1818
17AE:  BTFSC  xCD.7
17B0:  BRA    17EE
17B2:  BCF    FD8.0
17B4:  RLCF   xC8,F
17B6:  RLCF   xC9,F
17B8:  RLCF   xCA,F
17BA:  RLCF   xCB,F
17BC:  MOVF   xC7,W
17BE:  SUBWF  xC8,F
17C0:  BC    17D0
17C2:  MOVLW  01
17C4:  SUBWF  xC9,F
17C6:  BC    17D0
17C8:  SUBWF  xCA,F
17CA:  BC    17D0
17CC:  SUBWF  xCB,F
17CE:  BNC   1804
17D0:  MOVF   xC6,W
17D2:  SUBWF  xC9,F
17D4:  BC    17E0
17D6:  MOVLW  01
17D8:  SUBWF  xCA,F
17DA:  BC    17E0
17DC:  SUBWF  xCB,F
17DE:  BNC   1804
17E0:  MOVF   xC5,W
17E2:  IORLW  80
17E4:  SUBWF  xCA,F
17E6:  BC    17EE
17E8:  MOVLW  01
17EA:  SUBWF  xCB,F
17EC:  BNC   1804
17EE:  INCF   03,F
17F0:  BNZ   1804
17F2:  INCF   02,F
17F4:  BNZ   1804
17F6:  INCF   01,F
17F8:  BNZ   1804
17FA:  INCF   00,F
17FC:  BZ    1818
17FE:  RRCF   01,F
1800:  RRCF   02,F
1802:  RRCF   03,F
1804:  MOVFF  1C1,1CC
1808:  MOVF   xC5,W
180A:  XORWF  xCC,F
180C:  BTFSS  xCC.7
180E:  BRA    1814
1810:  BSF    01.7
1812:  BRA    1820
1814:  BCF    01.7
1816:  BRA    1820
1818:  CLRF   00
181A:  CLRF   01
181C:  CLRF   02
181E:  CLRF   03
1820:  MOVLB  0
1822:  GOTO   20D8 (RETURN)
1826:  MOVLB  1
1828:  MOVF   xC9,W
182A:  BTFSC  FD8.2
182C:  BRA    1910
182E:  MOVWF  00
1830:  MOVF   xCD,W
1832:  BTFSC  FD8.2
1834:  BRA    1910
1836:  ADDWF  00,F
1838:  BNC   1842
183A:  MOVLW  81
183C:  ADDWF  00,F
183E:  BC    1910
1840:  BRA    184A
1842:  MOVLW  7F
1844:  SUBWF  00,F
1846:  BNC   1910
1848:  BZ    1910
184A:  MOVFF  1CA,1D1
184E:  MOVF   xCE,W
1850:  XORWF  xD1,F
1852:  BSF    xCA.7
1854:  BSF    xCE.7
1856:  MOVF   xCC,W
1858:  MULWF  xD0
185A:  MOVFF  FF4,1D3
185E:  MOVF   xCB,W
1860:  MULWF  xCF
1862:  MOVFF  FF4,03
1866:  MOVFF  FF3,1D2
186A:  MULWF  xD0
186C:  MOVF   FF3,W
186E:  ADDWF  xD3,F
1870:  MOVF   FF4,W
1872:  ADDWFC xD2,F
1874:  MOVLW  00
1876:  ADDWFC 03,F
1878:  MOVF   xCC,W
187A:  MULWF  xCF
187C:  MOVF   FF3,W
187E:  ADDWF  xD3,F
1880:  MOVF   FF4,W
1882:  ADDWFC xD2,F
1884:  MOVLW  00
1886:  CLRF   02
1888:  ADDWFC 03,F
188A:  ADDWFC 02,F
188C:  MOVF   xCA,W
188E:  MULWF  xD0
1890:  MOVF   FF3,W
1892:  ADDWF  xD2,F
1894:  MOVF   FF4,W
1896:  ADDWFC 03,F
1898:  MOVLW  00
189A:  ADDWFC 02,F
189C:  MOVF   xCA,W
189E:  MULWF  xCF
18A0:  MOVF   FF3,W
18A2:  ADDWF  03,F
18A4:  MOVF   FF4,W
18A6:  ADDWFC 02,F
18A8:  MOVLW  00
18AA:  CLRF   01
18AC:  ADDWFC 01,F
18AE:  MOVF   xCC,W
18B0:  MULWF  xCE
18B2:  MOVF   FF3,W
18B4:  ADDWF  xD2,F
18B6:  MOVF   FF4,W
18B8:  ADDWFC 03,F
18BA:  MOVLW  00
18BC:  ADDWFC 02,F
18BE:  ADDWFC 01,F
18C0:  MOVF   xCB,W
18C2:  MULWF  xCE
18C4:  MOVF   FF3,W
18C6:  ADDWF  03,F
18C8:  MOVF   FF4,W
18CA:  ADDWFC 02,F
18CC:  MOVLW  00
18CE:  ADDWFC 01,F
18D0:  MOVF   xCA,W
18D2:  MULWF  xCE
18D4:  MOVF   FF3,W
18D6:  ADDWF  02,F
18D8:  MOVF   FF4,W
18DA:  ADDWFC 01,F
18DC:  INCF   00,F
18DE:  BTFSC  01.7
18E0:  BRA    18EC
18E2:  RLCF   xD2,F
18E4:  RLCF   03,F
18E6:  RLCF   02,F
18E8:  RLCF   01,F
18EA:  DECF   00,F
18EC:  MOVLW  00
18EE:  BTFSS  xD2.7
18F0:  BRA    1906
18F2:  INCF   03,F
18F4:  ADDWFC 02,F
18F6:  ADDWFC 01,F
18F8:  MOVF   01,W
18FA:  BNZ   1906
18FC:  MOVF   02,W
18FE:  BNZ   1906
1900:  MOVF   03,W
1902:  BNZ   1906
1904:  INCF   00,F
1906:  BTFSC  xD1.7
1908:  BSF    01.7
190A:  BTFSS  xD1.7
190C:  BCF    01.7
190E:  BRA    1918
1910:  CLRF   00
1912:  CLRF   01
1914:  CLRF   02
1916:  CLRF   03
1918:  MOVLB  0
191A:  RETURN 0
191C:  MOVLW  80
191E:  BTFSS  FD8.1
1920:  BRA    1926
1922:  MOVLB  1
1924:  XORWF  xC1,F
1926:  MOVLB  1
1928:  CLRF   xC6
192A:  CLRF   xC7
192C:  MOVFF  1BD,1C5
1930:  MOVF   xC1,W
1932:  XORWF  xC5,F
1934:  MOVF   xBC,W
1936:  BTFSC  FD8.2
1938:  BRA    1AF8
193A:  MOVWF  xC4
193C:  MOVWF  00
193E:  MOVF   xC0,W
1940:  BTFSC  FD8.2
1942:  BRA    1B0A
1944:  SUBWF  xC4,F
1946:  BTFSC  FD8.2
1948:  BRA    1A50
194A:  BNC   19C8
194C:  MOVFF  1C1,1CA
1950:  BSF    xCA.7
1952:  MOVFF  1C2,1C9
1956:  MOVFF  1C3,1C8
195A:  CLRF   xC7
195C:  BCF    FD8.0
195E:  RRCF   xCA,F
1960:  RRCF   xC9,F
1962:  RRCF   xC8,F
1964:  RRCF   xC7,F
1966:  DECFSZ xC4,F
1968:  BRA    195A
196A:  BTFSS  xC5.7
196C:  BRA    1974
196E:  BSF    xC6.0
1970:  BRA    1B32
1972:  BCF    xC6.0
1974:  BCF    xC4.0
1976:  BSF    xC6.4
1978:  MOVLW  01
197A:  MOVWF  FEA
197C:  MOVLW  BF
197E:  MOVWF  FE9
1980:  BRA    1B58
1982:  BCF    xC6.4
1984:  BTFSC  xC5.7
1986:  BRA    199C
1988:  BTFSS  xC4.0
198A:  BRA    19B2
198C:  RRCF   xCA,F
198E:  RRCF   xC9,F
1990:  RRCF   xC8,F
1992:  RRCF   xC7,F
1994:  INCF   00,F
1996:  BTFSC  FD8.2
1998:  BRA    1B28
199A:  BRA    19B2
199C:  BTFSC  xCA.7
199E:  BRA    19B8
19A0:  BCF    FD8.0
19A2:  RLCF   xC7,F
19A4:  RLCF   xC8,F
19A6:  RLCF   xC9,F
19A8:  RLCF   xCA,F
19AA:  DECF   00,F
19AC:  BTFSC  FD8.2
19AE:  BRA    1B28
19B0:  BRA    199C
19B2:  BSF    xC6.6
19B4:  BRA    1A90
19B6:  BCF    xC6.6
19B8:  MOVFF  1BD,1C5
19BC:  BTFSS  xBD.7
19BE:  BRA    19C4
19C0:  BSF    xCA.7
19C2:  BRA    1B1A
19C4:  BCF    xCA.7
19C6:  BRA    1B1A
19C8:  MOVFF  1C0,1C4
19CC:  MOVFF  1C0,00
19D0:  MOVF   xBC,W
19D2:  SUBWF  xC4,F
19D4:  MOVFF  1BD,1CA
19D8:  BSF    xCA.7
19DA:  MOVFF  1BE,1C9
19DE:  MOVFF  1BF,1C8
19E2:  CLRF   xC7
19E4:  BCF    FD8.0
19E6:  RRCF   xCA,F
19E8:  RRCF   xC9,F
19EA:  RRCF   xC8,F
19EC:  RRCF   xC7,F
19EE:  DECFSZ xC4,F
19F0:  BRA    19E2
19F2:  BTFSS  xC5.7
19F4:  BRA    19FC
19F6:  BSF    xC6.1
19F8:  BRA    1B32
19FA:  BCF    xC6.1
19FC:  BCF    xC4.0
19FE:  BSF    xC6.5
1A00:  MOVLW  01
1A02:  MOVWF  FEA
1A04:  MOVLW  C3
1A06:  MOVWF  FE9
1A08:  BRA    1B58
1A0A:  BCF    xC6.5
1A0C:  BTFSC  xC5.7
1A0E:  BRA    1A24
1A10:  BTFSS  xC4.0
1A12:  BRA    1A3A
1A14:  RRCF   xCA,F
1A16:  RRCF   xC9,F
1A18:  RRCF   xC8,F
1A1A:  RRCF   xC7,F
1A1C:  INCF   00,F
1A1E:  BTFSC  FD8.2
1A20:  BRA    1B28
1A22:  BRA    1A3A
1A24:  BTFSC  xCA.7
1A26:  BRA    1A40
1A28:  BCF    FD8.0
1A2A:  RLCF   xC7,F
1A2C:  RLCF   xC8,F
1A2E:  RLCF   xC9,F
1A30:  RLCF   xCA,F
1A32:  DECF   00,F
1A34:  BTFSC  FD8.2
1A36:  BRA    1B28
1A38:  BRA    1A24
1A3A:  BSF    xC6.7
1A3C:  BRA    1A90
1A3E:  BCF    xC6.7
1A40:  MOVFF  1C1,1C5
1A44:  BTFSS  xC1.7
1A46:  BRA    1A4C
1A48:  BSF    xCA.7
1A4A:  BRA    1B1A
1A4C:  BCF    xCA.7
1A4E:  BRA    1B1A
1A50:  MOVFF  1C1,1CA
1A54:  BSF    xCA.7
1A56:  MOVFF  1C2,1C9
1A5A:  MOVFF  1C3,1C8
1A5E:  BTFSS  xC5.7
1A60:  BRA    1A6A
1A62:  BCF    xCA.7
1A64:  BSF    xC6.2
1A66:  BRA    1B32
1A68:  BCF    xC6.2
1A6A:  CLRF   xC7
1A6C:  BCF    xC4.0
1A6E:  MOVLW  01
1A70:  MOVWF  FEA
1A72:  MOVLW  BF
1A74:  MOVWF  FE9
1A76:  BRA    1B58
1A78:  BTFSC  xC5.7
1A7A:  BRA    1AB4
1A7C:  MOVFF  1BD,1C5
1A80:  BTFSS  xC4.0
1A82:  BRA    1A90
1A84:  RRCF   xCA,F
1A86:  RRCF   xC9,F
1A88:  RRCF   xC8,F
1A8A:  RRCF   xC7,F
1A8C:  INCF   00,F
1A8E:  BZ    1B28
1A90:  BTFSS  xC7.7
1A92:  BRA    1AAA
1A94:  INCF   xC8,F
1A96:  BNZ   1AAA
1A98:  INCF   xC9,F
1A9A:  BNZ   1AAA
1A9C:  INCF   xCA,F
1A9E:  BNZ   1AAA
1AA0:  RRCF   xCA,F
1AA2:  RRCF   xC9,F
1AA4:  RRCF   xC8,F
1AA6:  INCF   00,F
1AA8:  BZ    1B28
1AAA:  BTFSC  xC6.6
1AAC:  BRA    19B6
1AAE:  BTFSC  xC6.7
1AB0:  BRA    1A3E
1AB2:  BRA    1AEC
1AB4:  MOVLW  80
1AB6:  XORWF  xCA,F
1AB8:  BTFSS  xCA.7
1ABA:  BRA    1AC4
1ABC:  BRA    1B32
1ABE:  MOVFF  1C1,1C5
1AC2:  BRA    1AD8
1AC4:  MOVFF  1BD,1C5
1AC8:  MOVF   xCA,F
1ACA:  BNZ   1AD8
1ACC:  MOVF   xC9,F
1ACE:  BNZ   1AD8
1AD0:  MOVF   xC8,F
1AD2:  BNZ   1AD8
1AD4:  CLRF   00
1AD6:  BRA    1B1A
1AD8:  BTFSC  xCA.7
1ADA:  BRA    1AEC
1ADC:  BCF    FD8.0
1ADE:  RLCF   xC7,F
1AE0:  RLCF   xC8,F
1AE2:  RLCF   xC9,F
1AE4:  RLCF   xCA,F
1AE6:  DECFSZ 00,F
1AE8:  BRA    1AD8
1AEA:  BRA    1B28
1AEC:  BTFSS  xC5.7
1AEE:  BRA    1AF4
1AF0:  BSF    xCA.7
1AF2:  BRA    1B1A
1AF4:  BCF    xCA.7
1AF6:  BRA    1B1A
1AF8:  MOVFF  1C0,00
1AFC:  MOVFF  1C1,1CA
1B00:  MOVFF  1C2,1C9
1B04:  MOVFF  1C3,1C8
1B08:  BRA    1B1A
1B0A:  MOVFF  1BC,00
1B0E:  MOVFF  1BD,1CA
1B12:  MOVFF  1BE,1C9
1B16:  MOVFF  1BF,1C8
1B1A:  MOVFF  1CA,01
1B1E:  MOVFF  1C9,02
1B22:  MOVFF  1C8,03
1B26:  BRA    1B90
1B28:  CLRF   00
1B2A:  CLRF   01
1B2C:  CLRF   02
1B2E:  CLRF   03
1B30:  BRA    1B90
1B32:  CLRF   xC7
1B34:  COMF   xC8,F
1B36:  COMF   xC9,F
1B38:  COMF   xCA,F
1B3A:  COMF   xC7,F
1B3C:  INCF   xC7,F
1B3E:  BNZ   1B4A
1B40:  INCF   xC8,F
1B42:  BNZ   1B4A
1B44:  INCF   xC9,F
1B46:  BNZ   1B4A
1B48:  INCF   xCA,F
1B4A:  BTFSC  xC6.0
1B4C:  BRA    1972
1B4E:  BTFSC  xC6.1
1B50:  BRA    19FA
1B52:  BTFSC  xC6.2
1B54:  BRA    1A68
1B56:  BRA    1ABE
1B58:  MOVF   FEF,W
1B5A:  ADDWF  xC8,F
1B5C:  BNC   1B68
1B5E:  INCF   xC9,F
1B60:  BNZ   1B68
1B62:  INCF   xCA,F
1B64:  BTFSC  FD8.2
1B66:  BSF    xC4.0
1B68:  MOVF   FED,F
1B6A:  MOVF   FEF,W
1B6C:  ADDWF  xC9,F
1B6E:  BNC   1B76
1B70:  INCF   xCA,F
1B72:  BTFSC  FD8.2
1B74:  BSF    xC4.0
1B76:  MOVF   FED,F
1B78:  MOVF   FEF,W
1B7A:  BTFSC  FEF.7
1B7C:  BRA    1B80
1B7E:  XORLW  80
1B80:  ADDWF  xCA,F
1B82:  BTFSC  FD8.0
1B84:  BSF    xC4.0
1B86:  BTFSC  xC6.4
1B88:  BRA    1982
1B8A:  BTFSC  xC6.5
1B8C:  BRA    1A0A
1B8E:  BRA    1A78
1B90:  MOVLB  0
1B92:  RETURN 0
1B94:  MOVFF  108,FEA
1B98:  MOVFF  107,FE9
1B9C:  MOVLB  1
1B9E:  MOVFF  1C9,FEF
1BA2:  INCF   FE9,F
1BA4:  BTFSC  FD8.2
1BA6:  INCF   FEA,F
1BA8:  CLRF   FEF
1BAA:  INCF   x07,F
1BAC:  BTFSC  FD8.2
1BAE:  INCF   x08,F
1BB0:  MOVLB  0
1BB2:  RETURN 0
1BB4:  TBLRD*+
1BB6:  MOVFF  FF6,1BD
1BBA:  MOVFF  FF7,1BE
1BBE:  MOVFF  FF5,1C9
1BC2:  RCALL  1B94
1BC4:  MOVFF  1BD,FF6
1BC8:  MOVFF  1BE,FF7
1BCC:  MOVLB  1
1BCE:  DECFSZ xBC,F
1BD0:  BRA    1BD4
1BD2:  BRA    1BD8
1BD4:  MOVLB  0
1BD6:  BRA    1BB4
1BD8:  MOVLB  0
1BDA:  RETURN 0
1BDC:  MOVFF  FEA,1C4
1BE0:  MOVFF  FE9,1C3
1BE4:  MOVLB  1
1BE6:  SWAPF  xBD,W
1BE8:  IORLW  F0
1BEA:  MOVWF  xBF
1BEC:  ADDWF  xBF,F
1BEE:  ADDLW  E2
1BF0:  MOVWF  xC0
1BF2:  ADDLW  32
1BF4:  MOVWF  xC2
1BF6:  MOVF   xBD,W
1BF8:  ANDLW  0F
1BFA:  ADDWF  xC0,F
1BFC:  ADDWF  xC0,F
1BFE:  ADDWF  xC2,F
1C00:  ADDLW  E9
1C02:  MOVWF  xC1
1C04:  ADDWF  xC1,F
1C06:  ADDWF  xC1,F
1C08:  SWAPF  xBC,W
1C0A:  ANDLW  0F
1C0C:  ADDWF  xC1,F
1C0E:  ADDWF  xC2,F
1C10:  RLCF   xC1,F
1C12:  RLCF   xC2,F
1C14:  COMF   xC2,F
1C16:  RLCF   xC2,F
1C18:  MOVF   xBC,W
1C1A:  ANDLW  0F
1C1C:  ADDWF  xC2,F
1C1E:  RLCF   xBF,F
1C20:  MOVLW  07
1C22:  MOVWF  xBE
1C24:  MOVLW  0A
1C26:  DECF   xC1,F
1C28:  ADDWF  xC2,F
1C2A:  BNC   1C26
1C2C:  DECF   xC0,F
1C2E:  ADDWF  xC1,F
1C30:  BNC   1C2C
1C32:  DECF   xBF,F
1C34:  ADDWF  xC0,F
1C36:  BNC   1C32
1C38:  DECF   xBE,F
1C3A:  ADDWF  xBF,F
1C3C:  BNC   1C38
1C3E:  MOVLW  01
1C40:  MOVWF  FEA
1C42:  MOVLW  BE
1C44:  MOVWF  FE9
1C46:  MOVLW  07
1C48:  ANDWF  xC3,W
1C4A:  BCF    xC3.6
1C4C:  ADDWF  FE9,F
1C4E:  MOVLW  C2
1C50:  SUBWF  FE9,W
1C52:  BTFSC  FD8.2
1C54:  BSF    xC3.6
1C56:  MOVF   FEF,W
1C58:  MOVWF  00
1C5A:  BNZ   1C6C
1C5C:  BTFSC  xC3.6
1C5E:  BRA    1C6C
1C60:  BTFSC  xC3.4
1C62:  BRA    1C8E
1C64:  BTFSC  xC3.3
1C66:  BRA    1C6C
1C68:  MOVLW  20
1C6A:  BRA    1C72
1C6C:  BSF    xC3.3
1C6E:  BCF    xC3.4
1C70:  MOVLW  30
1C72:  ADDWF  00,F
1C74:  MOVFF  FEA,1BD
1C78:  MOVFF  FE9,1BC
1C7C:  MOVFF  00,1C9
1C80:  MOVLB  0
1C82:  RCALL  1B94
1C84:  MOVFF  1BD,FEA
1C88:  MOVFF  1BC,FE9
1C8C:  MOVLB  1
1C8E:  MOVF   FEE,W
1C90:  BTFSS  xC3.6
1C92:  BRA    1C4E
1C94:  MOVLB  0
1C96:  RETURN 0
1C98:  MOVLB  1
1C9A:  MOVF   xC9,W
1C9C:  SUBLW  B6
1C9E:  MOVWF  xC9
1CA0:  CLRF   03
1CA2:  MOVFF  1CA,1CD
1CA6:  BSF    xCA.7
1CA8:  BCF    FD8.0
1CAA:  RRCF   xCA,F
1CAC:  RRCF   xCB,F
1CAE:  RRCF   xCC,F
1CB0:  RRCF   03,F
1CB2:  RRCF   02,F
1CB4:  RRCF   01,F
1CB6:  RRCF   00,F
1CB8:  DECFSZ xC9,F
1CBA:  BRA    1CA8
1CBC:  BTFSS  xCD.7
1CBE:  BRA    1CD6
1CC0:  COMF   00,F
1CC2:  COMF   01,F
1CC4:  COMF   02,F
1CC6:  COMF   03,F
1CC8:  INCF   00,F
1CCA:  BTFSC  FD8.2
1CCC:  INCF   01,F
1CCE:  BTFSC  FD8.2
1CD0:  INCF   02,F
1CD2:  BTFSC  FD8.2
1CD4:  INCF   03,F
1CD6:  MOVLB  0
1CD8:  GOTO   1D32 (RETURN)
1CDC:  MOVF   FE9,W
1CDE:  MOVLB  1
1CE0:  MOVWF  xC1
1CE2:  MOVF   xC0,W
1CE4:  MOVWF  xC3
1CE6:  BZ    1D1E
1CE8:  MOVFF  1BF,1CC
1CEC:  MOVFF  1BE,1CB
1CF0:  MOVFF  1BD,1CA
1CF4:  MOVFF  1BC,1C9
1CF8:  CLRF   xD0
1CFA:  CLRF   xCF
1CFC:  MOVLW  20
1CFE:  MOVWF  xCE
1D00:  MOVLW  82
1D02:  MOVWF  xCD
1D04:  MOVLB  0
1D06:  RCALL  1826
1D08:  MOVFF  03,1BF
1D0C:  MOVFF  02,1BE
1D10:  MOVFF  01,1BD
1D14:  MOVFF  00,1BC
1D18:  MOVLB  1
1D1A:  DECFSZ xC3,F
1D1C:  BRA    1CE8
1D1E:  MOVFF  1BF,1CC
1D22:  MOVFF  1BE,1CB
1D26:  MOVFF  1BD,1CA
1D2A:  MOVFF  1BC,1C9
1D2E:  MOVLB  0
1D30:  BRA    1C98
1D32:  MOVFF  03,1BF
1D36:  MOVFF  02,1BE
1D3A:  MOVFF  01,1BD
1D3E:  MOVFF  00,1BC
1D42:  MOVLB  1
1D44:  BTFSS  xBF.7
1D46:  BRA    1D62
1D48:  DECF   xC1,F
1D4A:  BSF    xC1.5
1D4C:  COMF   xBC,F
1D4E:  COMF   xBD,F
1D50:  COMF   xBE,F
1D52:  COMF   xBF,F
1D54:  INCF   xBC,F
1D56:  BTFSC  FD8.2
1D58:  INCF   xBD,F
1D5A:  BTFSC  FD8.2
1D5C:  INCF   xBE,F
1D5E:  BTFSC  FD8.2
1D60:  INCF   xBF,F
1D62:  MOVLW  3B
1D64:  MOVWF  xC8
1D66:  MOVLW  9A
1D68:  MOVWF  xC7
1D6A:  MOVLW  CA
1D6C:  MOVWF  xC6
1D6E:  CLRF   xC5
1D70:  MOVLW  0A
1D72:  MOVWF  xC3
1D74:  MOVF   xC0,W
1D76:  BTFSC  FD8.2
1D78:  INCF   xC1,F
1D7A:  BSF    FD8.1
1D7C:  MOVLW  01
1D7E:  MOVWF  FEA
1D80:  MOVLW  BC
1D82:  MOVWF  FE9
1D84:  MOVFF  1BF,1CC
1D88:  MOVFF  1BE,1CB
1D8C:  MOVFF  1BD,1CA
1D90:  MOVFF  1BC,1C9
1D94:  MOVFF  1C8,1D0
1D98:  MOVFF  1C7,1CF
1D9C:  MOVFF  1C6,1CE
1DA0:  MOVFF  1C5,1CD
1DA4:  MOVLB  0
1DA6:  CALL   0914
1DAA:  MOVF   01,W
1DAC:  MOVF   00,F
1DAE:  BNZ   1DD6
1DB0:  MOVLB  1
1DB2:  INCF   xC0,W
1DB4:  SUBWF  xC3,W
1DB6:  BTFSS  FD8.2
1DB8:  BRA    1DBE
1DBA:  MOVLB  0
1DBC:  BRA    1DD6
1DBE:  MOVF   xC1,W
1DC0:  BZ    1DDC
1DC2:  ANDLW  0F
1DC4:  SUBWF  xC3,W
1DC6:  BZ    1DCA
1DC8:  BC    1E4A
1DCA:  BTFSC  xC1.7
1DCC:  BRA    1E4A
1DCE:  BTFSC  xC1.6
1DD0:  BRA    1DDC
1DD2:  MOVLW  20
1DD4:  BRA    1E3E
1DD6:  MOVLW  20
1DD8:  MOVLB  1
1DDA:  ANDWF  xC1,F
1DDC:  BTFSS  xC1.5
1DDE:  BRA    1DFC
1DE0:  BCF    xC1.5
1DE2:  MOVF   xC0,W
1DE4:  BTFSS  FD8.2
1DE6:  DECF   xC1,F
1DE8:  MOVF   00,W
1DEA:  MOVWF  xC1
1DEC:  MOVLW  2D
1DEE:  MOVWF  xC9
1DF0:  MOVLB  0
1DF2:  RCALL  1B94
1DF4:  MOVLB  1
1DF6:  MOVF   xC1,W
1DF8:  MOVWF  00
1DFA:  CLRF   xC1
1DFC:  MOVF   xC0,W
1DFE:  SUBWF  xC3,W
1E00:  BNZ   1E1A
1E02:  MOVF   00,W
1E04:  MOVWF  xC1
1E06:  MOVLW  2E
1E08:  MOVWF  xC9
1E0A:  MOVLB  0
1E0C:  RCALL  1B94
1E0E:  MOVLB  1
1E10:  MOVF   xC1,W
1E12:  MOVWF  00
1E14:  MOVLW  20
1E16:  ANDWF  xC1,F
1E18:  MOVLW  00
1E1A:  MOVLW  30
1E1C:  BTFSS  xC1.5
1E1E:  BRA    1E3E
1E20:  BCF    xC1.5
1E22:  MOVF   xC0,W
1E24:  BTFSS  FD8.2
1E26:  DECF   xC1,F
1E28:  MOVF   00,W
1E2A:  MOVWF  xC1
1E2C:  MOVLW  2D
1E2E:  MOVWF  xC9
1E30:  MOVLB  0
1E32:  RCALL  1B94
1E34:  MOVLB  1
1E36:  MOVF   xC1,W
1E38:  MOVWF  00
1E3A:  CLRF   xC1
1E3C:  MOVLW  30
1E3E:  ADDWF  00,F
1E40:  MOVFF  00,1C9
1E44:  MOVLB  0
1E46:  RCALL  1B94
1E48:  MOVLB  1
1E4A:  BCF    FD8.1
1E4C:  MOVFF  1C8,1CC
1E50:  MOVFF  1C7,1CB
1E54:  MOVFF  1C6,1CA
1E58:  MOVFF  1C5,1C9
1E5C:  CLRF   xD0
1E5E:  CLRF   xCF
1E60:  CLRF   xCE
1E62:  MOVLW  0A
1E64:  MOVWF  xCD
1E66:  MOVLB  0
1E68:  CALL   0914
1E6C:  MOVFF  03,1C8
1E70:  MOVFF  02,1C7
1E74:  MOVFF  01,1C6
1E78:  MOVFF  00,1C5
1E7C:  MOVLB  1
1E7E:  DECFSZ xC3,F
1E80:  BRA    1D7A
1E82:  MOVLB  0
1E84:  GOTO   22C0 (RETURN)
1E88:  MOVLB  1
1E8A:  MOVF   xBF,W
1E8C:  CLRF   01
1E8E:  SUBWF  xBE,W
1E90:  BC    1E98
1E92:  MOVFF  1BE,00
1E96:  BRA    1EB0
1E98:  CLRF   00
1E9A:  MOVLW  08
1E9C:  MOVWF  xC0
1E9E:  RLCF   xBE,F
1EA0:  RLCF   00,F
1EA2:  MOVF   xBF,W
1EA4:  SUBWF  00,W
1EA6:  BTFSC  FD8.0
1EA8:  MOVWF  00
1EAA:  RLCF   01,F
1EAC:  DECFSZ xC0,F
1EAE:  BRA    1E9E
1EB0:  MOVLB  0
1EB2:  RETURN 0
1EB4:  MOVF   01,W
1EB6:  MOVFF  1BC,1BE
1EBA:  MOVLW  64
1EBC:  MOVLB  1
1EBE:  MOVWF  xBF
1EC0:  MOVLB  0
1EC2:  RCALL  1E88
1EC4:  MOVFF  00,1BC
1EC8:  MOVF   01,W
1ECA:  MOVLW  30
1ECC:  BNZ   1EDE
1ECE:  MOVLB  1
1ED0:  BTFSS  xBD.1
1ED2:  BRA    1EF2
1ED4:  BTFSC  xBD.3
1ED6:  BRA    1EF2
1ED8:  BTFSC  xBD.4
1EDA:  MOVLW  20
1EDC:  BRA    1EE6
1EDE:  MOVLB  1
1EE0:  BCF    xBD.3
1EE2:  BCF    xBD.4
1EE4:  BSF    xBD.0
1EE6:  ADDWF  01,F
1EE8:  MOVFF  01,1C9
1EEC:  MOVLB  0
1EEE:  RCALL  1B94
1EF0:  MOVLB  1
1EF2:  MOVFF  1BC,1BE
1EF6:  MOVLW  0A
1EF8:  MOVWF  xBF
1EFA:  MOVLB  0
1EFC:  RCALL  1E88
1EFE:  MOVFF  00,1BC
1F02:  MOVF   01,W
1F04:  MOVLW  30
1F06:  BNZ   1F18
1F08:  MOVLB  1
1F0A:  BTFSC  xBD.3
1F0C:  BRA    1F22
1F0E:  BTFSS  xBD.0
1F10:  BRA    1F22
1F12:  BTFSC  xBD.4
1F14:  MOVLW  20
1F16:  MOVLB  0
1F18:  ADDWF  01,F
1F1A:  MOVFF  01,1C9
1F1E:  RCALL  1B94
1F20:  MOVLB  1
1F22:  MOVLW  30
1F24:  ADDWF  xBC,F
1F26:  MOVFF  1BC,1C9
1F2A:  MOVLB  0
1F2C:  RCALL  1B94
1F2E:  GOTO   230E (RETURN)
1F32:  TBLRD*+
1F34:  MOVF   FF5,F
1F36:  BZ    1F50
1F38:  MOVFF  FF6,1BC
1F3C:  MOVFF  FF7,1BD
1F40:  MOVFF  FF5,1C9
1F44:  RCALL  1B94
1F46:  MOVFF  1BC,FF6
1F4A:  MOVFF  1BD,FF7
1F4E:  BRA    1F32
1F50:  RETURN 0
1F52:  MOVFF  FEA,1C4
1F56:  MOVFF  FE9,1C3
1F5A:  MOVLB  1
1F5C:  BTFSS  xBD.7
1F5E:  BRA    1F70
1F60:  BSF    xC3.7
1F62:  BTFSS  xC3.4
1F64:  INCF   xC3,F
1F66:  COMF   xBC,F
1F68:  COMF   xBD,F
1F6A:  INCF   xBC,F
1F6C:  BTFSC  FD8.2
1F6E:  INCF   xBD,F
1F70:  SWAPF  xBD,W
1F72:  IORLW  F0
1F74:  MOVWF  xBF
1F76:  ADDWF  xBF,F
1F78:  ADDLW  E2
1F7A:  MOVWF  xC0
1F7C:  ADDLW  32
1F7E:  MOVWF  xC2
1F80:  MOVF   xBD,W
1F82:  ANDLW  0F
1F84:  ADDWF  xC0,F
1F86:  ADDWF  xC0,F
1F88:  ADDWF  xC2,F
1F8A:  ADDLW  E9
1F8C:  MOVWF  xC1
1F8E:  ADDWF  xC1,F
1F90:  ADDWF  xC1,F
1F92:  SWAPF  xBC,W
1F94:  ANDLW  0F
1F96:  ADDWF  xC1,F
1F98:  ADDWF  xC2,F
1F9A:  RLCF   xC1,F
1F9C:  RLCF   xC2,F
1F9E:  COMF   xC2,F
1FA0:  RLCF   xC2,F
1FA2:  MOVF   xBC,W
1FA4:  ANDLW  0F
1FA6:  ADDWF  xC2,F
1FA8:  RLCF   xBF,F
1FAA:  MOVLW  07
1FAC:  MOVWF  xBE
1FAE:  MOVLW  0A
1FB0:  DECF   xC1,F
1FB2:  ADDWF  xC2,F
1FB4:  BNC   1FB0
1FB6:  DECF   xC0,F
1FB8:  ADDWF  xC1,F
1FBA:  BNC   1FB6
1FBC:  DECF   xBF,F
1FBE:  ADDWF  xC0,F
1FC0:  BNC   1FBC
1FC2:  DECF   xBE,F
1FC4:  ADDWF  xBF,F
1FC6:  BNC   1FC2
1FC8:  MOVLW  01
1FCA:  MOVWF  FEA
1FCC:  MOVLW  BE
1FCE:  MOVWF  FE9
1FD0:  MOVLW  07
1FD2:  ANDWF  xC3,W
1FD4:  BCF    xC3.6
1FD6:  DECF   FE9,F
1FD8:  ANDWF  xC3,W
1FDA:  BNZ   1FEA
1FDC:  BTFSC  xC3.4
1FDE:  INCF   FE9,F
1FE0:  BTFSC  xC3.4
1FE2:  BRA    1FEA
1FE4:  MOVLW  20
1FE6:  MOVWF  00
1FE8:  BRA    2022
1FEA:  ADDWF  FE9,F
1FEC:  MOVLW  C2
1FEE:  SUBWF  FE9,W
1FF0:  BTFSC  FD8.2
1FF2:  BSF    xC3.6
1FF4:  MOVF   FEF,W
1FF6:  MOVWF  00
1FF8:  BNZ   200A
1FFA:  BTFSC  xC3.6
1FFC:  BRA    200A
1FFE:  BTFSC  xC3.4
2000:  BRA    203C
2002:  BTFSC  xC3.3
2004:  BRA    200A
2006:  MOVLW  20
2008:  BRA    2020
200A:  BTFSS  xC3.7
200C:  BRA    201A
200E:  MOVLW  2D
2010:  MOVWF  00
2012:  MOVF   FED,W
2014:  BCF    xC3.6
2016:  BCF    xC3.7
2018:  BRA    2022
201A:  BSF    xC3.3
201C:  BCF    xC3.4
201E:  MOVLW  30
2020:  ADDWF  00,F
2022:  MOVFF  FEA,1BD
2026:  MOVFF  FE9,1BC
202A:  MOVFF  00,1C9
202E:  MOVLB  0
2030:  RCALL  1B94
2032:  MOVFF  1BD,FEA
2036:  MOVFF  1BC,FE9
203A:  MOVLB  1
203C:  MOVF   FEE,W
203E:  BTFSS  xC3.6
2040:  BRA    1FEC
2042:  MOVLB  0
2044:  RETURN 0
*
252A:  TBLRD*+
252C:  MOVF   FF5,F
252E:  BZ    254A
2530:  MOVFF  FF6,172
2534:  MOVFF  FF7,173
2538:  MOVF   FF5,W
253A:  BTFSS  FA4.4
253C:  BRA    253A
253E:  MOVWF  F73
2540:  MOVFF  172,FF6
2544:  MOVFF  173,FF7
2548:  BRA    252A
254A:  GOTO   2F3C (RETURN)
*
30E6:  MOVFF  FF2,0D
30EA:  BCF    FF2.7
30EC:  ADDWF  FE8,W
30EE:  CLRF   FF7
30F0:  RLCF   FF7,F
30F2:  ADDLW  0B
30F4:  MOVWF  FF6
30F6:  MOVLW  31
30F8:  ADDWFC FF7,F
30FA:  TBLRD*-
30FC:  MOVF   FF5,W
30FE:  MOVWF  FFA
3100:  TBLRD*
3102:  MOVF   FF5,W
3104:  BTFSC  0D.7
3106:  BSF    FF2.7
3108:  MOVWF  FF9
310A:  DATA 58,2F
310C:  DATA 5E,2F
310E:  DATA CC,2F
3110:  DATA E2,30
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000, restart_wdt) 
*
07C4:  MOVLW  01
07C6:  MOVWF  FEA
07C8:  MOVLW  21
07CA:  MOVWF  FE9
07CC:  MOVF   FEF,W
07CE:  BZ    07F2
07D0:  MOVLW  05
07D2:  MOVWF  01
07D4:  MOVLW  BF
07D6:  MOVWF  00
07D8:  CLRWDT
07DA:  DECFSZ 00,F
07DC:  BRA    07D8
07DE:  DECFSZ 01,F
07E0:  BRA    07D4
07E2:  MOVLW  2E
07E4:  MOVWF  00
07E6:  DECFSZ 00,F
07E8:  BRA    07E6
07EA:  NOP   
07EC:  CLRWDT
07EE:  DECFSZ FEF,F
07F0:  BRA    07D0
07F2:  RETURN 0
*
0C68:  MOVLW  04
0C6A:  MOVLB  1
0C6C:  SUBWF  xC9,F
0C6E:  BNC   0C84
0C70:  MOVLW  01
0C72:  MOVWF  FEA
0C74:  MOVLW  C9
0C76:  MOVWF  FE9
0C78:  MOVF   FEF,W
0C7A:  BZ    0C84
0C7C:  BRA    0C80
0C7E:  CLRWDT
0C80:  DECFSZ FEF,F
0C82:  BRA    0C7E
0C84:  MOVLB  0
0C86:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use rs232(baud=38400,parity=N,xmit=PIN_D6,rcv=PIN_D7,bits=8,stream=UART_CPLD)   //INVERT, RECEIVE_BUFFER=x 
....................  
.................... #define UINT  unsigned int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
.................... #define VERSION "BA1533RX V1.0" 
.................... #define VERSION_V "V1.0" 
....................  
.................... //--------- frequency constants ----------------------------------------------- 
.................... #define FREQ_P_MULT            32L 
.................... #define FREQ_BASE         2095000L       // in KHz 
.................... #define FREQ_STEP              100L       // in KHz 
.................... #define FREQ_OSC            10000L       // in KHz 
.................... #define FREQ_MUL              100L 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP)) 
....................  
.................... #define FRQ_LO_BOT 5150 
.................... #define FRQ_LO_TOP 5250 
.................... #define FRQ_HI_BOT 5650 
.................... #define FRQ_HI_TOP 5850 
....................  
.................... //========== power ============================================================ 
.................... UINT  power_level, power_control; 
....................  
.................... #define A2D_POWER   8    //28v 
.................... #define A2D_PREV    5    //rssi 
.................... #define A2D_TEMP    6 
.................... #define A2D_PWR_IN  7 
.................... #define A2D_Vdd     0 
....................  
.................... #define PWR_IN_TRESHOLD 100 
.................... #define PASS_FAIL_TRESHOLD 60 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
....................  
.................... //========== timer ============================================================ 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UCHAR  TMR_1sec_cnt; 
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
.................... #bit TMR_1Sec_BIT_EN    =  TMR_1sec_Flags.3 
....................  
.................... #define sense_28v  PIN_B2 
.................... #define MET_EN     PIN_B3 
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define RREV     PIN_A5 // sAN4 
.................... #define FFWR     PIN_E0 // sAN5 rssi 
.................... #define TMP      PIN_E1 // sAN6 temperature 
.................... #define PWR_IN   PIN_E2 // sAN7 
....................  
.................... #define PLL_LD   PIN_C0 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
....................  
.................... #define VC1		 PIN_D0 
.................... #define VC2		 PIN_D1 
....................   
.................... #define LNA_EN   PIN_D2			 
....................  
.................... #define BIT_MODE_EN  PIN_D3 
....................  
.................... #define VGMON_THRESHOLD 650 // 2.1V 
....................  
.................... #define METER_OUTPUT1  1   // 1 
.................... #define METER_OUTPUT2  5   // 11 
.................... #define METER_OUTPUT3  48   // 111  
.................... #define METER_OUTPUT4  481  // 1111 
....................  
.................... UINT power_avg[4], pavgx = 0; 
.................... int16 pass_count = 0; 
.................... //========== COM1 variables =================================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================================ 
....................  
.................... //----------- setup ----------------------------------------------------------- 
.................... struct { 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UINT  negative_voltage[3]; 
....................        UINT  power_in[4]; 
....................        UINT  reverse; 
....................        UCHAR meter_backlight; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  rssi_table[9][2]; 
....................  
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
....................  
.................... //========== function prototypes ============================================== 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
....................  
.................... //========== include source files ============================================= 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5312(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0D1C:  BCF    F89.2
....................  
....................   if (channel) 
0D1E:  MOVLB  1
0D20:  MOVF   x1D,F
0D22:  BZ    0D28
....................     output_high(DA2_DAT);    // send to VOUTB 
0D24:  BSF    F89.4
0D26:  BRA    0D2A
....................   else 
....................     output_low(DA2_DAT);    // send to VOUTA 
0D28:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0D2A:  BSF    F89.3
....................   delay_us(15); 
0D2C:  CLRWDT
0D2E:  MOVLW  13
0D30:  MOVWF  00
0D32:  DECFSZ 00,F
0D34:  BRA    0D32
0D36:  NOP   
....................   output_low(DA2_CLK); 
0D38:  BCF    F89.3
....................   delay_us(15); 
0D3A:  CLRWDT
0D3C:  MOVLW  13
0D3E:  MOVWF  00
0D40:  DECFSZ 00,F
0D42:  BRA    0D40
0D44:  NOP   
....................  
....................   output_low(DA2_DAT); 
0D46:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0D48:  BSF    F89.3
....................   delay_us(15); 
0D4A:  CLRWDT
0D4C:  MOVLW  13
0D4E:  MOVWF  00
0D50:  DECFSZ 00,F
0D52:  BRA    0D50
0D54:  NOP   
....................   output_low(DA2_CLK); 
0D56:  BCF    F89.3
....................   delay_us(15); 
0D58:  CLRWDT
0D5A:  MOVLW  13
0D5C:  MOVWF  00
0D5E:  DECFSZ 00,F
0D60:  BRA    0D5E
0D62:  NOP   
....................  
....................   output_high(DA2_CLK); 
0D64:  BSF    F89.3
....................   delay_us(15); 
0D66:  CLRWDT
0D68:  MOVLW  13
0D6A:  MOVWF  00
0D6C:  DECFSZ 00,F
0D6E:  BRA    0D6C
0D70:  NOP   
....................   output_low(DA2_CLK); 
0D72:  BCF    F89.3
....................   delay_us(15); 
0D74:  CLRWDT
0D76:  MOVLW  13
0D78:  MOVWF  00
0D7A:  DECFSZ 00,F
0D7C:  BRA    0D7A
0D7E:  NOP   
....................  
....................   output_high(DA2_CLK); 
0D80:  BSF    F89.3
....................   delay_us(15); 
0D82:  CLRWDT
0D84:  MOVLW  13
0D86:  MOVWF  00
0D88:  DECFSZ 00,F
0D8A:  BRA    0D88
0D8C:  NOP   
....................   output_low(DA2_CLK); 
0D8E:  BCF    F89.3
....................   delay_us(15); 
0D90:  CLRWDT
0D92:  MOVLW  13
0D94:  MOVWF  00
0D96:  DECFSZ 00,F
0D98:  BRA    0D96
0D9A:  NOP   
....................  
....................  
....................   output_high(DA2_CLK); 
0D9C:  BSF    F89.3
....................   if (level & 0x0200) 
0D9E:  ANDLW  00
0DA0:  MOVWF  00
0DA2:  MOVF   x1F,W
0DA4:  ANDLW  02
0DA6:  MOVWF  03
0DA8:  MOVF   00,W
0DAA:  IORWF  03,W
0DAC:  BZ    0DB2
....................     output_high(DA2_DAT); 
0DAE:  BSF    F89.4
0DB0:  BRA    0DB4
....................   else 
....................     output_low(DA2_DAT); 
0DB2:  BCF    F89.4
....................   delay_us(15); 
0DB4:  CLRWDT
0DB6:  MOVLW  13
0DB8:  MOVWF  00
0DBA:  DECFSZ 00,F
0DBC:  BRA    0DBA
0DBE:  NOP   
....................   output_low(DA2_CLK); 
0DC0:  BCF    F89.3
....................   delay_us(15); 
0DC2:  CLRWDT
0DC4:  MOVLW  13
0DC6:  MOVWF  00
0DC8:  DECFSZ 00,F
0DCA:  BRA    0DC8
0DCC:  NOP   
....................  
....................   output_high(DA2_CLK); 
0DCE:  BSF    F89.3
....................   if (level & 0x0100) 
0DD0:  ANDLW  00
0DD2:  MOVWF  00
0DD4:  MOVF   x1F,W
0DD6:  ANDLW  01
0DD8:  MOVWF  03
0DDA:  MOVF   00,W
0DDC:  IORWF  03,W
0DDE:  BZ    0DE4
....................     output_high(DA2_DAT); 
0DE0:  BSF    F89.4
0DE2:  BRA    0DE6
....................   else 
....................     output_low(DA2_DAT); 
0DE4:  BCF    F89.4
....................   delay_us(15); 
0DE6:  CLRWDT
0DE8:  MOVLW  13
0DEA:  MOVWF  00
0DEC:  DECFSZ 00,F
0DEE:  BRA    0DEC
0DF0:  NOP   
....................   output_low(DA2_CLK); 
0DF2:  BCF    F89.3
....................   delay_us(15); 
0DF4:  CLRWDT
0DF6:  MOVLW  13
0DF8:  MOVWF  00
0DFA:  DECFSZ 00,F
0DFC:  BRA    0DFA
0DFE:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E00:  BSF    F89.3
....................   if (level & 0x0080) 
0E02:  MOVF   x1E,W
0E04:  ANDLW  80
0E06:  MOVWF  00
0E08:  CLRF   03
0E0A:  MOVF   00,W
0E0C:  IORWF  03,W
0E0E:  BZ    0E14
....................     output_high(DA2_DAT); 
0E10:  BSF    F89.4
0E12:  BRA    0E16
....................   else 
....................     output_low(DA2_DAT); 
0E14:  BCF    F89.4
....................   delay_us(15); 
0E16:  CLRWDT
0E18:  MOVLW  13
0E1A:  MOVWF  00
0E1C:  DECFSZ 00,F
0E1E:  BRA    0E1C
0E20:  NOP   
....................   output_low(DA2_CLK); 
0E22:  BCF    F89.3
....................   delay_us(15); 
0E24:  CLRWDT
0E26:  MOVLW  13
0E28:  MOVWF  00
0E2A:  DECFSZ 00,F
0E2C:  BRA    0E2A
0E2E:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E30:  BSF    F89.3
....................   if (level & 0x0040) 
0E32:  MOVF   x1E,W
0E34:  ANDLW  40
0E36:  MOVWF  00
0E38:  CLRF   03
0E3A:  MOVF   00,W
0E3C:  IORWF  03,W
0E3E:  BZ    0E44
....................     output_high(DA2_DAT); 
0E40:  BSF    F89.4
0E42:  BRA    0E46
....................   else 
....................     output_low(DA2_DAT); 
0E44:  BCF    F89.4
....................   delay_us(15); 
0E46:  CLRWDT
0E48:  MOVLW  13
0E4A:  MOVWF  00
0E4C:  DECFSZ 00,F
0E4E:  BRA    0E4C
0E50:  NOP   
....................   output_low(DA2_CLK); 
0E52:  BCF    F89.3
....................   delay_us(15); 
0E54:  CLRWDT
0E56:  MOVLW  13
0E58:  MOVWF  00
0E5A:  DECFSZ 00,F
0E5C:  BRA    0E5A
0E5E:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E60:  BSF    F89.3
....................   if (level & 0x0020) 
0E62:  MOVF   x1E,W
0E64:  ANDLW  20
0E66:  MOVWF  00
0E68:  CLRF   03
0E6A:  MOVF   00,W
0E6C:  IORWF  03,W
0E6E:  BZ    0E74
....................     output_high(DA2_DAT); 
0E70:  BSF    F89.4
0E72:  BRA    0E76
....................   else 
....................     output_low(DA2_DAT); 
0E74:  BCF    F89.4
....................   delay_us(15); 
0E76:  CLRWDT
0E78:  MOVLW  13
0E7A:  MOVWF  00
0E7C:  DECFSZ 00,F
0E7E:  BRA    0E7C
0E80:  NOP   
....................   output_low(DA2_CLK); 
0E82:  BCF    F89.3
....................   delay_us(15); 
0E84:  CLRWDT
0E86:  MOVLW  13
0E88:  MOVWF  00
0E8A:  DECFSZ 00,F
0E8C:  BRA    0E8A
0E8E:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E90:  BSF    F89.3
....................   if (level & 0x0010) 
0E92:  MOVF   x1E,W
0E94:  ANDLW  10
0E96:  MOVWF  00
0E98:  CLRF   03
0E9A:  MOVF   00,W
0E9C:  IORWF  03,W
0E9E:  BZ    0EA4
....................     output_high(DA2_DAT); 
0EA0:  BSF    F89.4
0EA2:  BRA    0EA6
....................   else 
....................     output_low(DA2_DAT); 
0EA4:  BCF    F89.4
....................   delay_us(15); 
0EA6:  CLRWDT
0EA8:  MOVLW  13
0EAA:  MOVWF  00
0EAC:  DECFSZ 00,F
0EAE:  BRA    0EAC
0EB0:  NOP   
....................   output_low(DA2_CLK); 
0EB2:  BCF    F89.3
....................   delay_us(15); 
0EB4:  CLRWDT
0EB6:  MOVLW  13
0EB8:  MOVWF  00
0EBA:  DECFSZ 00,F
0EBC:  BRA    0EBA
0EBE:  NOP   
....................  
....................   output_high(DA2_CLK); 
0EC0:  BSF    F89.3
....................   if (level & 0x0008) 
0EC2:  MOVF   x1E,W
0EC4:  ANDLW  08
0EC6:  MOVWF  00
0EC8:  CLRF   03
0ECA:  MOVF   00,W
0ECC:  IORWF  03,W
0ECE:  BZ    0ED4
....................     output_high(DA2_DAT); 
0ED0:  BSF    F89.4
0ED2:  BRA    0ED6
....................   else 
....................     output_low(DA2_DAT); 
0ED4:  BCF    F89.4
....................   delay_us(15); 
0ED6:  CLRWDT
0ED8:  MOVLW  13
0EDA:  MOVWF  00
0EDC:  DECFSZ 00,F
0EDE:  BRA    0EDC
0EE0:  NOP   
....................   output_low(DA2_CLK); 
0EE2:  BCF    F89.3
....................   delay_us(15); 
0EE4:  CLRWDT
0EE6:  MOVLW  13
0EE8:  MOVWF  00
0EEA:  DECFSZ 00,F
0EEC:  BRA    0EEA
0EEE:  NOP   
....................  
....................   output_high(DA2_CLK); 
0EF0:  BSF    F89.3
....................   if (level & 0x0004) 
0EF2:  MOVF   x1E,W
0EF4:  ANDLW  04
0EF6:  MOVWF  00
0EF8:  CLRF   03
0EFA:  MOVF   00,W
0EFC:  IORWF  03,W
0EFE:  BZ    0F04
....................     output_high(DA2_DAT); 
0F00:  BSF    F89.4
0F02:  BRA    0F06
....................   else 
....................     output_low(DA2_DAT); 
0F04:  BCF    F89.4
....................   delay_us(15); 
0F06:  CLRWDT
0F08:  MOVLW  13
0F0A:  MOVWF  00
0F0C:  DECFSZ 00,F
0F0E:  BRA    0F0C
0F10:  NOP   
....................   output_low(DA2_CLK); 
0F12:  BCF    F89.3
....................   delay_us(15); 
0F14:  CLRWDT
0F16:  MOVLW  13
0F18:  MOVWF  00
0F1A:  DECFSZ 00,F
0F1C:  BRA    0F1A
0F1E:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F20:  BSF    F89.3
....................   if (level & 0x0002) 
0F22:  MOVF   x1E,W
0F24:  ANDLW  02
0F26:  MOVWF  00
0F28:  CLRF   03
0F2A:  MOVF   00,W
0F2C:  IORWF  03,W
0F2E:  BZ    0F34
....................     output_high(DA2_DAT); 
0F30:  BSF    F89.4
0F32:  BRA    0F36
....................   else 
....................     output_low(DA2_DAT); 
0F34:  BCF    F89.4
....................   delay_us(15); 
0F36:  CLRWDT
0F38:  MOVLW  13
0F3A:  MOVWF  00
0F3C:  DECFSZ 00,F
0F3E:  BRA    0F3C
0F40:  NOP   
....................   output_low(DA2_CLK); 
0F42:  BCF    F89.3
....................   delay_us(15); 
0F44:  CLRWDT
0F46:  MOVLW  13
0F48:  MOVWF  00
0F4A:  DECFSZ 00,F
0F4C:  BRA    0F4A
0F4E:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F50:  BSF    F89.3
....................   if (level & 0x0001) 
0F52:  MOVF   x1E,W
0F54:  ANDLW  01
0F56:  MOVWF  00
0F58:  CLRF   03
0F5A:  MOVF   00,W
0F5C:  IORWF  03,W
0F5E:  BZ    0F64
....................     output_high(DA2_DAT); 
0F60:  BSF    F89.4
0F62:  BRA    0F66
....................   else 
....................     output_low(DA2_DAT); 
0F64:  BCF    F89.4
....................   delay_us(15); 
0F66:  CLRWDT
0F68:  MOVLW  13
0F6A:  MOVWF  00
0F6C:  DECFSZ 00,F
0F6E:  BRA    0F6C
0F70:  NOP   
....................   output_low(DA2_CLK); 
0F72:  BCF    F89.3
....................   delay_us(15); 
0F74:  CLRWDT
0F76:  MOVLW  13
0F78:  MOVWF  00
0F7A:  DECFSZ 00,F
0F7C:  BRA    0F7A
0F7E:  NOP   
....................  
....................  
....................   output_high(DA2_CLK); 
0F80:  BSF    F89.3
....................   delay_us(15); 
0F82:  CLRWDT
0F84:  MOVLW  13
0F86:  MOVWF  00
0F88:  DECFSZ 00,F
0F8A:  BRA    0F88
0F8C:  NOP   
....................   output_low(DA2_CLK); 
0F8E:  BCF    F89.3
....................   delay_us(15); 
0F90:  CLRWDT
0F92:  MOVLW  13
0F94:  MOVWF  00
0F96:  DECFSZ 00,F
0F98:  BRA    0F96
0F9A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F9C:  BSF    F89.3
....................   delay_us(15); 
0F9E:  CLRWDT
0FA0:  MOVLW  13
0FA2:  MOVWF  00
0FA4:  DECFSZ 00,F
0FA6:  BRA    0FA4
0FA8:  NOP   
....................   output_low(DA2_CLK); 
0FAA:  BCF    F89.3
....................   delay_us(15); 
0FAC:  CLRWDT
0FAE:  MOVLW  13
0FB0:  MOVWF  00
0FB2:  DECFSZ 00,F
0FB4:  BRA    0FB2
0FB6:  NOP   
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_us(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_us(16); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
0FB8:  BSF    F89.2
....................   delay_us(15); 
0FBA:  CLRWDT
0FBC:  MOVLW  13
0FBE:  MOVWF  00
0FC0:  DECFSZ 00,F
0FC2:  BRA    0FC0
0FC4:  NOP   
....................   output_low(DA2_LAT); 
0FC6:  BCF    F89.1
....................   delay_us(15); 
0FC8:  CLRWDT
0FCA:  MOVLW  13
0FCC:  MOVWF  00
0FCE:  DECFSZ 00,F
0FD0:  BRA    0FCE
0FD2:  NOP   
....................   output_high(DA2_LAT); 
0FD4:  BSF    F89.1
....................   delay_us(15); 
0FD6:  CLRWDT
0FD8:  MOVLW  13
0FDA:  MOVWF  00
0FDC:  DECFSZ 00,F
0FDE:  BRA    0FDC
0FE0:  NOP   
0FE2:  MOVLB  0
0FE4:  RETURN 0
....................   } 
....................  
.................... #include "ADF4350.c" 
.................... //--------- ADF4350 handling functions ---------------------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
071C:  MOVLW  08
071E:  MOVLB  1
0720:  MOVWF  x7E
0722:  MOVF   x7E,F
0724:  BZ    0762
....................     { 
....................     if (data & 0X80) 
0726:  BTFSS  x7D.7
0728:  BRA    072E
....................       output_high(PLL_DAT); 
072A:  BSF    F8B.3
072C:  BRA    0730
....................     else 
....................       output_low(PLL_DAT); 
072E:  BCF    F8B.3
....................     delay_us(10); 
0730:  CLRWDT
0732:  MOVLW  0C
0734:  MOVWF  00
0736:  DECFSZ 00,F
0738:  BRA    0736
073A:  BRA    073C
....................     output_high(PLL_CLK); 
073C:  BSF    F8B.2
....................     delay_us(10); 
073E:  CLRWDT
0740:  MOVLW  0C
0742:  MOVWF  00
0744:  DECFSZ 00,F
0746:  BRA    0744
0748:  BRA    074A
....................     output_low(PLL_CLK); 
074A:  BCF    F8B.2
....................  
....................     delay_us(25); 
074C:  CLRWDT
074E:  MOVLW  20
0750:  MOVWF  00
0752:  DECFSZ 00,F
0754:  BRA    0752
0756:  BRA    0758
0758:  MOVF   x7E,W
075A:  DECF   x7E,F
075C:  BCF    FD8.0
075E:  RLCF   x7D,F
0760:  BRA    0722
....................     } 
....................   output_low(PLL_DAT); 
0762:  BCF    F8B.3
....................   output_low(PLL_CLK); 
0764:  BCF    F8B.2
0766:  MOVLB  0
0768:  RETURN 0
....................   } 
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
076A:  CLRWDT
....................   disable_interrupts(GLOBAL); 
076C:  BCF    FF2.6
076E:  BCF    FF2.7
0770:  BTFSC  FF2.7
0772:  BRA    076E
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
0774:  MOVFF  17B,17C
0778:  MOVFF  17B,17D
077C:  RCALL  071C
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
077E:  MOVFF  17A,17C
0782:  MOVFF  17A,17D
0786:  RCALL  071C
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
0788:  MOVFF  179,17C
078C:  MOVFF  179,17D
0790:  RCALL  071C
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
0792:  MOVFF  178,17C
0796:  MOVFF  178,17D
079A:  RCALL  071C
....................   delay_us(40); 
079C:  CLRWDT
079E:  MOVLW  34
07A0:  MOVWF  00
07A2:  DECFSZ 00,F
07A4:  BRA    07A2
07A6:  BRA    07A8
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
07A8:  BSF    F8B.1
....................   delay_us(5); 
07AA:  CLRWDT
07AC:  MOVLW  05
07AE:  MOVWF  00
07B0:  DECFSZ 00,F
07B2:  BRA    07B0
07B4:  BRA    07B6
07B6:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
07B8:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
07BA:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
07BC:  MOVLW  C0
07BE:  IORWF  FF2,F
....................   restart_wdt(); 
07C0:  CLRWDT
07C2:  RETURN 0
....................   } 
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................    
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
07F4:  MOVLB  1
07F6:  CLRF   x20
07F8:  MOVLW  05
07FA:  MOVWF  x1F
07FC:  MOVF   x20,W
07FE:  SUBLW  05
0800:  BNC   086E
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
0802:  MOVF   x1F,W
0804:  MULLW  04
0806:  MOVF   FF3,W
0808:  CLRF   03
080A:  MOVFF  FF2,121
080E:  BCF    FF2.7
0810:  MOVLB  0
0812:  RCALL  00D2
0814:  TBLRD*+
0816:  MOVFF  FF5,01
081A:  TBLRD*+
081C:  MOVFF  FF5,02
0820:  TBLRD*+
0822:  MOVFF  FF5,03
0826:  MOVLB  1
0828:  BTFSC  x21.7
082A:  BSF    FF2.7
082C:  MOVFF  03,11E
0830:  MOVFF  02,11D
0834:  MOVFF  01,11C
0838:  MOVWF  x1B
....................     prog |= (ULONG)idx; 
083A:  CLRF   01
083C:  CLRF   02
083E:  CLRF   03
0840:  MOVF   x1F,W
0842:  IORWF  x1B,F
0844:  MOVF   01,W
0846:  IORWF  x1C,F
0848:  MOVF   02,W
084A:  IORWF  x1D,F
084C:  MOVF   03,W
084E:  IORWF  x1E,F
....................     PLL_send_word(prog); 
0850:  MOVFF  11E,17B
0854:  MOVFF  11D,17A
0858:  MOVFF  11C,179
085C:  MOVFF  11B,178
0860:  MOVLB  0
0862:  RCALL  076A
0864:  MOVLB  1
0866:  MOVF   x20,W
0868:  INCF   x20,F
086A:  DECF   x1F,F
086C:  BRA    07FC
....................     } 
....................   delay_ms(200); 
086E:  MOVLW  C8
0870:  MOVWF  x21
0872:  MOVLB  0
0874:  RCALL  07C4
....................   PLL_send_word(prog); 
0876:  MOVFF  11E,17B
087A:  MOVFF  11D,17A
087E:  MOVFF  11C,179
0882:  MOVFF  11B,178
0886:  RCALL  076A
....................   delay_ms(200); 
0888:  MOVLW  C8
088A:  MOVLB  1
088C:  MOVWF  x21
088E:  MOVLB  0
0890:  RCALL  07C4
0892:  GOTO   31CA (RETURN)
....................   } 
....................  
.................... //--------- frequency computation functions ----------------------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
*
09A8:  MOVLB  1
09AA:  CLRF   x83
09AC:  CLRF   x82
09AE:  CLRF   x81
09B0:  MOVLW  01
09B2:  MOVWF  x80
....................   { 
....................   ULONG Fvco, D, RFdiv = 1; 
....................   restart_wdt(); 
09B4:  CLRWDT
....................   D = Frequest-4800; 
09B6:  MOVLW  C0
09B8:  SUBWF  x76,W
09BA:  MOVWF  x7C
09BC:  MOVLW  12
09BE:  SUBWFB x77,W
09C0:  MOVWF  x7D
09C2:  CLRF   x7E
09C4:  CLRF   x7F
.................... D/=2; 
09C6:  BCF    FD8.0
09C8:  RRCF   x7F,F
09CA:  RRCF   x7E,F
09CC:  RRCF   x7D,F
09CE:  RRCF   x7C,F
....................   PLL_RFdiv = 0x0085003CL; 
09D0:  MOVLB  0
09D2:  CLRF   xFB
09D4:  MOVLW  85
09D6:  MOVWF  xFA
09D8:  CLRF   xF9
09DA:  MOVLW  3C
09DC:  MOVWF  xF8
....................  // if (Frequest >= 22000) 
....................  //   { 
....................  //   RFdiv = 1; 
....................  //   PLL_RFdiv = 0x0085003CL; 
....................  //   } 
....................   restart_wdt(); 
09DE:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
09E0:  MOVFF  17F,18B
09E4:  MOVFF  17E,18A
09E8:  MOVFF  17D,189
09EC:  MOVFF  17C,188
09F0:  MOVFF  183,18F
09F4:  MOVFF  182,18E
09F8:  MOVFF  181,18D
09FC:  MOVFF  180,18C
0A00:  RCALL  08BA
0A02:  MOVFF  03,187
0A06:  MOVFF  02,186
0A0A:  MOVFF  01,185
0A0E:  MOVFF  00,184
0A12:  MOVFF  03,18B
0A16:  MOVFF  02,18A
0A1A:  MOVFF  01,189
0A1E:  MOVFF  00,188
0A22:  MOVLB  1
0A24:  CLRF   x8F
0A26:  CLRF   x8E
0A28:  CLRF   x8D
0A2A:  MOVLW  64
0A2C:  MOVWF  x8C
0A2E:  MOVLB  0
0A30:  RCALL  08BA
0A32:  MOVFF  03,17F
0A36:  MOVFF  02,17E
0A3A:  MOVFF  01,17D
0A3E:  MOVFF  00,17C
....................   restart_wdt(); 
0A42:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
0A44:  BCF    FD8.1
0A46:  MOVFF  17F,1CC
0A4A:  MOVFF  17E,1CB
0A4E:  MOVFF  17D,1CA
0A52:  MOVFF  17C,1C9
0A56:  MOVLB  1
0A58:  CLRF   xD0
0A5A:  CLRF   xCF
0A5C:  MOVLW  27
0A5E:  MOVWF  xCE
0A60:  MOVLW  10
0A62:  MOVWF  xCD
0A64:  MOVLB  0
0A66:  RCALL  0914
0A68:  MOVFF  03,EB
0A6C:  MOVFF  02,EA
0A70:  MOVFF  01,E9
0A74:  MOVFF  00,E8
....................   restart_wdt(); 
0A78:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
0A7A:  MOVFF  EB,18B
0A7E:  MOVFF  EA,18A
0A82:  MOVFF  E9,189
0A86:  MOVFF  E8,188
0A8A:  MOVLB  1
0A8C:  CLRF   x8F
0A8E:  CLRF   x8E
0A90:  MOVLW  27
0A92:  MOVWF  x8D
0A94:  MOVLW  10
0A96:  MOVWF  x8C
0A98:  MOVLB  0
0A9A:  RCALL  08BA
0A9C:  MOVF   00,W
0A9E:  MOVLB  1
0AA0:  SUBWF  x7C,W
0AA2:  MOVWF  x84
0AA4:  MOVF   01,W
0AA6:  SUBWFB x7D,W
0AA8:  MOVWF  x85
0AAA:  MOVF   02,W
0AAC:  SUBWFB x7E,W
0AAE:  MOVWF  x86
0AB0:  MOVF   03,W
0AB2:  SUBWFB x7F,W
0AB4:  MOVWF  x87
0AB6:  CLRF   x8B
0AB8:  CLRF   x8A
0ABA:  CLRF   x89
0ABC:  MOVLW  64
0ABE:  MOVWF  x88
0AC0:  MOVFF  183,18F
0AC4:  MOVFF  182,18E
0AC8:  MOVFF  181,18D
0ACC:  MOVFF  180,18C
0AD0:  MOVLB  0
0AD2:  RCALL  08BA
0AD4:  MOVFF  03,18B
0AD8:  MOVFF  02,18A
0ADC:  MOVFF  01,189
0AE0:  MOVFF  00,188
0AE4:  BCF    FD8.1
0AE6:  MOVFF  187,1CC
0AEA:  MOVFF  186,1CB
0AEE:  MOVFF  185,1CA
0AF2:  MOVFF  184,1C9
0AF6:  MOVFF  03,1D0
0AFA:  MOVFF  02,1CF
0AFE:  MOVFF  01,1CE
0B02:  MOVFF  00,1CD
0B06:  RCALL  0914
0B08:  MOVFF  03,EF
0B0C:  MOVFF  02,EE
0B10:  MOVFF  01,ED
0B14:  MOVFF  00,EC
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
0B18:  MOVLW  08
0B1A:  MOVWF  xF3
0B1C:  CLRF   xF2
0B1E:  MOVLW  03
0B20:  MOVWF  xF1
0B22:  MOVLW  21
0B24:  MOVWF  xF0
....................   restart_wdt(); 
0B26:  CLRWDT
....................   Fvco++; 
0B28:  MOVLW  01
0B2A:  MOVLB  1
0B2C:  ADDWF  x78,F
0B2E:  BTFSC  FD8.0
0B30:  INCF   x79,F
0B32:  BTFSC  FD8.2
0B34:  INCF   x7A,F
0B36:  BTFSC  FD8.2
0B38:  INCF   x7B,F
0B3A:  MOVLB  0
0B3C:  RETURN 0
....................   } 
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
0B3E:  MOVLB  1
0B40:  CLRF   x79
0B42:  MOVLB  0
0B44:  RLCF   xE8,W
0B46:  MOVLB  1
0B48:  MOVWF  x7A
0B4A:  MOVLB  0
0B4C:  RLCF   xE9,W
0B4E:  MOVLB  1
0B50:  MOVWF  x7B
0B52:  MOVLB  0
0B54:  RLCF   xEA,W
0B56:  MOVLB  1
0B58:  MOVWF  x7C
0B5A:  RLCF   x7A,F
0B5C:  RLCF   x7B,F
0B5E:  RLCF   x7C,F
0B60:  RLCF   x7A,F
0B62:  RLCF   x7B,F
0B64:  RLCF   x7C,F
0B66:  RLCF   x7A,F
0B68:  RLCF   x7B,F
0B6A:  RLCF   x7C,F
0B6C:  RLCF   x7A,F
0B6E:  RLCF   x7B,F
0B70:  RLCF   x7C,F
0B72:  RLCF   x7A,F
0B74:  RLCF   x7B,F
0B76:  RLCF   x7C,F
0B78:  RLCF   x7A,F
0B7A:  RLCF   x7B,F
0B7C:  RLCF   x7C,F
0B7E:  MOVLW  80
0B80:  ANDWF  x7A,F
0B82:  MOVLB  0
0B84:  RLCF   xEC,W
0B86:  MOVWF  00
0B88:  RLCF   xED,W
0B8A:  MOVWF  01
0B8C:  RLCF   xEE,W
0B8E:  MOVWF  02
0B90:  RLCF   xEF,W
0B92:  MOVWF  03
0B94:  RLCF   00,F
0B96:  RLCF   01,F
0B98:  RLCF   02,F
0B9A:  RLCF   03,F
0B9C:  RLCF   00,F
0B9E:  RLCF   01,F
0BA0:  RLCF   02,F
0BA2:  RLCF   03,F
0BA4:  MOVLW  F8
0BA6:  ANDWF  00,F
0BA8:  MOVF   00,W
0BAA:  MOVLB  1
0BAC:  ADDWF  x79,W
0BAE:  MOVWF  x74
0BB0:  MOVF   01,W
0BB2:  ADDWFC x7A,W
0BB4:  MOVWF  x75
0BB6:  MOVF   02,W
0BB8:  ADDWFC x7B,W
0BBA:  MOVWF  x76
0BBC:  MOVF   03,W
0BBE:  ADDWFC x7C,W
0BC0:  MOVWF  x77
....................   PLL_frequency = prog; 
0BC2:  MOVFF  177,F7
0BC6:  MOVFF  176,F6
0BCA:  MOVFF  175,F5
0BCE:  MOVFF  174,F4
....................   restart_wdt(); 
0BD2:  CLRWDT
....................   PLL_send_word(prog); 
0BD4:  MOVFF  177,17B
0BD8:  MOVFF  176,17A
0BDC:  MOVFF  175,179
0BE0:  MOVFF  174,178
0BE4:  MOVLB  0
0BE6:  RCALL  076A
....................   delay_us(20); 
0BE8:  CLRWDT
0BEA:  MOVLW  19
0BEC:  MOVWF  00
0BEE:  DECFSZ 00,F
0BF0:  BRA    0BEE
0BF2:  BRA    0BF4
0BF4:  NOP   
....................   restart_wdt(); 
0BF6:  CLRWDT
....................   PLL_send_word(PLL_mod); 
0BF8:  MOVFF  F3,17B
0BFC:  MOVFF  F2,17A
0C00:  MOVFF  F1,179
0C04:  MOVFF  F0,178
0C08:  RCALL  076A
....................   delay_us(20); 
0C0A:  CLRWDT
0C0C:  MOVLW  19
0C0E:  MOVWF  00
0C10:  DECFSZ 00,F
0C12:  BRA    0C10
0C14:  BRA    0C16
0C16:  NOP   
....................   restart_wdt(); 
0C18:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
0C1A:  MOVFF  FB,17B
0C1E:  MOVFF  FA,17A
0C22:  MOVFF  F9,179
0C26:  MOVFF  F8,178
0C2A:  RCALL  076A
0C2C:  RETURN 0
....................  
....................   } 
....................  
.................... void PLL_mute(void) 
.................... { 
....................   ULONG prog; 
....................     
....................     prog = 0x0095001CL;			//register 4 MTLD is '1' to mute the PLL 
*
1638:  MOVLB  1
163A:  CLRF   x75
163C:  MOVLW  95
163E:  MOVWF  x74
1640:  CLRF   x73
1642:  MOVLW  1C
1644:  MOVWF  x72
....................     PLL_send_word(prog); 
1646:  MOVFF  175,17B
164A:  MOVFF  174,17A
164E:  MOVFF  173,179
1652:  MOVFF  172,178
1656:  MOVLB  0
1658:  CALL   076A
165C:  GOTO   27E4 (RETURN)
.................... } 
....................  
.................... /* 
.................... void PLL_unmute(void) 
.................... { 
.................... //  ULONG prog; 
....................     
.................... //    prog = 0x0095003CL;			//register 4 MTLD is '1' to mute the PLL 
.................... //    PLL_send_word(prog); 
.................... 	  ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
....................   PLL_frequency = prog; 
....................   restart_wdt(); 
....................   PLL_send_word(prog); 
....................   delay_us(20); 
....................   restart_wdt(); 
....................   PLL_send_word(PLL_mod); 
....................   delay_us(20); 
....................   restart_wdt(); 
....................   PLL_send_word(PLL_RFdiv); 
....................  
.................... } 
.................... */ 
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(250); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1533RX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0436:  BCF    F7E.0
0438:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
043C:  SETF   1A
....................   TMR_1mS_Count++; 
043E:  INCF   1B,F
....................   if (++TMR_1mS_Cnt >= 10) 
0440:  INCF   1C,F
0442:  MOVF   1C,W
0444:  SUBLW  09
0446:  BC    0466
....................     { 
....................     TMR_1mS_Cnt = 0; 
0448:  CLRF   1C
....................     TMR_10mS_Count++; 
044A:  INCF   1D,F
....................     TMR_10mS_Flags = 0xFF; 
044C:  SETF   1E
....................     if (++TMR_10mS_Cnt >= 10) 
044E:  INCF   1F,F
0450:  MOVF   1F,W
0452:  SUBLW  09
0454:  BC    0466
....................       { 
....................       TMR_10mS_Cnt = 0; 
0456:  CLRF   1F
....................       TMR_100mS_Flags = 0xFF; 
0458:  SETF   20
....................       if (++TMR_100mS_Cnt >= 10) 
045A:  INCF   21,F
045C:  MOVF   21,W
045E:  SUBLW  09
0460:  BC    0466
....................         { 
....................         TMR_100mS_Cnt = 0; 
0462:  CLRF   21
....................         TMR_1sec_Flags = 0xFF; 
0464:  SETF   22
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0466:  BCF    F9E.1
0468:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
046C:  BCF    FF2.1
046E:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0472:  BCF    FF0.0
0474:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0478:  MOVFF  FAE,1D6
....................   COM1_rbuf[COM1_rxi] = x; 
047C:  CLRF   03
047E:  MOVF   31,W
0480:  ADDLW  33
0482:  MOVWF  FE9
0484:  MOVLW  00
0486:  ADDWFC 03,W
0488:  MOVWF  FEA
048A:  MOVFF  1D6,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
048E:  INCF   31,F
0490:  MOVF   31,W
0492:  SUBLW  1F
0494:  BC    0498
....................     COM1_rxi = 0; 
0496:  CLRF   31
....................   if (COM1_rcnt < COM1_RX_LEN) 
0498:  MOVF   30,W
049A:  SUBLW  1F
049C:  BNC   04A0
....................     COM1_rcnt++; 
049E:  INCF   30,F
....................   } 
....................  
04A0:  BCF    F9E.5
04A2:  GOTO   0090
.................... #int_RDA2 
.................... void  RDA2_isr(void) 
....................   { 
....................   if(RCREG2 > 0) 
04A6:  MOVF   F74,F
04A8:  BZ    04B0
....................     pass_count = RCREG2;   
04AA:  CLRF   2F
04AC:  MOVFF  F74,2E
....................   } 
....................  
04B0:  BCF    FA4.5
04B2:  GOTO   0090
.................... #include "BA1533RX_serial.c" 
....................  
.................... UCHAR comm_ptr;  
.................... UCHAR  pwr_command = 1, pa_command = setup.power_amp, on_command = 1, bit_mode = 0, auto_power = 0; 
....................  
.................... int16 count_1sec = 0; 
.................... int16 temp; 
.................... char temp2; 
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
11F0:  CLRF   03
11F2:  MOVF   32,W
11F4:  ADDLW  33
11F6:  MOVWF  FE9
11F8:  MOVLW  00
11FA:  ADDWFC 03,W
11FC:  MOVWF  FEA
11FE:  MOVFF  FEF,13D
....................   if (++COM1_rxo >= COM1_RX_LEN) 
1202:  INCF   32,F
1204:  MOVF   32,W
1206:  SUBLW  1F
1208:  BC    120C
....................     COM1_rxo = 0; 
120A:  CLRF   32
....................   if (COM1_rcnt) 
120C:  MOVF   30,F
120E:  BZ    1212
....................     COM1_rcnt--; 
1210:  DECF   30,F
....................   return x; 
1212:  MOVLB  1
1214:  MOVFF  13D,01
1218:  MOVLB  0
121A:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
0C88:  BCF    F9D.5
....................   pos = 0; 
0C8A:  MOVLB  1
0C8C:  CLRF   xC6
....................   while (*str) 
0C8E:  MOVFF  1C4,03
0C92:  MOVFF  1C3,FE9
0C96:  MOVFF  1C4,FEA
0C9A:  MOVF   FEF,F
0C9C:  BZ    0D12
....................     { 
....................     x = *str++; 
0C9E:  MOVFF  1C4,03
0CA2:  MOVF   xC3,W
0CA4:  INCF   xC3,F
0CA6:  BTFSC  FD8.2
0CA8:  INCF   xC4,F
0CAA:  MOVWF  FE9
0CAC:  MOVFF  03,FEA
0CB0:  MOVFF  FEF,1C5
....................     if (x != '\t') 
0CB4:  MOVF   xC5,W
0CB6:  SUBLW  09
0CB8:  BZ    0CDA
....................       { 
....................       TXREG1 = x; 
0CBA:  MOVFF  1C5,FAD
....................       pos++; 
0CBE:  INCF   xC6,F
....................       delay_us(300); 
0CC0:  CLRWDT
0CC2:  MOVLW  0D
0CC4:  MOVWF  xC8
0CC6:  MOVLW  16
0CC8:  MOVWF  xC9
0CCA:  MOVLB  0
0CCC:  RCALL  0C68
0CCE:  MOVLB  1
0CD0:  DECFSZ xC8,F
0CD2:  BRA    0CC6
....................       x = RCREG1; 
0CD4:  MOVFF  FAE,1C5
....................       } 
0CD8:  BRA    0D10
....................     else 
....................       { 
....................       tab_stop = 32; 
0CDA:  MOVLW  20
0CDC:  MOVWF  xC7
....................       if (pos >= tab_stop) 
0CDE:  MOVF   xC7,W
0CE0:  SUBWF  xC6,W
0CE2:  BNC   0CEA
....................         tab_stop = pos + 2; 
0CE4:  MOVLW  02
0CE6:  ADDWF  xC6,W
0CE8:  MOVWF  xC7
....................       while (pos < tab_stop) 
0CEA:  MOVF   xC7,W
0CEC:  SUBWF  xC6,W
0CEE:  BC    0D10
....................         { 
....................         TXREG1 = ' '; 
0CF0:  MOVLW  20
0CF2:  MOVWF  FAD
....................         pos++; 
0CF4:  INCF   xC6,F
....................         delay_us(300); 
0CF6:  CLRWDT
0CF8:  MOVLW  0D
0CFA:  MOVWF  xC8
0CFC:  MOVLW  16
0CFE:  MOVWF  xC9
0D00:  MOVLB  0
0D02:  RCALL  0C68
0D04:  MOVLB  1
0D06:  DECFSZ xC8,F
0D08:  BRA    0CFC
....................         x = RCREG1; 
0D0A:  MOVFF  FAE,1C5
0D0E:  BRA    0CEA
....................         } 
....................       } 
0D10:  BRA    0C8E
....................     } 
....................   x = RCREG1; 
0D12:  MOVFF  FAE,1C5
....................   enable_interrupts(int_RDA); 
0D16:  BSF    F9D.5
0D18:  MOVLB  0
0D1A:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
*
05F6:  CLRF   30
05F8:  MOVFF  30,32
05FC:  MOVFF  32,31
....................   comm_state = COMM_INIT; 
0600:  CLRF   53
....................   enable_interrupts(int_RDA); 
0602:  BSF    F9D.5
0604:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
121C:  MOVF   xFC,W
121E:  INCF   xFC,F
1220:  CLRF   03
1222:  ADDLW  55
1224:  MOVWF  FE9
1226:  MOVLW  00
1228:  ADDWFC 03,W
122A:  MOVWF  FEA
122C:  CLRF   03
122E:  MOVFF  FEF,01
1232:  MOVFF  03,02
1236:  RETURN 0
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
*
1414:  CLRF   03
1416:  MOVF   xFC,W
1418:  ADDLW  55
141A:  MOVWF  FE9
141C:  MOVLW  00
141E:  ADDWFC 03,W
1420:  MOVWF  FEA
1422:  MOVF   FEF,F
1424:  BZ    1452
1426:  CLRF   03
1428:  MOVF   xFC,W
142A:  ADDLW  55
142C:  MOVWF  FE9
142E:  MOVLW  00
1430:  ADDWFC 03,W
1432:  MOVWF  FEA
1434:  MOVF   FEF,W
1436:  SUBLW  2C
1438:  BZ    144E
143A:  CLRF   03
143C:  MOVF   xFC,W
143E:  ADDLW  55
1440:  MOVWF  FE9
1442:  MOVLW  00
1444:  ADDWFC 03,W
1446:  MOVWF  FEA
1448:  MOVF   FEF,W
144A:  SUBLW  20
144C:  BNZ   1452
....................     comm_ptr++; 
144E:  INCF   xFC,F
1450:  BRA    1414
1452:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
....................   skip_spc(); 
1454:  RCALL  1414
....................   return comm_buf[comm_ptr]; 
1456:  CLRF   03
1458:  MOVF   xFC,W
145A:  ADDLW  55
145C:  MOVWF  FE9
145E:  MOVLW  00
1460:  ADDWFC 03,W
1462:  MOVWF  FEA
1464:  CLRF   03
1466:  MOVFF  FEF,01
146A:  MOVFF  03,02
146E:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  
.................... #separate 
.................... SINT get_int(void) 
*
14C4:  MOVLB  1
14C6:  CLRF   x77
14C8:  MOVLW  01
14CA:  MOVWF  x76
....................   { 
....................   SINT num, sign = 1; 
....................   skip_spc(); 
14CC:  MOVLB  0
14CE:  RCALL  1414
....................   if (comm_buf[comm_ptr]) 
14D0:  CLRF   03
14D2:  MOVF   xFC,W
14D4:  ADDLW  55
14D6:  MOVWF  FE9
14D8:  MOVLW  00
14DA:  ADDWFC 03,W
14DC:  MOVWF  FEA
14DE:  MOVF   FEF,F
14E0:  BZ    156A
....................     { 
....................     num = 0; 
14E2:  MOVLB  1
14E4:  CLRF   x75
14E6:  CLRF   x74
....................     if (peek_char() == '-') 
14E8:  MOVLB  0
14EA:  RCALL  1454
14EC:  MOVFF  02,179
14F0:  MOVFF  01,178
14F4:  MOVLB  1
14F6:  MOVF   01,W
14F8:  SUBLW  2D
14FA:  BNZ   150A
14FC:  MOVF   x79,F
14FE:  BNZ   150A
....................       { 
....................       sign = -1; 
1500:  SETF   x77
1502:  SETF   x76
....................       get_char(); 
1504:  MOVLB  0
1506:  RCALL  121C
1508:  MOVLB  1
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
150A:  CLRF   03
150C:  MOVLB  0
150E:  MOVF   xFC,W
1510:  ADDLW  55
1512:  MOVWF  FE9
1514:  MOVLW  00
1516:  ADDWFC 03,W
1518:  MOVWF  FEA
151A:  MOVFF  FEF,178
151E:  MOVLB  1
1520:  MOVF   x78,W
1522:  SUBLW  2F
1524:  BC    1568
1526:  MOVF   x78,W
1528:  SUBLW  39
152A:  BNC   1568
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
152C:  MOVFF  175,179
1530:  MOVFF  174,178
1534:  CLRF   x7B
1536:  MOVLW  0A
1538:  MOVWF  x7A
153A:  MOVLB  0
153C:  RCALL  1470
153E:  MOVFF  02,179
1542:  MOVFF  01,178
1546:  MOVF   xFC,W
1548:  INCF   xFC,F
154A:  CLRF   03
154C:  ADDLW  55
154E:  MOVWF  FE9
1550:  MOVLW  00
1552:  ADDWFC 03,W
1554:  MOVWF  FEA
1556:  MOVLW  30
1558:  SUBWF  FEF,W
155A:  MOVLB  1
155C:  ADDWF  01,W
155E:  MOVWF  x74
1560:  MOVLW  00
1562:  ADDWFC 02,W
1564:  MOVWF  x75
1566:  BRA    150A
1568:  MOVLB  0
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
156A:  MOVFF  175,179
156E:  MOVFF  174,178
1572:  MOVFF  177,17B
1576:  MOVFF  176,17A
157A:  RCALL  1470
157C:  MOVFF  02,03
1580:  MOVFF  02,02
1584:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
....................   if (comm_buf[comm_ptr]) 
....................     { 
....................     num = 0; 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
....................     } 
....................   skip_spc(); 
....................   return num; 
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
....................   if (peek_char()) 
....................     { 
....................     num = 0; 
....................     while (isxdigit(peek_char())) 
....................       { 
....................       chr = get_char(); 
....................       chr = toupper(chr); 
....................       if (chr <= '9') 
....................         chr -= '0'; 
....................       else 
....................         chr = chr - ('A' - 10); 
....................       num = num * 16 + (ULONG)chr; 
....................       } 
....................     } 
....................   return num; 
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int(); 
1586:  RCALL  14C4
1588:  MOVFF  02,173
158C:  MOVFF  01,172
....................   return freq; 
1590:  MOVLB  1
1592:  MOVFF  172,01
1596:  MOVFF  173,02
159A:  MOVLB  0
159C:  GOTO   25EE (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
*
1238:  MOVLW  0D
123A:  MOVLB  1
123C:  MOVWF  x72
123E:  MOVLW  0A
1240:  MOVWF  x73
1242:  CLRF   x74
1244:  MOVLW  01
1246:  MOVWF  xC4
1248:  MOVLW  72
124A:  MOVWF  xC3
124C:  MOVLB  0
124E:  RCALL  0C88
....................   COM1_send_str("$F <frequency><cr>  \tSet frequency in 1MHz increments (i.e.5173 is 5.173GHz)\r\n"); 
1250:  MOVLW  01
1252:  MOVWF  FEA
1254:  MOVLW  72
1256:  MOVWF  FE9
1258:  MOVFF  FF2,1C1
125C:  BCF    FF2.7
125E:  MOVLW  4F
1260:  MOVWF  01
1262:  CLRF   FF7
1264:  MOVLW  00
1266:  CALL   0104
126A:  TBLRD*-
126C:  TBLRD*+
126E:  MOVFF  FF5,FEE
1272:  DECFSZ 01,F
1274:  BRA    126C
1276:  MOVLB  1
1278:  BTFSC  xC1.7
127A:  BSF    FF2.7
127C:  MOVLW  01
127E:  MOVWF  xC4
1280:  MOVLW  72
1282:  MOVWF  xC3
1284:  MOVLB  0
1286:  RCALL  0C88
....................   COM1_send_str("$ON <onoff><cr>  \tSet PLL RF OUT on(1) or off(0)\r\n"); 
1288:  MOVLW  01
128A:  MOVWF  FEA
128C:  MOVLW  72
128E:  MOVWF  FE9
1290:  MOVFF  FF2,1C1
1294:  BCF    FF2.7
1296:  MOVLW  33
1298:  MOVWF  01
129A:  CLRF   FF7
129C:  MOVLW  00
129E:  CALL   016E
12A2:  TBLRD*-
12A4:  TBLRD*+
12A6:  MOVFF  FF5,FEE
12AA:  DECFSZ 01,F
12AC:  BRA    12A4
12AE:  MOVLB  1
12B0:  BTFSC  xC1.7
12B2:  BSF    FF2.7
12B4:  MOVLW  01
12B6:  MOVWF  xC4
12B8:  MOVLW  72
12BA:  MOVWF  xC3
12BC:  MOVLB  0
12BE:  RCALL  0C88
....................   COM1_send_str("$PS <power><cr>  \tSet amp power on(1) or off(0)\r\n"); 
12C0:  MOVLW  01
12C2:  MOVWF  FEA
12C4:  MOVLW  72
12C6:  MOVWF  FE9
12C8:  MOVFF  FF2,1C1
12CC:  BCF    FF2.7
12CE:  MOVLW  32
12D0:  MOVWF  01
12D2:  CLRF   FF7
12D4:  MOVLW  00
12D6:  CALL   01BC
12DA:  TBLRD*-
12DC:  TBLRD*+
12DE:  MOVFF  FF5,FEE
12E2:  DECFSZ 01,F
12E4:  BRA    12DC
12E6:  MOVLB  1
12E8:  BTFSC  xC1.7
12EA:  BSF    FF2.7
12EC:  MOVLW  01
12EE:  MOVWF  xC4
12F0:  MOVLW  72
12F2:  MOVWF  xC3
12F4:  MOVLB  0
12F6:  RCALL  0C88
....................   COM1_send_str("$P <level><cr>  \tSet power level high(1) or low(0)\r\n"); 
12F8:  MOVLW  01
12FA:  MOVWF  FEA
12FC:  MOVLW  72
12FE:  MOVWF  FE9
1300:  MOVFF  FF2,1C1
1304:  BCF    FF2.7
1306:  MOVLW  35
1308:  MOVWF  01
130A:  CLRF   FF7
130C:  MOVLW  00
130E:  CALL   0208
1312:  TBLRD*-
1314:  TBLRD*+
1316:  MOVFF  FF5,FEE
131A:  DECFSZ 01,F
131C:  BRA    1314
131E:  MOVLB  1
1320:  BTFSC  xC1.7
1322:  BSF    FF2.7
1324:  MOVLW  01
1326:  MOVWF  xC4
1328:  MOVLW  72
132A:  MOVWF  xC3
132C:  MOVLB  0
132E:  RCALL  0C88
....................   COM1_send_str("$LD <fwd><cr>  \tSet Fwd power measurement on(1) or off(0)\r\n"); 
1330:  MOVLW  01
1332:  MOVWF  FEA
1334:  MOVLW  72
1336:  MOVWF  FE9
1338:  MOVFF  FF2,1C1
133C:  BCF    FF2.7
133E:  MOVLW  3C
1340:  MOVWF  01
1342:  CLRF   FF7
1344:  MOVLW  00
1346:  CALL   0258
134A:  TBLRD*-
134C:  TBLRD*+
134E:  MOVFF  FF5,FEE
1352:  DECFSZ 01,F
1354:  BRA    134C
1356:  MOVLB  1
1358:  BTFSC  xC1.7
135A:  BSF    FF2.7
135C:  MOVLW  01
135E:  MOVWF  xC4
1360:  MOVLW  72
1362:  MOVWF  xC3
1364:  MOVLB  0
1366:  RCALL  0C88
....................   COM1_send_str("$Q<cr>  \tRequest status\r\n"); 
1368:  MOVLW  01
136A:  MOVWF  FEA
136C:  MOVLW  72
136E:  MOVWF  FE9
1370:  MOVFF  FF2,1C1
1374:  BCF    FF2.7
1376:  MOVLW  1A
1378:  MOVWF  01
137A:  CLRF   FF7
137C:  MOVLW  00
137E:  CALL   02AE
1382:  TBLRD*-
1384:  TBLRD*+
1386:  MOVFF  FF5,FEE
138A:  DECFSZ 01,F
138C:  BRA    1384
138E:  MOVLB  1
1390:  BTFSC  xC1.7
1392:  BSF    FF2.7
1394:  MOVLW  01
1396:  MOVWF  xC4
1398:  MOVLW  72
139A:  MOVWF  xC3
139C:  MOVLB  0
139E:  RCALL  0C88
....................   COM1_send_str("$BM<cr>  \tBIT Mode ON(1) OFF(0)\r\n"); 
13A0:  MOVLW  01
13A2:  MOVWF  FEA
13A4:  MOVLW  72
13A6:  MOVWF  FE9
13A8:  MOVFF  FF2,1C1
13AC:  BCF    FF2.7
13AE:  MOVLW  22
13B0:  MOVWF  01
13B2:  CLRF   FF7
13B4:  MOVLW  00
13B6:  CALL   02E2
13BA:  TBLRD*-
13BC:  TBLRD*+
13BE:  MOVFF  FF5,FEE
13C2:  DECFSZ 01,F
13C4:  BRA    13BC
13C6:  MOVLB  1
13C8:  BTFSC  xC1.7
13CA:  BSF    FF2.7
13CC:  MOVLW  01
13CE:  MOVWF  xC4
13D0:  MOVLW  72
13D2:  MOVWF  xC3
13D4:  MOVLB  0
13D6:  RCALL  0C88
....................   COM1_send_str("$TR<cr>  \tTRANSIVER(T) RECIVER(R)"); 
13D8:  MOVLW  01
13DA:  MOVWF  FEA
13DC:  MOVLW  72
13DE:  MOVWF  FE9
13E0:  MOVFF  FF2,1C1
13E4:  BCF    FF2.7
13E6:  MOVLW  22
13E8:  MOVWF  01
13EA:  CLRF   FF7
13EC:  MOVLW  00
13EE:  CALL   031E
13F2:  TBLRD*-
13F4:  TBLRD*+
13F6:  MOVFF  FF5,FEE
13FA:  DECFSZ 01,F
13FC:  BRA    13F4
13FE:  MOVLB  1
1400:  BTFSC  xC1.7
1402:  BSF    FF2.7
1404:  MOVLW  01
1406:  MOVWF  xC4
1408:  MOVLW  72
140A:  MOVWF  xC3
140C:  MOVLB  0
140E:  RCALL  0C88
1410:  GOTO   25E2 (RETURN)
....................   //COM1_send_str("\r\n"); 
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void send_status(void) 
....................   { 
....................   UINT  itemp, idx, rssi; 
....................   UCHAR buf[64] ; 
....................   float temp ; 
....................   
.................... //  UINT fwdp, revp, muxout; 
....................  
....................  
....................   set_adc_channel(A2D_PREV); // select RSSI power input 
*
2046:  MOVLW  14
2048:  MOVWF  01
204A:  MOVF   FC2,W
204C:  ANDLW  83
204E:  IORWF  01,W
2050:  MOVWF  FC2
....................   delay_us(20); 
2052:  CLRWDT
2054:  MOVLW  19
2056:  MOVWF  00
2058:  DECFSZ 00,F
205A:  BRA    2058
205C:  BRA    205E
205E:  NOP   
....................   rssi = read_adc(); 
2060:  BSF    FC2.1
2062:  BTFSC  FC2.1
2064:  BRA    2062
2066:  MOVFF  FC4,177
206A:  MOVLB  1
206C:  MOVFF  FC3,176
....................  
....................   set_adc_channel(A2D_TEMP); // select tmp power input 
2070:  MOVLW  18
2072:  MOVWF  01
2074:  MOVF   FC2,W
2076:  ANDLW  83
2078:  IORWF  01,W
207A:  MOVWF  FC2
....................   delay_us(20); 
207C:  CLRWDT
207E:  MOVLW  19
2080:  MOVWF  00
2082:  DECFSZ 00,F
2084:  BRA    2082
2086:  BRA    2088
2088:  NOP   
....................   itemp = read_adc(); 
208A:  BSF    FC2.1
208C:  BTFSC  FC2.1
208E:  BRA    208C
2090:  MOVFF  FC3,172
2094:  MOVFF  FC4,173
....................  
....................   temp = (float)itemp / 1024.0 * 3.3; 
2098:  MOVFF  173,1BD
209C:  MOVFF  172,1BC
20A0:  MOVLB  0
20A2:  GOTO   168E
20A6:  MOVFF  03,1BF
20AA:  MOVFF  02,1BE
20AE:  MOVFF  01,1BD
20B2:  MOVFF  00,1BC
20B6:  MOVFF  03,1C3
20BA:  MOVFF  02,1C2
20BE:  MOVFF  01,1C1
20C2:  MOVFF  00,1C0
20C6:  MOVLB  1
20C8:  CLRF   xC7
20CA:  CLRF   xC6
20CC:  CLRF   xC5
20CE:  MOVLW  89
20D0:  MOVWF  xC4
20D2:  MOVLB  0
20D4:  GOTO   16C6
20D8:  MOVFF  03,1BF
20DC:  MOVFF  02,1BE
20E0:  MOVFF  01,1BD
20E4:  MOVFF  00,1BC
20E8:  MOVFF  03,1CC
20EC:  MOVFF  02,1CB
20F0:  MOVFF  01,1CA
20F4:  MOVFF  00,1C9
20F8:  MOVLW  33
20FA:  MOVLB  1
20FC:  MOVWF  xD0
20FE:  MOVWF  xCF
2100:  MOVLW  53
2102:  MOVWF  xCE
2104:  MOVLW  80
2106:  MOVWF  xCD
2108:  MOVLB  0
210A:  CALL   1826
210E:  MOVFF  03,1BB
2112:  MOVFF  02,1BA
2116:  MOVFF  01,1B9
211A:  MOVFF  00,1B8
....................   temp -= 0.75; 
211E:  BSF    FD8.1
2120:  MOVFF  1BB,1BF
2124:  MOVFF  1BA,1BE
2128:  MOVFF  1B9,1BD
212C:  MOVFF  1B8,1BC
2130:  MOVLB  1
2132:  CLRF   xC3
2134:  CLRF   xC2
2136:  MOVLW  40
2138:  MOVWF  xC1
213A:  MOVLW  7E
213C:  MOVWF  xC0
213E:  MOVLB  0
2140:  CALL   191C
2144:  MOVFF  03,1BB
2148:  MOVFF  02,1BA
214C:  MOVFF  01,1B9
2150:  MOVFF  00,1B8
....................   temp *= 100; 
2154:  MOVFF  1BB,1CC
2158:  MOVFF  1BA,1CB
215C:  MOVFF  1B9,1CA
2160:  MOVFF  1B8,1C9
2164:  MOVLB  1
2166:  CLRF   xD0
2168:  CLRF   xCF
216A:  MOVLW  48
216C:  MOVWF  xCE
216E:  MOVLW  85
2170:  MOVWF  xCD
2172:  MOVLB  0
2174:  CALL   1826
2178:  MOVFF  03,1BB
217C:  MOVFF  02,1BA
2180:  MOVFF  01,1B9
2184:  MOVFF  00,1B8
....................   temp += 25.0; 
2188:  BCF    FD8.1
218A:  MOVFF  1BB,1BF
218E:  MOVFF  1BA,1BE
2192:  MOVFF  1B9,1BD
2196:  MOVFF  1B8,1BC
219A:  MOVLB  1
219C:  CLRF   xC3
219E:  CLRF   xC2
21A0:  MOVLW  48
21A2:  MOVWF  xC1
21A4:  MOVLW  83
21A6:  MOVWF  xC0
21A8:  MOVLB  0
21AA:  CALL   191C
21AE:  MOVFF  03,1BB
21B2:  MOVFF  02,1BA
21B6:  MOVFF  01,1B9
21BA:  MOVFF  00,1B8
....................  
.................... //  set_adc_channel(A2D_POWER); // select rssi power input 
.................... //  delay_us(20); 
.................... //  rssi = read_adc(); 
....................    
....................   for (idx = 0; idx < 10; idx++) 
21BE:  MOVLB  1
21C0:  CLRF   x75
21C2:  CLRF   x74
21C4:  MOVF   x75,F
21C6:  BNZ   220C
21C8:  MOVF   x74,W
21CA:  SUBLW  09
21CC:  BNC   220C
....................     if (rssi <= setup.rssi_table[idx][0]) 
21CE:  RLCF   x74,W
21D0:  MOVWF  02
21D2:  RLCF   x75,W
21D4:  MOVWF  03
21D6:  RLCF   02,F
21D8:  RLCF   03,F
21DA:  MOVLW  FC
21DC:  ANDWF  02,F
21DE:  MOVF   02,W
21E0:  ADDLW  C2
21E2:  MOVWF  FE9
21E4:  MOVLW  00
21E6:  ADDWFC 03,W
21E8:  MOVWF  FEA
21EA:  MOVFF  FEC,03
21EE:  MOVF   FED,F
21F0:  MOVFF  FEF,01
21F4:  MOVF   x77,W
21F6:  SUBWF  03,W
21F8:  BNC   2204
21FA:  BNZ   2202
21FC:  MOVF   x76,W
21FE:  SUBWF  01,W
2200:  BNC   2204
....................       break; 
2202:  BRA    220C
2204:  INCF   x74,F
2206:  BTFSC  FD8.2
2208:  INCF   x75,F
220A:  BRA    21C4
....................   rssi = setup.rssi_table[idx][1]; 
220C:  RLCF   x74,W
220E:  MOVWF  02
2210:  RLCF   x75,W
2212:  MOVWF  03
2214:  RLCF   02,F
2216:  RLCF   03,F
2218:  MOVLW  FC
221A:  ANDWF  02,F
221C:  MOVF   02,W
221E:  ADDLW  1B
2220:  MOVWF  xBC
2222:  MOVLW  00
2224:  ADDWFC 03,W
2226:  MOVWF  xBD
2228:  MOVLW  02
222A:  ADDWF  xBC,W
222C:  MOVWF  01
222E:  MOVLW  00
2230:  ADDWFC xBD,W
2232:  MOVWF  03
2234:  MOVF   01,W
2236:  ADDLW  A7
2238:  MOVWF  FE9
223A:  MOVLW  00
223C:  ADDWFC 03,W
223E:  MOVWF  FEA
2240:  MOVFF  FEC,177
2244:  MOVF   FED,F
2246:  MOVFF  FEF,176
....................  
....................  
....................  
....................   sprintf(buf, "\r\nFREQ=%lu, RSSI=%ludBM, TEMP=%5.1f(c), ID=%lu, DC=%02lu%02u, VER %ls, ", 
....................           setup.frequency, rssi,  temp, setup.unit_ID, setup.year, setup.week, VERSION_V); 
224A:  MOVLW  01
224C:  MOVWF  x08
224E:  MOVLW  78
2250:  MOVWF  x07
2252:  MOVLW  B6
2254:  MOVWF  FF6
2256:  MOVLW  04
2258:  MOVWF  FF7
225A:  MOVLW  07
225C:  MOVWF  xBC
225E:  MOVLB  0
2260:  RCALL  1BB4
2262:  MOVLW  10
2264:  MOVWF  FE9
2266:  MOVFF  A9,1BD
226A:  MOVFF  A8,1BC
226E:  RCALL  1BDC
2270:  MOVLW  C0
2272:  MOVWF  FF6
2274:  MOVLW  04
2276:  MOVWF  FF7
2278:  MOVLW  07
227A:  MOVLB  1
227C:  MOVWF  xBC
227E:  MOVLB  0
2280:  RCALL  1BB4
2282:  MOVLW  10
2284:  MOVWF  FE9
2286:  MOVFF  177,1BD
228A:  MOVFF  176,1BC
228E:  RCALL  1BDC
2290:  MOVLW  CA
2292:  MOVWF  FF6
2294:  MOVLW  04
2296:  MOVWF  FF7
2298:  MOVLW  0A
229A:  MOVLB  1
229C:  MOVWF  xBC
229E:  MOVLB  0
22A0:  RCALL  1BB4
22A2:  MOVLW  04
22A4:  MOVWF  FE9
22A6:  MOVFF  1BB,1BF
22AA:  MOVFF  1BA,1BE
22AE:  MOVFF  1B9,1BD
22B2:  MOVFF  1B8,1BC
22B6:  MOVLW  01
22B8:  MOVLB  1
22BA:  MOVWF  xC0
22BC:  MOVLB  0
22BE:  BRA    1CDC
22C0:  MOVLW  D9
22C2:  MOVWF  FF6
22C4:  MOVLW  04
22C6:  MOVWF  FF7
22C8:  MOVLW  08
22CA:  MOVLB  1
22CC:  MOVWF  xBC
22CE:  MOVLB  0
22D0:  RCALL  1BB4
22D2:  MOVLW  10
22D4:  MOVWF  FE9
22D6:  MOVFF  C1,1BD
22DA:  MOVFF  C0,1BC
22DE:  RCALL  1BDC
22E0:  MOVLW  E4
22E2:  MOVWF  FF6
22E4:  MOVLW  04
22E6:  MOVWF  FF7
22E8:  MOVLW  05
22EA:  MOVLB  1
22EC:  MOVWF  xBC
22EE:  MOVLB  0
22F0:  RCALL  1BB4
22F2:  MOVLW  0B
22F4:  MOVWF  FE9
22F6:  MOVFF  BE,1BD
22FA:  MOVFF  BD,1BC
22FE:  RCALL  1BDC
2300:  MOVFF  BF,1BC
2304:  MOVLW  01
2306:  MOVLB  1
2308:  MOVWF  xBD
230A:  MOVLB  0
230C:  BRA    1EB4
230E:  MOVLW  F2
2310:  MOVWF  FF6
2312:  MOVLW  04
2314:  MOVWF  FF7
2316:  MOVLW  06
2318:  MOVLB  1
231A:  MOVWF  xBC
231C:  MOVLB  0
231E:  RCALL  1BB4
2320:  MOVLW  FE
2322:  MOVWF  FF6
2324:  MOVLW  04
2326:  MOVWF  FF7
2328:  RCALL  1F32
232A:  MOVLW  2C
232C:  MOVLB  1
232E:  MOVWF  xC9
2330:  MOVLB  0
2332:  RCALL  1B94
2334:  MOVLW  20
2336:  MOVLB  1
2338:  MOVWF  xC9
233A:  MOVLB  0
233C:  RCALL  1B94
....................   COM1_send_str(buf); 
233E:  MOVLW  01
2340:  MOVLB  1
2342:  MOVWF  xC4
2344:  MOVLW  78
2346:  MOVWF  xC3
2348:  MOVLB  0
234A:  CALL   0C88
....................  
....................   if(setup.meter_backlight == 1) 
234E:  DECFSZ xBC,W
2350:  BRA    236A
....................   sprintf(buf, "LIGHT=ON, "); 
2352:  MOVLW  01
2354:  MOVLB  1
2356:  MOVWF  x08
2358:  MOVLW  78
235A:  MOVWF  x07
235C:  MOVLW  04
235E:  MOVWF  FF6
2360:  MOVLW  05
2362:  MOVWF  FF7
2364:  MOVLB  0
2366:  RCALL  1F32
2368:  BRA    2380
....................   else  
....................   sprintf(buf, "LIGHT=OFF, "); 
236A:  MOVLW  01
236C:  MOVLB  1
236E:  MOVWF  x08
2370:  MOVLW  78
2372:  MOVWF  x07
2374:  MOVLW  10
2376:  MOVWF  FF6
2378:  MOVLW  05
237A:  MOVWF  FF7
237C:  MOVLB  0
237E:  RCALL  1F32
....................   COM1_send_str(buf); 
2380:  MOVLW  01
2382:  MOVLB  1
2384:  MOVWF  xC4
2386:  MOVLW  78
2388:  MOVWF  xC3
238A:  MOVLB  0
238C:  CALL   0C88
....................   
....................   if(pass_count > PASS_FAIL_TRESHOLD) 
2390:  MOVF   2F,F
2392:  BNZ   239A
2394:  MOVF   2E,W
2396:  SUBLW  3C
2398:  BC    23D0
....................   	sprintf(buf, "PASS Bit=%ld ",pass_count); 
239A:  MOVLW  01
239C:  MOVLB  1
239E:  MOVWF  x08
23A0:  MOVLW  78
23A2:  MOVWF  x07
23A4:  MOVLW  1C
23A6:  MOVWF  FF6
23A8:  MOVLW  05
23AA:  MOVWF  FF7
23AC:  MOVLW  09
23AE:  MOVWF  xBC
23B0:  MOVLB  0
23B2:  RCALL  1BB4
23B4:  MOVLW  10
23B6:  MOVWF  FE9
23B8:  MOVFF  2F,1BD
23BC:  MOVFF  2E,1BC
23C0:  RCALL  1F52
23C2:  MOVLW  20
23C4:  MOVLB  1
23C6:  MOVWF  xC9
23C8:  MOVLB  0
23CA:  CALL   1B94
23CE:  BRA    2406
....................   else  
....................   	sprintf(buf, "FAIL Bit=%ld ",pass_count); 
23D0:  MOVLW  01
23D2:  MOVLB  1
23D4:  MOVWF  x08
23D6:  MOVLW  78
23D8:  MOVWF  x07
23DA:  MOVLW  2A
23DC:  MOVWF  FF6
23DE:  MOVLW  05
23E0:  MOVWF  FF7
23E2:  MOVLW  09
23E4:  MOVWF  xBC
23E6:  MOVLB  0
23E8:  CALL   1BB4
23EC:  MOVLW  10
23EE:  MOVWF  FE9
23F0:  MOVFF  2F,1BD
23F4:  MOVFF  2E,1BC
23F8:  RCALL  1F52
23FA:  MOVLW  20
23FC:  MOVLB  1
23FE:  MOVWF  xC9
2400:  MOVLB  0
2402:  CALL   1B94
....................   COM1_send_str(buf); 
2406:  MOVLW  01
2408:  MOVLB  1
240A:  MOVWF  xC4
240C:  MOVLW  78
240E:  MOVWF  xC3
2410:  MOVLB  0
2412:  CALL   0C88
....................  
....................  
....................   if(input(PLL_LD)) 
2416:  BTFSS  F82.0
2418:  BRA    2432
.................... 	sprintf(buf, "SYNTH LOCK=LOCK, "); 
241A:  MOVLW  01
241C:  MOVLB  1
241E:  MOVWF  x08
2420:  MOVLW  78
2422:  MOVWF  x07
2424:  MOVLW  38
2426:  MOVWF  FF6
2428:  MOVLW  05
242A:  MOVWF  FF7
242C:  MOVLB  0
242E:  RCALL  1F32
2430:  BRA    2448
....................   else 
....................     sprintf(buf, "SYNTH LOCK=NOT LOCK, "); 
2432:  MOVLW  01
2434:  MOVLB  1
2436:  MOVWF  x08
2438:  MOVLW  78
243A:  MOVWF  x07
243C:  MOVLW  4A
243E:  MOVWF  FF6
2440:  MOVLW  05
2442:  MOVWF  FF7
2444:  MOVLB  0
2446:  RCALL  1F32
....................   COM1_send_str(buf); 
2448:  MOVLW  01
244A:  MOVLB  1
244C:  MOVWF  xC4
244E:  MOVLW  78
2450:  MOVWF  xC3
2452:  MOVLB  0
2454:  CALL   0C88
....................  
.................... //  if(pa_command == 1) 
.................... //	sprintf(buf, "POWER AMP=ON , "); 
.................... //  else 
.................... //    sprintf(buf, "POWER AMP=OFF , "); 
.................... //  COM1_send_str(buf); 
....................  
....................   if(bit_mode == 1) 
2458:  MOVLB  1
245A:  DECFSZ x00,W
245C:  BRA    2476
....................   	sprintf(buf, "BIT MODE=START, "); 
245E:  MOVLW  01
2460:  MOVWF  x08
2462:  MOVLW  78
2464:  MOVWF  x07
2466:  MOVLW  60
2468:  MOVWF  FF6
246A:  MOVLW  05
246C:  MOVWF  FF7
246E:  MOVLB  0
2470:  RCALL  1F32
2472:  BRA    248E
2474:  MOVLB  1
....................   else if(bit_mode == 0) 
2476:  MOVF   x00,F
2478:  BNZ   2490
....................   	sprintf(buf, "BIT MODE=STOP, "); 
247A:  MOVLW  01
247C:  MOVWF  x08
247E:  MOVLW  78
2480:  MOVWF  x07
2482:  MOVLW  72
2484:  MOVWF  FF6
2486:  MOVLW  05
2488:  MOVWF  FF7
248A:  MOVLB  0
248C:  RCALL  1F32
248E:  MOVLB  1
....................   COM1_send_str(buf); 
2490:  MOVLW  01
2492:  MOVWF  xC4
2494:  MOVLW  78
2496:  MOVWF  xC3
2498:  MOVLB  0
249A:  CALL   0C88
....................  
....................   if(setup.power_level == 1) 
249E:  DECFSZ xAA,W
24A0:  BRA    24BE
24A2:  MOVF   xAB,F
24A4:  BNZ   24BE
.................... 	sprintf(buf, "POWER MODE=HIGH, "); 
24A6:  MOVLW  01
24A8:  MOVLB  1
24AA:  MOVWF  x08
24AC:  MOVLW  78
24AE:  MOVWF  x07
24B0:  MOVLW  82
24B2:  MOVWF  FF6
24B4:  MOVLW  05
24B6:  MOVWF  FF7
24B8:  MOVLB  0
24BA:  RCALL  1F32
24BC:  BRA    24D4
....................   else 
....................     sprintf(buf, "POWER MODE=LOW, "); 
24BE:  MOVLW  01
24C0:  MOVLB  1
24C2:  MOVWF  x08
24C4:  MOVLW  78
24C6:  MOVWF  x07
24C8:  MOVLW  94
24CA:  MOVWF  FF6
24CC:  MOVLW  05
24CE:  MOVWF  FF7
24D0:  MOVLB  0
24D2:  RCALL  1F32
....................   COM1_send_str(buf); 
24D4:  MOVLW  01
24D6:  MOVLB  1
24D8:  MOVWF  xC4
24DA:  MOVLW  78
24DC:  MOVWF  xC3
24DE:  MOVLB  0
24E0:  CALL   0C88
....................  
....................   if(auto_power) 
24E4:  MOVLB  1
24E6:  MOVF   x01,F
24E8:  BZ    2502
.................... 	sprintf(buf, "AUTO_POWER=1, "); 
24EA:  MOVLW  01
24EC:  MOVWF  x08
24EE:  MOVLW  78
24F0:  MOVWF  x07
24F2:  MOVLW  A6
24F4:  MOVWF  FF6
24F6:  MOVLW  05
24F8:  MOVWF  FF7
24FA:  MOVLB  0
24FC:  RCALL  1F32
24FE:  BRA    2516
2500:  MOVLB  1
....................   else 
.................... 	sprintf(buf, "AUTO_POWER=0, "); 
2502:  MOVLW  01
2504:  MOVWF  x08
2506:  MOVLW  78
2508:  MOVWF  x07
250A:  MOVLW  B6
250C:  MOVWF  FF6
250E:  MOVLW  05
2510:  MOVWF  FF7
2512:  MOVLB  0
2514:  RCALL  1F32
....................   COM1_send_str(buf); 
2516:  MOVLW  01
2518:  MOVLB  1
251A:  MOVWF  xC4
251C:  MOVLW  78
251E:  MOVWF  xC3
2520:  MOVLB  0
2522:  CALL   0C88
2526:  GOTO   2F42 (RETURN)
....................  
....................  
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  bit set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
1660:  RCALL  14C4
1662:  MOVFF  02,173
1666:  MOVFF  01,172
....................   if (idx < 2) 
166A:  MOVLB  1
166C:  MOVF   x73,F
166E:  BNZ   1684
1670:  MOVF   x72,W
1672:  SUBLW  01
1674:  BNC   1684
....................     { 
....................     setup.power_level = idx; 
1676:  MOVFF  173,AB
167A:  MOVFF  172,AA
....................     return 1; 
167E:  MOVLW  01
1680:  MOVWF  01
1682:  BRA    1688
....................     } 
....................   return 0; 
1684:  MOVLW  00
1686:  MOVWF  01
1688:  MOVLB  0
168A:  GOTO   2AA0 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, addr; 
....................   ULONG freq; 
....................   UINT  value; 
....................   chr = 2; 
*
254E:  MOVLW  02
2550:  MOVLB  1
2552:  MOVWF  x3D
....................   comm_ptr = 0; 
2554:  MOVLB  0
2556:  CLRF   xFC
....................   UINT year, week; 
....................   switch (toupper(get_char())) 
2558:  CALL   121C
255C:  MOVFF  02,173
2560:  MOVFF  01,172
2564:  MOVLB  1
2566:  MOVF   x73,F
2568:  BNZ   2570
256A:  MOVF   x72,W
256C:  SUBLW  60
256E:  BC    2580
2570:  MOVF   x73,F
2572:  BNZ   2580
2574:  MOVF   x72,W
2576:  SUBLW  7A
2578:  BNC   2580
257A:  MOVF   x72,W
257C:  ANDLW  DF
257E:  BRA    2582
2580:  MOVF   x72,W
2582:  XORLW  48
2584:  MOVLB  0
2586:  BZ    25DE
2588:  XORLW  77
258A:  BZ    25DE
258C:  XORLW  79
258E:  BZ    25EA
2590:  XORLW  09
2592:  BTFSC  FD8.2
2594:  BRA    278A
2596:  XORLW  1B
2598:  BTFSC  FD8.2
259A:  BRA    2868
259C:  XORLW  16
259E:  BTFSC  FD8.2
25A0:  BRA    2914
25A2:  XORLW  12
25A4:  BTFSC  FD8.2
25A6:  BRA    29F0
25A8:  XORLW  1C
25AA:  BTFSC  FD8.2
25AC:  BRA    2AAE
25AE:  XORLW  0D
25B0:  BTFSC  FD8.2
25B2:  BRA    2B92
25B4:  XORLW  12
25B6:  BTFSC  FD8.2
25B8:  BRA    2BF2
25BA:  XORLW  62
25BC:  BTFSC  FD8.2
25BE:  GOTO   2E48
25C2:  XORLW  03
25C4:  BTFSC  FD8.2
25C6:  GOTO   2EB4
25CA:  XORLW  01
25CC:  BTFSC  FD8.2
25CE:  GOTO   2F1C
25D2:  XORLW  62
25D4:  BTFSC  FD8.2
25D6:  GOTO   2F2A
25DA:  GOTO   2F30
....................     { 
....................     case 'H':  
....................     case '?': 
....................       list_help(); 
25DE:  GOTO   1238
....................       return 0; 
25E2:  MOVLW  00
25E4:  MOVWF  01
25E6:  GOTO   2F46
....................  // break; 
....................  
....................     case 'F': 
....................       freq = get_frequency(); 
25EA:  GOTO   1586
25EE:  MOVLB  1
25F0:  CLRF   x43
25F2:  CLRF   x42
25F4:  MOVFF  02,141
25F8:  MOVFF  01,140
.................... 		if(setup.power_level) 
25FC:  MOVLB  0
25FE:  MOVF   xAA,W
2600:  IORWF  xAB,W
2602:  BZ    26C6
.................... 		{ 
....................       		if (freq >= FRQ_HI_BOT && freq <= FRQ_HI_TOP) 
2604:  MOVLB  1
2606:  MOVF   x43,F
2608:  BNZ   261E
260A:  MOVF   x42,F
260C:  BNZ   261E
260E:  MOVF   x41,W
2610:  SUBLW  15
2612:  BC    2688
2614:  XORLW  FF
2616:  BNZ   261E
2618:  MOVF   x40,W
261A:  SUBLW  11
261C:  BC    2688
261E:  MOVF   x43,F
2620:  BNZ   2688
2622:  MOVF   x42,F
2624:  BNZ   2688
2626:  MOVF   x41,W
2628:  SUBLW  16
262A:  BNC   2688
262C:  BNZ   2634
262E:  MOVF   x40,W
2630:  SUBLW  DA
2632:  BNC   2688
....................                { 
....................          		setup.frequency = freq; 
2634:  MOVFF  141,A9
2638:  MOVFF  140,A8
....................         	 	PLL_compute_freq_parameters(freq * 10); 
263C:  MOVFF  143,18B
2640:  MOVFF  142,18A
2644:  MOVFF  141,189
2648:  MOVFF  140,188
264C:  CLRF   x8F
264E:  CLRF   x8E
2650:  CLRF   x8D
2652:  MOVLW  0A
2654:  MOVWF  x8C
2656:  MOVLB  0
2658:  CALL   08BA
265C:  MOVFF  01,173
2660:  MOVFF  00,172
2664:  MOVFF  01,177
2668:  MOVFF  00,176
266C:  CALL   09A8
....................          		PLL_update();              
2670:  CALL   0B3E
....................          		allow_write = 2975; 
2674:  MOVLW  0B
2676:  MOVWF  xE7
2678:  MOVLW  9F
267A:  MOVWF  xE6
....................          		write_setup(); 
267C:  CALL   1610
....................          		update_all(); 
2680:  CALL   0C2E
....................          		} 
2684:  BRA    26C4
2686:  MOVLB  1
....................       			else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
2688:  MOVLW  01
268A:  MOVWF  FEA
268C:  MOVLW  4A
268E:  MOVWF  FE9
2690:  MOVFF  FF2,172
2694:  BCF    FF2.7
2696:  MOVLW  0A
2698:  MOVWF  01
269A:  CLRF   FF7
269C:  MOVLW  00
269E:  MOVLB  0
26A0:  CALL   035A
26A4:  TBLRD*-
26A6:  TBLRD*+
26A8:  MOVFF  FF5,FEE
26AC:  DECFSZ 01,F
26AE:  BRA    26A6
26B0:  MOVLB  1
26B2:  BTFSC  x72.7
26B4:  BSF    FF2.7
26B6:  MOVLW  01
26B8:  MOVWF  xC4
26BA:  MOVLW  4A
26BC:  MOVWF  xC3
26BE:  MOVLB  0
26C0:  CALL   0C88
....................   		} 
26C4:  BRA    2786
.................... 		else 
.................... 		{ 
.................... 			    if (freq >= FRQ_LO_BOT && freq <= FRQ_LO_TOP) 
26C6:  MOVLB  1
26C8:  MOVF   x43,F
26CA:  BNZ   26E0
26CC:  MOVF   x42,F
26CE:  BNZ   26E0
26D0:  MOVF   x41,W
26D2:  SUBLW  13
26D4:  BC    274A
26D6:  XORLW  FF
26D8:  BNZ   26E0
26DA:  MOVF   x40,W
26DC:  SUBLW  1D
26DE:  BC    274A
26E0:  MOVF   x43,F
26E2:  BNZ   274A
26E4:  MOVF   x42,F
26E6:  BNZ   274A
26E8:  MOVF   x41,W
26EA:  SUBLW  14
26EC:  BNC   274A
26EE:  BNZ   26F6
26F0:  MOVF   x40,W
26F2:  SUBLW  82
26F4:  BNC   274A
....................                { 
....................          		setup.frequency = freq; 
26F6:  MOVFF  141,A9
26FA:  MOVFF  140,A8
....................         	 	PLL_compute_freq_parameters(freq * 10); 
26FE:  MOVFF  143,18B
2702:  MOVFF  142,18A
2706:  MOVFF  141,189
270A:  MOVFF  140,188
270E:  CLRF   x8F
2710:  CLRF   x8E
2712:  CLRF   x8D
2714:  MOVLW  0A
2716:  MOVWF  x8C
2718:  MOVLB  0
271A:  CALL   08BA
271E:  MOVFF  01,173
2722:  MOVFF  00,172
2726:  MOVFF  01,177
272A:  MOVFF  00,176
272E:  CALL   09A8
....................          		PLL_update();              
2732:  CALL   0B3E
....................          		allow_write = 2975; 
2736:  MOVLW  0B
2738:  MOVWF  xE7
273A:  MOVLW  9F
273C:  MOVWF  xE6
....................          		write_setup(); 
273E:  CALL   1610
....................          		update_all(); 
2742:  CALL   0C2E
....................          		} 
2746:  BRA    2786
2748:  MOVLB  1
....................       			else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
274A:  MOVLW  01
274C:  MOVWF  FEA
274E:  MOVLW  54
2750:  MOVWF  FE9
2752:  MOVFF  FF2,172
2756:  BCF    FF2.7
2758:  MOVLW  0A
275A:  MOVWF  01
275C:  CLRF   FF7
275E:  MOVLW  00
2760:  MOVLB  0
2762:  CALL   035A
2766:  TBLRD*-
2768:  TBLRD*+
276A:  MOVFF  FF5,FEE
276E:  DECFSZ 01,F
2770:  BRA    2768
2772:  MOVLB  1
2774:  BTFSC  x72.7
2776:  BSF    FF2.7
2778:  MOVLW  01
277A:  MOVWF  xC4
277C:  MOVLW  54
277E:  MOVWF  xC3
2780:  MOVLB  0
2782:  CALL   0C88
.................... 		} 
....................  
....................       break; 
2786:  GOTO   2F42
....................  
....................     case 'O': 
....................       if (toupper(get_char()) == 'N') 
278A:  CALL   121C
278E:  MOVFF  02,173
2792:  MOVFF  01,172
2796:  MOVLB  1
2798:  MOVF   x73,F
279A:  BNZ   27A2
279C:  MOVF   x72,W
279E:  SUBLW  60
27A0:  BC    27B2
27A2:  MOVF   x73,F
27A4:  BNZ   27B2
27A6:  MOVF   x72,W
27A8:  SUBLW  7A
27AA:  BNC   27B2
27AC:  MOVF   x72,W
27AE:  ANDLW  DF
27B0:  BRA    27B4
27B2:  MOVF   x72,W
27B4:  SUBLW  4E
27B6:  BNZ   2828
....................         { 
....................         idx = get_int(); 
27B8:  MOVLB  0
27BA:  CALL   14C4
27BE:  MOVFF  01,13E
....................         if (idx <2) 
27C2:  MOVLB  1
27C4:  MOVF   x3E,W
27C6:  SUBLW  01
27C8:  BNC   27E8
....................           { 
....................           if (idx) 
27CA:  MOVF   x3E,F
27CC:  BZ    27DC
....................             { 
....................             //pa_command  = 1; 
....................             //pwr_command = 1; 
.................... 			on_command = 1; 
27CE:  MOVLW  01
27D0:  MOVLB  0
27D2:  MOVWF  xFF
.................... 			PLL_update(); 
27D4:  CALL   0B3E
....................             } 
27D8:  BRA    27E4
27DA:  MOVLB  1
....................           else 
....................             { 
....................             //pa_command  = 0; 
....................             //pwr_command = 0; 
.................... 			on_command = 0; 
27DC:  MOVLB  0
27DE:  CLRF   xFF
.................... 			PLL_mute(); 
27E0:  GOTO   1638
....................             } 
....................           } 
27E4:  BRA    2824
27E6:  MOVLB  1
....................       else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
27E8:  MOVLW  01
27EA:  MOVWF  FEA
27EC:  MOVLW  5E
27EE:  MOVWF  FE9
27F0:  MOVFF  FF2,172
27F4:  BCF    FF2.7
27F6:  MOVLW  0A
27F8:  MOVWF  01
27FA:  CLRF   FF7
27FC:  MOVLW  00
27FE:  MOVLB  0
2800:  CALL   035A
2804:  TBLRD*-
2806:  TBLRD*+
2808:  MOVFF  FF5,FEE
280C:  DECFSZ 01,F
280E:  BRA    2806
2810:  MOVLB  1
2812:  BTFSC  x72.7
2814:  BSF    FF2.7
2816:  MOVLW  01
2818:  MOVWF  xC4
281A:  MOVLW  5E
281C:  MOVWF  xC3
281E:  MOVLB  0
2820:  CALL   0C88
....................       } 
2824:  BRA    2864
2826:  MOVLB  1
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n");          
2828:  MOVLW  01
282A:  MOVWF  FEA
282C:  MOVLW  68
282E:  MOVWF  FE9
2830:  MOVFF  FF2,172
2834:  BCF    FF2.7
2836:  MOVLW  0A
2838:  MOVWF  01
283A:  CLRF   FF7
283C:  MOVLW  00
283E:  MOVLB  0
2840:  CALL   035A
2844:  TBLRD*-
2846:  TBLRD*+
2848:  MOVFF  FF5,FEE
284C:  DECFSZ 01,F
284E:  BRA    2846
2850:  MOVLB  1
2852:  BTFSC  x72.7
2854:  BSF    FF2.7
2856:  MOVLW  01
2858:  MOVWF  xC4
285A:  MOVLW  68
285C:  MOVWF  xC3
285E:  MOVLB  0
2860:  CALL   0C88
....................       break; 
2864:  GOTO   2F42
....................  
.................... 	case 'T':							//command TR - return T in case of TX, return R in case of RX 
.................... 	  if (toupper(get_char()) == 'R') 
2868:  CALL   121C
286C:  MOVFF  02,173
2870:  MOVFF  01,172
2874:  MOVLB  1
2876:  MOVF   x73,F
2878:  BNZ   2880
287A:  MOVF   x72,W
287C:  SUBLW  60
287E:  BC    2890
2880:  MOVF   x73,F
2882:  BNZ   2890
2884:  MOVF   x72,W
2886:  SUBLW  7A
2888:  BNC   2890
288A:  MOVF   x72,W
288C:  ANDLW  DF
288E:  BRA    2892
2890:  MOVF   x72,W
2892:  SUBLW  52
2894:  BNZ   28D6
.................... 		{ 
.................... 		COM1_send_str("\r\n$R\r\n"); 
2896:  MOVLW  01
2898:  MOVWF  FEA
289A:  MOVLW  68
289C:  MOVWF  FE9
289E:  MOVFF  FF2,172
28A2:  BCF    FF2.7
28A4:  MOVLW  07
28A6:  MOVWF  01
28A8:  CLRF   FF7
28AA:  MOVLW  00
28AC:  MOVLB  0
28AE:  CALL   037E
28B2:  TBLRD*-
28B4:  TBLRD*+
28B6:  MOVFF  FF5,FEE
28BA:  DECFSZ 01,F
28BC:  BRA    28B4
28BE:  MOVLB  1
28C0:  BTFSC  x72.7
28C2:  BSF    FF2.7
28C4:  MOVLW  01
28C6:  MOVWF  xC4
28C8:  MOVLW  68
28CA:  MOVWF  xC3
28CC:  MOVLB  0
28CE:  CALL   0C88
.................... 		}    
28D2:  BRA    2912
28D4:  MOVLB  1
.................... 	  else 
.................... 		COM1_send_str("\r\n$FAIL\r\n"); 
28D6:  MOVLW  01
28D8:  MOVWF  FEA
28DA:  MOVLW  68
28DC:  MOVWF  FE9
28DE:  MOVFF  FF2,172
28E2:  BCF    FF2.7
28E4:  MOVLW  0A
28E6:  MOVWF  01
28E8:  CLRF   FF7
28EA:  MOVLW  00
28EC:  MOVLB  0
28EE:  CALL   035A
28F2:  TBLRD*-
28F4:  TBLRD*+
28F6:  MOVFF  FF5,FEE
28FA:  DECFSZ 01,F
28FC:  BRA    28F4
28FE:  MOVLB  1
2900:  BTFSC  x72.7
2902:  BSF    FF2.7
2904:  MOVLW  01
2906:  MOVWF  xC4
2908:  MOVLW  68
290A:  MOVWF  xC3
290C:  MOVLB  0
290E:  CALL   0C88
.................... 		break; 
2912:  BRA    2F42
....................  
....................  
....................  
.................... 	case 'B': 
....................       if (toupper(get_char()) == 'M') 
2914:  CALL   121C
2918:  MOVFF  02,173
291C:  MOVFF  01,172
2920:  MOVLB  1
2922:  MOVF   x73,F
2924:  BNZ   292C
2926:  MOVF   x72,W
2928:  SUBLW  60
292A:  BC    293C
292C:  MOVF   x73,F
292E:  BNZ   293C
2930:  MOVF   x72,W
2932:  SUBLW  7A
2934:  BNC   293C
2936:  MOVF   x72,W
2938:  ANDLW  DF
293A:  BRA    293E
293C:  MOVF   x72,W
293E:  SUBLW  4D
2940:  BNZ   29AE
....................         { 
....................         idx = get_int(); 
2942:  MOVLB  0
2944:  CALL   14C4
2948:  MOVFF  01,13E
....................         if (idx <2) 
294C:  MOVLB  1
294E:  MOVF   x3E,W
2950:  SUBLW  01
2952:  BNC   296E
....................           { 
....................           if (idx) 
2954:  MOVF   x3E,F
2956:  BZ    2966
....................             { 
....................             pass_count = 0; 
2958:  CLRF   2F
295A:  CLRF   2E
.................... 			bit_mode = 1; 
295C:  MOVLW  01
295E:  MOVWF  x00
.................... 			output_high(BIT_MODE_EN); 
2960:  BSF    F8C.3
.................... 			enable_interrupts(INT_RDA2);  
2962:  BSF    FA3.5
....................             } 
2964:  BRA    296C
....................           else 
....................             { 
....................             bit_mode = 0; 
2966:  CLRF   x00
.................... 			output_low(BIT_MODE_EN); 
2968:  BCF    F8C.3
.................... 			disable_interrupts(INT_RDA2);  
296A:  BCF    FA3.5
....................             } 
....................           } 
296C:  BRA    29AC
....................       else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
296E:  MOVLW  01
2970:  MOVWF  FEA
2972:  MOVLW  68
2974:  MOVWF  FE9
2976:  MOVFF  FF2,172
297A:  BCF    FF2.7
297C:  MOVLW  0A
297E:  MOVWF  01
2980:  CLRF   FF7
2982:  MOVLW  00
2984:  MOVLB  0
2986:  CALL   035A
298A:  TBLRD*-
298C:  TBLRD*+
298E:  MOVFF  FF5,FEE
2992:  DECFSZ 01,F
2994:  BRA    298C
2996:  MOVLB  1
2998:  BTFSC  x72.7
299A:  BSF    FF2.7
299C:  MOVLW  01
299E:  MOVWF  xC4
29A0:  MOVLW  68
29A2:  MOVWF  xC3
29A4:  MOVLB  0
29A6:  CALL   0C88
29AA:  MOVLB  1
....................       } 
29AC:  BRA    29EC
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n");          
29AE:  MOVLW  01
29B0:  MOVWF  FEA
29B2:  MOVLW  68
29B4:  MOVWF  FE9
29B6:  MOVFF  FF2,172
29BA:  BCF    FF2.7
29BC:  MOVLW  0A
29BE:  MOVWF  01
29C0:  CLRF   FF7
29C2:  MOVLW  00
29C4:  MOVLB  0
29C6:  CALL   035A
29CA:  TBLRD*-
29CC:  TBLRD*+
29CE:  MOVFF  FF5,FEE
29D2:  DECFSZ 01,F
29D4:  BRA    29CC
29D6:  MOVLB  1
29D8:  BTFSC  x72.7
29DA:  BSF    FF2.7
29DC:  MOVLW  01
29DE:  MOVWF  xC4
29E0:  MOVLW  68
29E2:  MOVWF  xC3
29E4:  MOVLB  0
29E6:  CALL   0C88
29EA:  MOVLB  1
....................       break; 
29EC:  MOVLB  0
29EE:  BRA    2F42
....................  
....................  
....................     case 'P': 
....................       if (toupper(peek_char()) == 'S') // $PS command 
29F0:  CALL   1454
29F4:  MOVFF  02,173
29F8:  MOVFF  01,172
29FC:  MOVLB  1
29FE:  MOVF   x73,F
2A00:  BNZ   2A08
2A02:  MOVF   x72,W
2A04:  SUBLW  60
2A06:  BC    2A18
2A08:  MOVF   x73,F
2A0A:  BNZ   2A18
2A0C:  MOVF   x72,W
2A0E:  SUBLW  7A
2A10:  BNC   2A18
2A12:  MOVF   x72,W
2A14:  ANDLW  DF
2A16:  BRA    2A1A
2A18:  MOVF   x72,W
2A1A:  SUBLW  53
2A1C:  BNZ   2A9A
....................         { 
....................         get_char(); // get rid of 'S' 
2A1E:  MOVLB  0
2A20:  CALL   121C
....................         idx = get_int(); 
2A24:  CALL   14C4
2A28:  MOVFF  01,13E
....................               if (idx <2) 
2A2C:  MOVLB  1
2A2E:  MOVF   x3E,W
2A30:  SUBLW  01
2A32:  BNC   2A5A
....................                { 
....................                 if (idx) 
2A34:  MOVF   x3E,F
2A36:  BZ    2A42
....................                  { 
....................                    pa_command  = 1; 
2A38:  MOVLW  01
2A3A:  MOVLB  0
2A3C:  MOVWF  xFE
....................                  } 
2A3E:  BRA    2A46
2A40:  MOVLB  1
....................                  else 
....................                  { 
....................                  pa_command  = 0; 
2A42:  MOVLB  0
2A44:  CLRF   xFE
....................                  } 
.................... 					setup.power_amp = pa_command;  //yehuda add this line too 
2A46:  MOVFF  FE,A7
.................... 					allow_write = 2975;          ////yehuda save LD command into EEPROM when changed 
2A4A:  MOVLW  0B
2A4C:  MOVWF  xE7
2A4E:  MOVLW  9F
2A50:  MOVWF  xE6
....................          			write_setup(); 
2A52:  CALL   1610
....................                  } 
2A56:  BRA    2A96
2A58:  MOVLB  1
....................          else   
....................             COM1_send_str("\r\n$FAIL\r\n");                
2A5A:  MOVLW  01
2A5C:  MOVWF  FEA
2A5E:  MOVLW  68
2A60:  MOVWF  FE9
2A62:  MOVFF  FF2,172
2A66:  BCF    FF2.7
2A68:  MOVLW  0A
2A6A:  MOVWF  01
2A6C:  CLRF   FF7
2A6E:  MOVLW  00
2A70:  MOVLB  0
2A72:  CALL   035A
2A76:  TBLRD*-
2A78:  TBLRD*+
2A7A:  MOVFF  FF5,FEE
2A7E:  DECFSZ 01,F
2A80:  BRA    2A78
2A82:  MOVLB  1
2A84:  BTFSC  x72.7
2A86:  BSF    FF2.7
2A88:  MOVLW  01
2A8A:  MOVWF  xC4
2A8C:  MOVLW  68
2A8E:  MOVWF  xC3
2A90:  MOVLB  0
2A92:  CALL   0C88
....................          } 
2A96:  BRA    2AA0
2A98:  MOVLB  1
....................          else 							  // $P command 
....................            set_power_level(); 
2A9A:  MOVLB  0
2A9C:  GOTO   1660
.................... 		   	allow_write = 2975;          ////yehuda save LD command into EEPROM when changed 
2AA0:  MOVLW  0B
2AA2:  MOVWF  xE7
2AA4:  MOVLW  9F
2AA6:  MOVWF  xE6
....................          	write_setup(); 
2AA8:  CALL   1610
....................          break; 
2AAC:  BRA    2F42
....................  
....................     case 'L': 
....................       if (toupper(get_char()) == 'D') 
2AAE:  CALL   121C
2AB2:  MOVFF  02,173
2AB6:  MOVFF  01,172
2ABA:  MOVLB  1
2ABC:  MOVF   x73,F
2ABE:  BNZ   2AC6
2AC0:  MOVF   x72,W
2AC2:  SUBLW  60
2AC4:  BC    2AD6
2AC6:  MOVF   x73,F
2AC8:  BNZ   2AD6
2ACA:  MOVF   x72,W
2ACC:  SUBLW  7A
2ACE:  BNC   2AD6
2AD0:  MOVF   x72,W
2AD2:  ANDLW  DF
2AD4:  BRA    2AD8
2AD6:  MOVF   x72,W
2AD8:  SUBLW  44
2ADA:  BNZ   2B54
....................         { 
....................         idx = get_int(); 
2ADC:  MOVLB  0
2ADE:  CALL   14C4
2AE2:  MOVFF  01,13E
....................         if (idx <2) 
2AE6:  MOVLB  1
2AE8:  MOVF   x3E,W
2AEA:  SUBLW  01
2AEC:  BNC   2B14
....................         { 
....................           if (idx) 
2AEE:  MOVF   x3E,F
2AF0:  BZ    2AFE
....................             { 
....................             setup.meter_backlight = 1; 
2AF2:  MOVLW  01
2AF4:  MOVLB  0
2AF6:  MOVWF  xBC
....................             output_high(MET_EN); 
2AF8:  BSF    F8A.3
....................             } 
2AFA:  BRA    2B04
2AFC:  MOVLB  1
....................           else 
....................             { 
....................             setup.meter_backlight = 0; 
2AFE:  MOVLB  0
2B00:  CLRF   xBC
....................             output_low(MET_EN); 
2B02:  BCF    F8A.3
....................             } 
.................... 			allow_write = 2975;          ////yehuda save LD command into EEPROM when changed 
2B04:  MOVLW  0B
2B06:  MOVWF  xE7
2B08:  MOVLW  9F
2B0A:  MOVWF  xE6
....................          	write_setup(); 
2B0C:  CALL   1610
....................          } 
2B10:  BRA    2B50
2B12:  MOVLB  1
....................    else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2B14:  MOVLW  01
2B16:  MOVWF  FEA
2B18:  MOVLW  68
2B1A:  MOVWF  FE9
2B1C:  MOVFF  FF2,172
2B20:  BCF    FF2.7
2B22:  MOVLW  0A
2B24:  MOVWF  01
2B26:  CLRF   FF7
2B28:  MOVLW  00
2B2A:  MOVLB  0
2B2C:  CALL   035A
2B30:  TBLRD*-
2B32:  TBLRD*+
2B34:  MOVFF  FF5,FEE
2B38:  DECFSZ 01,F
2B3A:  BRA    2B32
2B3C:  MOVLB  1
2B3E:  BTFSC  x72.7
2B40:  BSF    FF2.7
2B42:  MOVLW  01
2B44:  MOVWF  xC4
2B46:  MOVLW  68
2B48:  MOVWF  xC3
2B4A:  MOVLB  0
2B4C:  CALL   0C88
....................         } 
2B50:  BRA    2B90
2B52:  MOVLB  1
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
2B54:  MOVLW  01
2B56:  MOVWF  FEA
2B58:  MOVLW  68
2B5A:  MOVWF  FE9
2B5C:  MOVFF  FF2,172
2B60:  BCF    FF2.7
2B62:  MOVLW  0A
2B64:  MOVWF  01
2B66:  CLRF   FF7
2B68:  MOVLW  00
2B6A:  MOVLB  0
2B6C:  CALL   035A
2B70:  TBLRD*-
2B72:  TBLRD*+
2B74:  MOVFF  FF5,FEE
2B78:  DECFSZ 01,F
2B7A:  BRA    2B72
2B7C:  MOVLB  1
2B7E:  BTFSC  x72.7
2B80:  BSF    FF2.7
2B82:  MOVLW  01
2B84:  MOVWF  xC4
2B86:  MOVLW  68
2B88:  MOVWF  xC3
2B8A:  MOVLB  0
2B8C:  CALL   0C88
....................       break; 
2B90:  BRA    2F42
....................  
.................... 	case 'A':							//command to choose automatic or manual power_level 
.................... 		idx = get_int(); 
2B92:  CALL   14C4
2B96:  MOVFF  01,13E
.................... 		if (idx <2) 
2B9A:  MOVLB  1
2B9C:  MOVF   x3E,W
2B9E:  SUBLW  01
2BA0:  BNC   2BB0
....................         { 
....................           if (idx) 
2BA2:  MOVF   x3E,F
2BA4:  BZ    2BAC
.................... 			auto_power = 1; 
2BA6:  MOVLW  01
2BA8:  MOVWF  x01
2BAA:  BRA    2BAE
.................... 		  else 
.................... 		  	auto_power = 0; 
2BAC:  CLRF   x01
.................... 		} 
2BAE:  BRA    2BEE
.................... 		else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2BB0:  MOVLW  01
2BB2:  MOVWF  FEA
2BB4:  MOVLW  68
2BB6:  MOVWF  FE9
2BB8:  MOVFF  FF2,172
2BBC:  BCF    FF2.7
2BBE:  MOVLW  0A
2BC0:  MOVWF  01
2BC2:  CLRF   FF7
2BC4:  MOVLW  00
2BC6:  MOVLB  0
2BC8:  CALL   035A
2BCC:  TBLRD*-
2BCE:  TBLRD*+
2BD0:  MOVFF  FF5,FEE
2BD4:  DECFSZ 01,F
2BD6:  BRA    2BCE
2BD8:  MOVLB  1
2BDA:  BTFSC  x72.7
2BDC:  BSF    FF2.7
2BDE:  MOVLW  01
2BE0:  MOVWF  xC4
2BE2:  MOVLW  68
2BE4:  MOVWF  xC3
2BE6:  MOVLB  0
2BE8:  CALL   0C88
2BEC:  MOVLB  1
.................... 		break; 
2BEE:  MOVLB  0
2BF0:  BRA    2F42
....................  
.................... 	 
....................     case 'S': 			// set tables 
....................       skip_spc(); 
2BF2:  CALL   1414
....................       idx = get_char(); // get table designator 
2BF6:  CALL   121C
2BFA:  MOVFF  01,13E
....................       addr = get_int(); // get table index 
2BFE:  CALL   14C4
2C02:  MOVFF  01,13F
....................       value = get_int(); // get value to put into table 
2C06:  CALL   14C4
2C0A:  MOVFF  02,145
2C0E:  MOVFF  01,144
....................       switch (toupper(idx)) 
2C12:  MOVLB  1
2C14:  MOVF   x3E,W
2C16:  SUBLW  60
2C18:  BC    2C26
2C1A:  MOVF   x3E,W
2C1C:  SUBLW  7A
2C1E:  BNC   2C26
2C20:  MOVF   x3E,W
2C22:  ANDLW  DF
2C24:  BRA    2C28
2C26:  MOVF   x3E,W
2C28:  XORLW  4E
2C2A:  MOVLB  0
2C2C:  BZ    2C44
2C2E:  XORLW  1E
2C30:  BZ    2CAA
2C32:  XORLW  02
2C34:  BZ    2D10
2C36:  XORLW  14
2C38:  BTFSC  FD8.2
2C3A:  BRA    2D8A
2C3C:  XORLW  10
2C3E:  BTFSC  FD8.2
2C40:  BRA    2E36
2C42:  BRA    2E46
....................         { 
....................         case 'N': // negative voltage 
....................                 if (addr <2 ) 
2C44:  MOVLB  1
2C46:  MOVF   x3F,W
2C48:  SUBLW  01
2C4A:  BNC   2C68
....................                     { 
....................                     setup.negative_voltage[addr] = value; 
2C4C:  BCF    FD8.0
2C4E:  RLCF   x3F,W
2C50:  CLRF   03
2C52:  ADDLW  AC
2C54:  MOVWF  FE9
2C56:  MOVLW  00
2C58:  ADDWFC 03,W
2C5A:  MOVWF  FEA
2C5C:  MOVFF  145,FEC
2C60:  MOVF   FED,F
2C62:  MOVFF  144,FEF
....................                   } 
2C66:  BRA    2CA6
....................                else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
2C68:  MOVLW  01
2C6A:  MOVWF  FEA
2C6C:  MOVLW  68
2C6E:  MOVWF  FE9
2C70:  MOVFF  FF2,172
2C74:  BCF    FF2.7
2C76:  MOVLW  0A
2C78:  MOVWF  01
2C7A:  CLRF   FF7
2C7C:  MOVLW  00
2C7E:  MOVLB  0
2C80:  CALL   035A
2C84:  TBLRD*-
2C86:  TBLRD*+
2C88:  MOVFF  FF5,FEE
2C8C:  DECFSZ 01,F
2C8E:  BRA    2C86
2C90:  MOVLB  1
2C92:  BTFSC  x72.7
2C94:  BSF    FF2.7
2C96:  MOVLW  01
2C98:  MOVWF  xC4
2C9A:  MOVLW  68
2C9C:  MOVWF  xC3
2C9E:  MOVLB  0
2CA0:  CALL   0C88
2CA4:  MOVLB  1
....................  
....................           break; 
2CA6:  MOVLB  0
2CA8:  BRA    2E46
....................         case 'P': // positive voltage 
....................              if (addr <4) 
2CAA:  MOVLB  1
2CAC:  MOVF   x3F,W
2CAE:  SUBLW  03
2CB0:  BNC   2CCE
....................               { 
....................               setup.power_in[addr] = value; 
2CB2:  BCF    FD8.0
2CB4:  RLCF   x3F,W
2CB6:  CLRF   03
2CB8:  ADDLW  B2
2CBA:  MOVWF  FE9
2CBC:  MOVLW  00
2CBE:  ADDWFC 03,W
2CC0:  MOVWF  FEA
2CC2:  MOVFF  145,FEC
2CC6:  MOVF   FED,F
2CC8:  MOVFF  144,FEF
....................               } 
2CCC:  BRA    2D0C
....................            else 
....................               COM1_send_str("\r\n$FAIL\r\n"); 
2CCE:  MOVLW  01
2CD0:  MOVWF  FEA
2CD2:  MOVLW  68
2CD4:  MOVWF  FE9
2CD6:  MOVFF  FF2,172
2CDA:  BCF    FF2.7
2CDC:  MOVLW  0A
2CDE:  MOVWF  01
2CE0:  CLRF   FF7
2CE2:  MOVLW  00
2CE4:  MOVLB  0
2CE6:  CALL   035A
2CEA:  TBLRD*-
2CEC:  TBLRD*+
2CEE:  MOVFF  FF5,FEE
2CF2:  DECFSZ 01,F
2CF4:  BRA    2CEC
2CF6:  MOVLB  1
2CF8:  BTFSC  x72.7
2CFA:  BSF    FF2.7
2CFC:  MOVLW  01
2CFE:  MOVWF  xC4
2D00:  MOVLW  68
2D02:  MOVWF  xC3
2D04:  MOVLB  0
2D06:  CALL   0C88
2D0A:  MOVLB  1
....................           break; 
2D0C:  MOVLB  0
2D0E:  BRA    2E46
....................  
....................         case 'R': // rev table 
....................          if (toupper(get_char()) == 'R') 
2D10:  CALL   121C
2D14:  MOVFF  02,173
2D18:  MOVFF  01,172
2D1C:  MOVLB  1
2D1E:  MOVF   x73,F
2D20:  BNZ   2D28
2D22:  MOVF   x72,W
2D24:  SUBLW  60
2D26:  BC    2D38
2D28:  MOVF   x73,F
2D2A:  BNZ   2D38
2D2C:  MOVF   x72,W
2D2E:  SUBLW  7A
2D30:  BNC   2D38
2D32:  MOVF   x72,W
2D34:  ANDLW  DF
2D36:  BRA    2D3A
2D38:  MOVF   x72,W
2D3A:  SUBLW  52
2D3C:  BNZ   2D48
....................          { 
....................             setup.reverse = value; 
2D3E:  MOVFF  145,BB
2D42:  MOVFF  144,BA
....................          } 
2D46:  BRA    2D86
....................          else 
....................             COM1_send_str("\r\n$FAIL\r\n"); 
2D48:  MOVLW  01
2D4A:  MOVWF  FEA
2D4C:  MOVLW  68
2D4E:  MOVWF  FE9
2D50:  MOVFF  FF2,172
2D54:  BCF    FF2.7
2D56:  MOVLW  0A
2D58:  MOVWF  01
2D5A:  CLRF   FF7
2D5C:  MOVLW  00
2D5E:  MOVLB  0
2D60:  CALL   035A
2D64:  TBLRD*-
2D66:  TBLRD*+
2D68:  MOVFF  FF5,FEE
2D6C:  DECFSZ 01,F
2D6E:  BRA    2D66
2D70:  MOVLB  1
2D72:  BTFSC  x72.7
2D74:  BSF    FF2.7
2D76:  MOVLW  01
2D78:  MOVWF  xC4
2D7A:  MOVLW  68
2D7C:  MOVWF  xC3
2D7E:  MOVLB  0
2D80:  CALL   0C88
2D84:  MOVLB  1
....................           break; 
2D86:  MOVLB  0
2D88:  BRA    2E46
....................  
....................         case 'F': // rssi table 
....................  
....................                if (addr < 10) 
2D8A:  MOVLB  1
2D8C:  MOVF   x3F,W
2D8E:  SUBLW  09
2D90:  BNC   2DF4
....................                  { 
....................                  setup.rssi_table[addr][0] = value; 
2D92:  MOVF   x3F,W
2D94:  MULLW  04
2D96:  MOVF   FF3,W
2D98:  CLRF   03
2D9A:  ADDLW  C2
2D9C:  MOVWF  FE9
2D9E:  MOVLW  00
2DA0:  ADDWFC 03,W
2DA2:  MOVWF  FEA
2DA4:  MOVFF  145,FEC
2DA8:  MOVF   FED,F
2DAA:  MOVFF  144,FEF
....................                  value = get_int(); 
2DAE:  MOVLB  0
2DB0:  CALL   14C4
2DB4:  MOVFF  02,145
2DB8:  MOVFF  01,144
....................                  setup.rssi_table[addr][1] = value; 
2DBC:  MOVLB  1
2DBE:  MOVF   x3F,W
2DC0:  MULLW  04
2DC2:  MOVF   FF3,W
2DC4:  CLRF   03
2DC6:  ADDLW  1B
2DC8:  MOVWF  x72
2DCA:  MOVLW  00
2DCC:  ADDWFC 03,W
2DCE:  MOVWF  x73
2DD0:  MOVLW  02
2DD2:  ADDWF  x72,W
2DD4:  MOVWF  01
2DD6:  MOVLW  00
2DD8:  ADDWFC x73,W
2DDA:  MOVWF  03
2DDC:  MOVF   01,W
2DDE:  ADDLW  A7
2DE0:  MOVWF  FE9
2DE2:  MOVLW  00
2DE4:  ADDWFC 03,W
2DE6:  MOVWF  FEA
2DE8:  MOVFF  145,FEC
2DEC:  MOVF   FED,F
2DEE:  MOVFF  144,FEF
....................                  } 
2DF2:  BRA    2E32
....................              else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
2DF4:  MOVLW  01
2DF6:  MOVWF  FEA
2DF8:  MOVLW  68
2DFA:  MOVWF  FE9
2DFC:  MOVFF  FF2,172
2E00:  BCF    FF2.7
2E02:  MOVLW  0A
2E04:  MOVWF  01
2E06:  CLRF   FF7
2E08:  MOVLW  00
2E0A:  MOVLB  0
2E0C:  CALL   035A
2E10:  TBLRD*-
2E12:  TBLRD*+
2E14:  MOVFF  FF5,FEE
2E18:  DECFSZ 01,F
2E1A:  BRA    2E12
2E1C:  MOVLB  1
2E1E:  BTFSC  x72.7
2E20:  BSF    FF2.7
2E22:  MOVLW  01
2E24:  MOVWF  xC4
2E26:  MOVLW  68
2E28:  MOVWF  xC3
2E2A:  MOVLB  0
2E2C:  CALL   0C88
2E30:  MOVLB  1
....................  
....................             break; 
2E32:  MOVLB  0
2E34:  BRA    2E46
....................  
....................         case 'V': // save parameters 
....................  
....................           allow_write = 2975; 
2E36:  MOVLW  0B
2E38:  MOVWF  xE7
2E3A:  MOVLW  9F
2E3C:  MOVWF  xE6
....................           write_setup(); 
2E3E:  CALL   1610
....................           update_all(); 
2E42:  CALL   0C2E
....................  
....................           break; 
....................         } 
....................       break; 
2E46:  BRA    2F42
....................  
....................     case '1': // year    
....................       year = get_int(); 
2E48:  CALL   14C4
2E4C:  MOVFF  02,147
2E50:  MOVFF  01,146
....................        if(year > 0 && year < 100)  
2E54:  MOVLB  1
2E56:  MOVF   x46,F
2E58:  BNZ   2E5E
2E5A:  MOVF   x47,F
2E5C:  BZ    2E72
2E5E:  MOVF   x47,F
2E60:  BNZ   2E72
2E62:  MOVF   x46,W
2E64:  SUBLW  63
2E66:  BNC   2E72
....................          { 
....................       setup.year = year; 
2E68:  MOVFF  147,BE
2E6C:  MOVFF  146,BD
....................       } 
2E70:  BRA    2EB0
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
2E72:  MOVLW  01
2E74:  MOVWF  FEA
2E76:  MOVLW  68
2E78:  MOVWF  FE9
2E7A:  MOVFF  FF2,172
2E7E:  BCF    FF2.7
2E80:  MOVLW  0A
2E82:  MOVWF  01
2E84:  CLRF   FF7
2E86:  MOVLW  00
2E88:  MOVLB  0
2E8A:  CALL   035A
2E8E:  TBLRD*-
2E90:  TBLRD*+
2E92:  MOVFF  FF5,FEE
2E96:  DECFSZ 01,F
2E98:  BRA    2E90
2E9A:  MOVLB  1
2E9C:  BTFSC  x72.7
2E9E:  BSF    FF2.7
2EA0:  MOVLW  01
2EA2:  MOVWF  xC4
2EA4:  MOVLW  68
2EA6:  MOVWF  xC3
2EA8:  MOVLB  0
2EAA:  CALL   0C88
2EAE:  MOVLB  1
....................     break; 
2EB0:  MOVLB  0
2EB2:  BRA    2F42
....................  
....................     case '2': // week 
....................       week = get_int(); 
2EB4:  CALL   14C4
2EB8:  MOVFF  02,149
2EBC:  MOVFF  01,148
....................       if(week > 0 && week < 58)  
2EC0:  MOVLB  1
2EC2:  MOVF   x48,F
2EC4:  BNZ   2ECA
2EC6:  MOVF   x49,F
2EC8:  BZ    2EDA
2ECA:  MOVF   x49,F
2ECC:  BNZ   2EDA
2ECE:  MOVF   x48,W
2ED0:  SUBLW  39
2ED2:  BNC   2EDA
....................       { 
....................       setup.week = week; 
2ED4:  MOVFF  148,BF
....................       }   
2ED8:  BRA    2F18
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
2EDA:  MOVLW  01
2EDC:  MOVWF  FEA
2EDE:  MOVLW  68
2EE0:  MOVWF  FE9
2EE2:  MOVFF  FF2,172
2EE6:  BCF    FF2.7
2EE8:  MOVLW  0A
2EEA:  MOVWF  01
2EEC:  CLRF   FF7
2EEE:  MOVLW  00
2EF0:  MOVLB  0
2EF2:  CALL   035A
2EF6:  TBLRD*-
2EF8:  TBLRD*+
2EFA:  MOVFF  FF5,FEE
2EFE:  DECFSZ 01,F
2F00:  BRA    2EF8
2F02:  MOVLB  1
2F04:  BTFSC  x72.7
2F06:  BSF    FF2.7
2F08:  MOVLW  01
2F0A:  MOVWF  xC4
2F0C:  MOVLW  68
2F0E:  MOVWF  xC3
2F10:  MOVLB  0
2F12:  CALL   0C88
2F16:  MOVLB  1
....................    break; 
2F18:  MOVLB  0
2F1A:  BRA    2F42
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
2F1C:  CALL   14C4
2F20:  MOVFF  02,C1
2F24:  MOVFF  01,C0
....................       break; 
2F28:  BRA    2F42
....................     case 'Q': 
....................       send_status(); 
2F2A:  GOTO   2046
....................       break; 
2F2E:  BRA    2F42
....................     default: 
....................       printf("\r\n$FAIL\r\n"); 
2F30:  MOVLW  C6
2F32:  MOVWF  FF6
2F34:  MOVLW  05
2F36:  MOVWF  FF7
2F38:  GOTO   252A
....................  
....................       return 0; 
2F3C:  MOVLW  00
2F3E:  MOVWF  01
2F40:  BRA    2F46
....................     } 
....................   return 0;     ///yehuda 3/6/18 was 0 
2F42:  MOVLW  00
2F44:  MOVWF  01
2F46:  GOTO   3014 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
2F4A:  MOVF   53,W
2F4C:  ADDLW  FC
2F4E:  BTFSC  FD8.0
2F50:  BRA    30E2
2F52:  ADDLW  04
2F54:  GOTO   30E6
....................     { 
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
2F58:  CLRF   54
....................       comm_state++; 
2F5A:  INCF   53,F
....................       break; 
2F5C:  BRA    30E2
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................     if (COM1_rcnt) 
2F5E:  MOVF   30,F
2F60:  BZ    2FC6
....................       { 
....................       chr = COM1_get_chr(); 
2F62:  CALL   11F0
2F66:  MOVLB  1
2F68:  CLRF   x1C
2F6A:  MOVFF  01,11B
....................       if (chr) 
2F6E:  MOVF   x1B,W
2F70:  IORWF  x1C,W
2F72:  BZ    2FC8
....................           if (chr == '$') 
2F74:  MOVF   x1B,W
2F76:  SUBLW  24
2F78:  BNZ   2F8A
2F7A:  MOVF   x1C,F
2F7C:  BNZ   2F8A
....................              { 
....................              comm_state++; 
2F7E:  INCF   53,F
....................              comm_timeout = 0; 
2F80:  MOVLB  0
2F82:  CLRF   xA6
2F84:  CLRF   xA5
....................              }    
2F86:  BRA    2FC6
2F88:  MOVLB  1
....................            else 
....................               COM1_send_str("\r\n$FAULT\r\n"); 
2F8A:  MOVLW  01
2F8C:  MOVWF  FEA
2F8E:  MOVLW  1F
2F90:  MOVWF  FE9
2F92:  MOVFF  FF2,13D
2F96:  BCF    FF2.7
2F98:  MOVLW  0B
2F9A:  MOVWF  01
2F9C:  CLRF   FF7
2F9E:  MOVLW  00
2FA0:  MOVLB  0
2FA2:  CALL   03A0
2FA6:  TBLRD*-
2FA8:  TBLRD*+
2FAA:  MOVFF  FF5,FEE
2FAE:  DECFSZ 01,F
2FB0:  BRA    2FA8
2FB2:  MOVLB  1
2FB4:  BTFSC  x3D.7
2FB6:  BSF    FF2.7
2FB8:  MOVLW  01
2FBA:  MOVWF  xC4
2FBC:  MOVLW  1F
2FBE:  MOVWF  xC3
2FC0:  MOVLB  0
2FC2:  CALL   0C88
2FC6:  MOVLB  1
....................       } 
....................       break; 
2FC8:  MOVLB  0
2FCA:  BRA    30E2
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
2FCC:  MOVF   30,F
2FCE:  BTFSC  FD8.2
2FD0:  BRA    30B4
....................         { 
....................         comm_timeout = 0; 
2FD2:  CLRF   xA6
2FD4:  CLRF   xA5
....................         chr = COM1_get_chr(); 
2FD6:  CALL   11F0
2FDA:  MOVLB  1
2FDC:  CLRF   x1C
2FDE:  MOVFF  01,11B
....................         comm_buf[comm_ridx++] = chr; 
2FE2:  MOVF   54,W
2FE4:  INCF   54,F
2FE6:  CLRF   03
2FE8:  ADDLW  55
2FEA:  MOVWF  FE9
2FEC:  MOVLW  00
2FEE:  ADDWFC 03,W
2FF0:  MOVWF  FEA
2FF2:  MOVFF  11B,FEF
....................         if (comm_ridx > 70) 
2FF6:  MOVF   54,W
2FF8:  SUBLW  46
2FFA:  BC    3004
....................           { 
....................           comm_state = 0; 
2FFC:  CLRF   53
....................           break; 
2FFE:  MOVLB  0
3000:  BRA    30E2
3002:  MOVLB  1
....................           } 
....................         if (chr == 13)				//<CR> 
3004:  MOVF   x1B,W
3006:  SUBLW  0D
3008:  BNZ   306C
300A:  MOVF   x1C,F
300C:  BNZ   306C
....................           { 
....................           ret = process_dollar_commands(); 
300E:  MOVLB  0
3010:  GOTO   254E
3014:  MOVLB  1
3016:  CLRF   x1E
3018:  MOVFF  01,11D
....................           if (ret != 255) 
301C:  INCFSZ x1D,W
301E:  BRA    3024
3020:  MOVF   x1E,F
3022:  BZ    3062
....................             COM1_send_str("\r\n$OK\r\n"); 
3024:  MOVLW  01
3026:  MOVWF  FEA
3028:  MOVLW  2A
302A:  MOVWF  FE9
302C:  MOVFF  FF2,13D
3030:  BCF    FF2.7
3032:  MOVLW  08
3034:  MOVWF  01
3036:  CLRF   FF7
3038:  MOVLW  00
303A:  MOVLB  0
303C:  CALL   03C6
3040:  TBLRD*-
3042:  TBLRD*+
3044:  MOVFF  FF5,FEE
3048:  DECFSZ 01,F
304A:  BRA    3042
304C:  MOVLB  1
304E:  BTFSC  x3D.7
3050:  BSF    FF2.7
3052:  MOVLW  01
3054:  MOVWF  xC4
3056:  MOVLW  2A
3058:  MOVWF  xC3
305A:  MOVLB  0
305C:  CALL   0C88
3060:  MOVLB  1
....................           COM1_init(); 
3062:  MOVLB  0
3064:  CALL   05F6
....................           } 
3068:  BRA    30B4
306A:  MOVLB  1
....................         else if (chr == 27)			//ESC 
306C:  MOVF   x1B,W
306E:  SUBLW  1B
3070:  BNZ   30B6
3072:  MOVF   x1C,F
3074:  BNZ   30B6
....................           { 
....................           COM1_send_str("\r\n$BREAK\r\n"); 
3076:  MOVLW  01
3078:  MOVWF  FEA
307A:  MOVLW  32
307C:  MOVWF  FE9
307E:  MOVFF  FF2,13D
3082:  BCF    FF2.7
3084:  MOVLW  0B
3086:  MOVWF  01
3088:  CLRF   FF7
308A:  MOVLW  00
308C:  MOVLB  0
308E:  CALL   03E8
3092:  TBLRD*-
3094:  TBLRD*+
3096:  MOVFF  FF5,FEE
309A:  DECFSZ 01,F
309C:  BRA    3094
309E:  MOVLB  1
30A0:  BTFSC  x3D.7
30A2:  BSF    FF2.7
30A4:  MOVLW  01
30A6:  MOVWF  xC4
30A8:  MOVLW  32
30AA:  MOVWF  xC3
30AC:  MOVLB  0
30AE:  CALL   0C88
....................           comm_state = 0; 
30B2:  CLRF   53
30B4:  MOVLB  1
....................           } 
....................         } 
....................           
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
30B6:  MOVF   53,W
30B8:  SUBLW  01
30BA:  BC    30DE
....................         if (TMR_100MS_COMM_TO) 
30BC:  BTFSS  20.1
30BE:  BRA    30DE
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
30C0:  BCF    20.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
30C2:  MOVLB  0
30C4:  INCF   xA5,F
30C6:  BTFSC  FD8.2
30C8:  INCF   xA6,F
30CA:  MOVF   xA6,W
30CC:  SUBLW  26
30CE:  BC    30DC
30D0:  XORLW  FF
30D2:  BNZ   30DA
30D4:  MOVF   xA5,W
30D6:  SUBLW  10
30D8:  BC    30DC
....................             comm_state = 0; 
30DA:  CLRF   53
30DC:  MOVLB  1
....................           } 
....................       break; 
30DE:  MOVLB  0
30E0:  BRA    30E2
....................     case COMM_DELAY: 
....................       break; 
....................     } 
30E2:  GOTO   3118 (RETURN)
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... void clear_comm_errors(void) 
....................   { 
....................   UCHAR chr; 
....................   if (OERR) 
*
11CA:  BTFSS  FAB.1
11CC:  BRA    11E2
....................     { 
....................     OERR = 0; 
11CE:  BCF    FAB.1
....................     CREN = 0; 
11D0:  BCF    FAB.4
....................     delay_us(5); 
11D2:  CLRWDT
11D4:  MOVLW  05
11D6:  MOVWF  00
11D8:  DECFSZ 00,F
11DA:  BRA    11D8
11DC:  BRA    11DE
11DE:  NOP   
....................     CREN = 1; 
11E0:  BSF    FAB.4
....................     } 
....................   if (FERR) 
11E2:  BTFSS  FAB.2
11E4:  BRA    11EC
....................     { 
....................     FERR = 0; 
11E6:  BCF    FAB.2
....................     chr = RCREG1; 
11E8:  MOVFF  FAE,11B
....................     } 
11EC:  GOTO   3116 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   clear_comm_errors(); 
*
3112:  GOTO   11CA
....................   dollar_handler(); 
3116:  BRA    2F4A
3118:  GOTO   32A8 (RETURN)
....................   } 
....................  
....................  
....................  
....................  
.................... //========== functions ======================================================== 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
05D0:  CLRF   F89
....................   output_b(0); 
05D2:  CLRF   F8A
....................   output_c(0); 
05D4:  CLRF   F8B
....................   output_d(0); 
05D6:  CLRF   F8C
....................   output_e(0); 
05D8:  CLRF   F8D
....................   set_tris_a(0b11000001); 
05DA:  MOVLW  C1
05DC:  MOVWF  F92
....................   set_tris_b(0b11000100); 
05DE:  MOVLW  C4
05E0:  MOVWF  F93
....................   set_tris_c(0b10000001); 
05E2:  MOVLW  81
05E4:  MOVWF  F94
....................   set_tris_d(0b10000000); 
05E6:  MOVLW  80
05E8:  MOVWF  F95
....................   set_tris_e(0b11111111); 
05EA:  BSF    F96.0
05EC:  BSF    F96.1
05EE:  BSF    F96.2
05F0:  BSF    F96.3
05F2:  GOTO   0630 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
15A0:  MOVLB  1
15A2:  MOVFF  177,03
15A6:  MOVF   x76,W
15A8:  BTFSC  FD8.2
15AA:  DECF   x77,F
15AC:  DECF   x76,F
15AE:  IORWF  03,W
15B0:  BZ    160A
....................     write_eeprom(addr++, *data++); 
15B2:  MOVF   x73,W
15B4:  MOVWF  03
15B6:  MOVF   x72,W
15B8:  INCF   x72,F
15BA:  BTFSC  FD8.2
15BC:  INCF   x73,F
15BE:  MOVWF  x78
15C0:  MOVFF  03,179
15C4:  MOVF   x75,W
15C6:  MOVWF  03
15C8:  MOVF   x74,W
15CA:  INCF   x74,F
15CC:  BTFSC  FD8.2
15CE:  INCF   x75,F
15D0:  MOVWF  FE9
15D2:  MOVFF  03,FEA
15D6:  MOVFF  FEF,17A
15DA:  MOVF   FF2,W
15DC:  MOVWF  00
15DE:  BCF    FF2.7
15E0:  MOVFF  178,FA9
15E4:  MOVFF  17A,FA8
15E8:  BCF    FA6.6
15EA:  BCF    FA6.7
15EC:  BSF    FA6.2
15EE:  MOVLB  F
15F0:  MOVLW  55
15F2:  MOVWF  FA7
15F4:  MOVLW  AA
15F6:  MOVWF  FA7
15F8:  BSF    FA6.1
15FA:  BTFSC  FA6.1
15FC:  BRA    15FA
15FE:  BCF    FA6.2
1600:  MOVF   00,W
1602:  IORWF  FF2,F
1604:  MOVLB  0
1606:  BRA    15A0
1608:  MOVLB  1
160A:  MOVLB  0
160C:  GOTO   1632 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
066E:  MOVLB  1
0670:  MOVFF  120,03
0674:  MOVF   x1F,W
0676:  BTFSC  FD8.2
0678:  DECF   x20,F
067A:  DECF   x1F,F
067C:  IORWF  03,W
067E:  BZ    06BE
....................     *data++ = read_eeprom(addr++); 
0680:  MOVF   x1E,W
0682:  MOVWF  03
0684:  MOVF   x1D,W
0686:  INCF   x1D,F
0688:  BTFSC  FD8.2
068A:  INCF   x1E,F
068C:  MOVWF  FE9
068E:  MOVFF  03,FEA
0692:  MOVF   x1C,W
0694:  MOVWF  03
0696:  MOVF   x1B,W
0698:  INCF   x1B,F
069A:  BTFSC  FD8.2
069C:  INCF   x1C,F
069E:  MOVWF  x23
06A0:  MOVFF  03,124
06A4:  MOVFF  FF2,125
06A8:  BCF    FF2.7
06AA:  MOVFF  123,FA9
06AE:  BCF    FA6.6
06B0:  BCF    FA6.7
06B2:  BSF    FA6.0
06B4:  MOVF   FA8,W
06B6:  BTFSC  x25.7
06B8:  BSF    FF2.7
06BA:  MOVWF  FEF
06BC:  BRA    0670
06BE:  MOVLB  0
06C0:  GOTO   06F6 (RETURN)
....................   } 
....................  
.................... //============================================================================== 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
1610:  MOVF   xE6,W
1612:  SUBLW  9F
1614:  BNZ   1632
1616:  MOVF   xE7,W
1618:  SUBLW  0B
161A:  BNZ   1632
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
161C:  MOVLB  1
161E:  CLRF   x73
1620:  CLRF   x72
1622:  CLRF   x75
1624:  MOVLW  A7
1626:  MOVWF  x74
1628:  CLRF   x77
162A:  MOVLW  3F
162C:  MOVWF  x76
162E:  MOVLB  0
1630:  BRA    15A0
....................   allow_write = 0; 
1632:  CLRF   xE7
1634:  CLRF   xE6
1636:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
06E0:  MOVLB  1
06E2:  CLRF   x1C
06E4:  CLRF   x1B
06E6:  CLRF   x1E
06E8:  MOVLW  A7
06EA:  MOVWF  x1D
06EC:  CLRF   x20
06EE:  MOVLW  3F
06F0:  MOVWF  x1F
06F2:  MOVLB  0
06F4:  BRA    066E
....................   if (setup.frequency == 0xFFFF || setup.power_level == 0xFF) 
06F6:  INCFSZ xA8,W
06F8:  BRA    0700
06FA:  INCFSZ xA9,W
06FC:  BRA    0700
06FE:  BRA    0708
0700:  INCFSZ xAA,W
0702:  BRA    0718
0704:  MOVF   xAB,F
0706:  BNZ   0718
....................     memset(&setup, 0, sizeof(setup)); 
0708:  CLRF   FEA
070A:  MOVLW  A7
070C:  MOVWF  FE9
070E:  CLRF   00
0710:  CLRF   02
0712:  MOVLW  3F
0714:  MOVWF  01
0716:  BRA    06C4
0718:  GOTO   31A0 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void power_output(void) 
....................   { 
....................   UINT power; 
....................  
.................... //  if (input(STANDBY)) 
.................... //    { 
.................... //    if (pwr_command) 
.................... //      output_high(POWER_EN); 
.................... //    else 
.................... //      output_low(POWER_EN); 
.................... 	if(pa_command) 
*
100C:  MOVF   xFE,F
100E:  BZ    1014
.................... 	{ 
.................... 		output_high(LNA_EN); 
1010:  BSF    F8C.2
.................... 	} 
1012:  BRA    1016
.................... 	else 
.................... 	{ 
.................... 		output_low(LNA_EN); 
1014:  BCF    F8C.2
.................... 	} 
....................     //set_adc_channel(A2D_VGMON); // select forward power input 
.................... //	set_adc_channel(PWR_IN); // select forward power input 
.................... //    delay_us(20); 
.................... //    power = read_adc(); 
.................... //    if (power > VGMON_THRESHOLD) 
.................... //      output_low(PA_ON); 
.................... //    else if (pa_command) 
.................... //      output_high(PA_ON); 
.................... //    else 
.................... //      output_low(PA_ON); 
.................... //   } 
.................... //  else 
.................... //    { 
.................... //    output_low(POWER_EN); 
.................... //    output_low(PA_ON); 
.................... //    } 
....................  
....................   if (setup.power_level) 
1016:  MOVF   xAA,W
1018:  IORWF  xAB,W
101A:  BZ    1030
....................     { 
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[1]); 
101C:  MOVLW  01
101E:  MOVLB  1
1020:  MOVWF  x1D
1022:  MOVFF  AF,11F
1026:  MOVFF  AE,11E
102A:  MOVLB  0
102C:  RCALL  0D1C
....................     } 
102E:  BRA    1042
....................   else 
....................     { 
....................     set_AD5312(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1030:  MOVLW  01
1032:  MOVLB  1
1034:  MOVWF  x1D
1036:  MOVFF  AD,11F
103A:  MOVFF  AC,11E
103E:  MOVLB  0
1040:  RCALL  0D1C
....................     } 
....................  
....................   	set_adc_channel(A2D_PWR_IN); // select PWR_IN power input 
1042:  MOVLW  1C
1044:  MOVWF  01
1046:  MOVF   FC2,W
1048:  ANDLW  83
104A:  IORWF  01,W
104C:  MOVWF  FC2
....................     delay_us(20); 
104E:  CLRWDT
1050:  MOVLW  19
1052:  MOVWF  00
1054:  DECFSZ 00,F
1056:  BRA    1054
1058:  BRA    105A
105A:  NOP   
....................     power = read_adc(); 
105C:  BSF    FC2.1
105E:  BTFSC  FC2.1
1060:  BRA    105E
1062:  MOVFF  FC4,11C
1066:  MOVLB  1
1068:  MOVFF  FC3,11B
.................... 	if(power > PWR_IN_TRESHOLD) 
106C:  MOVF   x1C,F
106E:  BNZ   1076
1070:  MOVF   x1B,W
1072:  SUBLW  64
1074:  BC    107C
.................... 		{ 
.................... 		output_high(VC1); 
1076:  BSF    F8C.0
.................... 		output_low(VC2); 
1078:  BCF    F8C.1
.................... 		} 
107A:  BRA    1080
.................... 		else 
.................... 		{ 
.................... 		output_low(VC1); 
107C:  BCF    F8C.0
.................... 		output_high(VC2); 
107E:  BSF    F8C.1
.................... 		} 
....................  
.................... 	if(auto_power) 
1080:  MOVF   x01,F
1082:  BZ    10A2
.................... 	{ 
.................... 		if(power > PWR_IN_TRESHOLD) 
1084:  MOVF   x1C,F
1086:  BNZ   108E
1088:  MOVF   x1B,W
108A:  SUBLW  64
108C:  BC    109A
.................... 			setup.power_level = 1; 
108E:  MOVLB  0
1090:  CLRF   xAB
1092:  MOVLW  01
1094:  MOVWF  xAA
1096:  BRA    10A0
1098:  MOVLB  1
.................... 		else 
.................... 			setup.power_level = 0; 
109A:  MOVLB  0
109C:  CLRF   xAB
109E:  CLRF   xAA
10A0:  MOVLB  1
.................... 	} 
....................  
....................   
....................   if (TMR_100MS_POWER) 
10A2:  BTFSS  20.3
10A4:  BRA    11C4
....................     { 
....................     TMR_100MS_POWER = 0; 
10A6:  BCF    20.3
....................     set_adc_channel(A2D_PREV); // select RSSI power input 
10A8:  MOVLW  14
10AA:  MOVWF  01
10AC:  MOVF   FC2,W
10AE:  ANDLW  83
10B0:  IORWF  01,W
10B2:  MOVWF  FC2
....................     delay_us(20); 
10B4:  CLRWDT
10B6:  MOVLW  19
10B8:  MOVWF  00
10BA:  DECFSZ 00,F
10BC:  BRA    10BA
10BE:  BRA    10C0
10C0:  NOP   
....................     power = read_adc(); 
10C2:  BSF    FC2.1
10C4:  BTFSC  FC2.1
10C6:  BRA    10C4
10C8:  MOVFF  FC3,11B
10CC:  MOVFF  FC4,11C
....................     power_avg[pavgx] = power; 
10D0:  BCF    FD8.0
10D2:  RLCF   2C,W
10D4:  MOVWF  02
10D6:  RLCF   2D,W
10D8:  MOVWF  03
10DA:  MOVF   02,W
10DC:  ADDLW  24
10DE:  MOVWF  FE9
10E0:  MOVLW  00
10E2:  ADDWFC 03,W
10E4:  MOVWF  FEA
10E6:  MOVFF  11C,FEC
10EA:  MOVF   FED,F
10EC:  MOVFF  11B,FEF
....................     if (++pavgx > 3) 
10F0:  INCF   2C,F
10F2:  BTFSC  FD8.2
10F4:  INCF   2D,F
10F6:  MOVF   2D,F
10F8:  BNZ   1100
10FA:  MOVF   2C,W
10FC:  SUBLW  03
10FE:  BC    1104
....................       pavgx = 0; 
1100:  CLRF   2D
1102:  CLRF   2C
....................     power = (power_avg[0] + power_avg[1] + power_avg[2] + power_avg[3]) / 4; 
1104:  MOVF   26,W
1106:  ADDWF  24,W
1108:  MOVWF  x1D
110A:  MOVF   27,W
110C:  ADDWFC 25,W
110E:  MOVWF  x1E
1110:  MOVF   28,W
1112:  ADDWF  x1D,F
1114:  MOVF   29,W
1116:  ADDWFC x1E,F
1118:  MOVF   2A,W
111A:  ADDWF  x1D,F
111C:  MOVF   2B,W
111E:  ADDWFC x1E,F
1120:  RRCF   x1E,W
1122:  MOVWF  x1C
1124:  RRCF   x1D,W
1126:  MOVWF  x1B
1128:  RRCF   x1C,F
112A:  RRCF   x1B,F
112C:  MOVLW  3F
112E:  ANDWF  x1C,F
....................     if (power < setup.rssi_table[0][0]) 
1130:  MOVF   x1C,W
1132:  MOVLB  0
1134:  SUBWF  xC3,W
1136:  BNC   115A
1138:  BNZ   114A
113A:  MOVF   xC2,W
113C:  MOVLB  1
113E:  SUBWF  x1B,W
1140:  BTFSS  FD8.0
1142:  BRA    1148
1144:  MOVLB  0
1146:  BRA    115A
1148:  MOVLB  0
....................       set_AD5312(DAC_POS_VOLT, METER_OUTPUT1); 
114A:  MOVLB  1
114C:  CLRF   x1D
114E:  CLRF   x1F
1150:  MOVLW  01
1152:  MOVWF  x1E
1154:  MOVLB  0
1156:  RCALL  0D1C
1158:  BRA    11C2
....................     else if (power < setup.rssi_table[4][0]) 
115A:  MOVLB  1
115C:  MOVF   x1C,W
115E:  MOVLB  0
1160:  SUBWF  xD3,W
1162:  BNC   1186
1164:  BNZ   1176
1166:  MOVF   xD2,W
1168:  MOVLB  1
116A:  SUBWF  x1B,W
116C:  BTFSS  FD8.0
116E:  BRA    1174
1170:  MOVLB  0
1172:  BRA    1186
1174:  MOVLB  0
....................       set_AD5312(DAC_POS_VOLT, METER_OUTPUT2); 
1176:  MOVLB  1
1178:  CLRF   x1D
117A:  CLRF   x1F
117C:  MOVLW  05
117E:  MOVWF  x1E
1180:  MOVLB  0
1182:  RCALL  0D1C
1184:  BRA    11C2
....................     else if (power < setup.rssi_table[8][0]) 
1186:  MOVLB  1
1188:  MOVF   x1C,W
118A:  MOVLB  0
118C:  SUBWF  xE3,W
118E:  BNC   11B2
1190:  BNZ   11A2
1192:  MOVF   xE2,W
1194:  MOVLB  1
1196:  SUBWF  x1B,W
1198:  BTFSS  FD8.0
119A:  BRA    11A0
119C:  MOVLB  0
119E:  BRA    11B2
11A0:  MOVLB  0
....................       set_AD5312(DAC_POS_VOLT, METER_OUTPUT3); 
11A2:  MOVLB  1
11A4:  CLRF   x1D
11A6:  CLRF   x1F
11A8:  MOVLW  30
11AA:  MOVWF  x1E
11AC:  MOVLB  0
11AE:  RCALL  0D1C
11B0:  BRA    11C2
....................     else 
....................       set_AD5312(DAC_POS_VOLT, METER_OUTPUT4); 
11B2:  MOVLB  1
11B4:  CLRF   x1D
11B6:  MOVLW  01
11B8:  MOVWF  x1F
11BA:  MOVLW  E1
11BC:  MOVWF  x1E
11BE:  MOVLB  0
11C0:  RCALL  0D1C
11C2:  MOVLB  1
....................     } 
11C4:  MOVLB  0
11C6:  GOTO   32A6 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0606:  MOVLW  48
0608:  IORLW  05
060A:  MOVWF  FBA
060C:  MOVLW  63
060E:  MOVWF  FBB
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0610:  CLRF   FB4
0612:  CLRF   FB1
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0614:  MOVLW  00
0616:  IORLW  05
0618:  MOVLB  F
061A:  MOVWF  x51
061C:  MOVLW  63
061E:  MOVWF  x52
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0620:  CLRF   x4D
0622:  CLRF   x4E
....................   setup_timer_6(T6_DISABLED,0,1); 
0624:  MOVLW  00
0626:  MOVWF  x4A
0628:  MOVLW  00
062A:  MOVWF  x4B
....................  
....................   init_io_ports(); 
062C:  MOVLB  0
062E:  BRA    05D0
....................  
....................   //setup_ccp5(CCP_OFF); 
.................... //				  3p3  RSSI TMP  PWR_IN 28v 
....................   setup_adc_ports(sAN0|sAN5|sAN6|sAN7|sAN8); 
0630:  MOVF   FC1,W
0632:  ANDLW  F0
0634:  MOVWF  FC1
0636:  MOVLW  01
0638:  MOVLB  F
063A:  MOVWF  x38
063C:  MOVLW  07
063E:  MOVWF  x3C
0640:  MOVLW  04
0642:  MOVWF  x39
0644:  MOVLW  00
0646:  MOVWF  x3A
0648:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
064A:  MOVF   FC0,W
064C:  ANDLW  C0
064E:  IORLW  25
0650:  MOVWF  FC0
0652:  BSF    FC0.7
0654:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0656:  CLRF   F77
0658:  MOVLW  04
065A:  MOVWF  F78
065C:  MOVWF  F79
....................  
....................   COM1_init(); 
065E:  MOVLB  0
0660:  RCALL  05F6
....................   disable_interrupts(INT_RDA2);  
0662:  BCF    FA3.5
....................   enable_interrupts(INT_TIMER2); 
0664:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0666:  MOVLW  C0
0668:  IORWF  FF2,F
066A:  GOTO   319C (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq; 
....................   freq = setup.frequency; 
*
0C2E:  MOVFF  A9,173
0C32:  MOVFF  A8,172
....................   PLL_compute_freq_parameters(freq * 10); 
0C36:  MOVFF  173,175
0C3A:  MOVFF  172,174
0C3E:  MOVLB  1
0C40:  CLRF   x77
0C42:  MOVLW  0A
0C44:  MOVWF  x76
0C46:  MOVLB  0
0C48:  BRA    0896
0C4A:  MOVFF  02,175
0C4E:  MOVFF  01,174
0C52:  MOVFF  02,177
0C56:  MOVFF  01,176
0C5A:  RCALL  09A8
....................   PLL_update(); 
0C5C:  RCALL  0B3E
....................   power_control = 1000; 
0C5E:  MOVLW  03
0C60:  MOVWF  19
0C62:  MOVLW  E8
0C64:  MOVWF  18
0C66:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
....................  
.................... void check_bit_mode(void) 
....................   { 
....................  
.................... 	if(TMR_1Sec_BIT_EN) 
*
0FE6:  BTFSS  22.3
0FE8:  BRA    1006
.................... 		{ 
.................... 			TMR_1Sec_BIT_EN = 0; 
0FEA:  BCF    22.3
.................... 			count_1sec++; 
0FEC:  MOVLB  1
0FEE:  INCF   x02,F
0FF0:  BTFSC  FD8.2
0FF2:  INCF   x03,F
.................... 			if(count_1sec >= 11) 
0FF4:  MOVF   x03,F
0FF6:  BNZ   0FFE
0FF8:  MOVF   x02,W
0FFA:  SUBLW  0A
0FFC:  BC    1006
.................... 			{	 
.................... 				count_1sec = 0; 
0FFE:  CLRF   x03
1000:  CLRF   x02
.................... 				output_low(BIT_MODE_EN); 
1002:  BCF    F8C.3
....................   				bit_mode = 0; 
1004:  CLRF   x00
1006:  MOVLB  0
.................... 				 
.................... 			} 
.................... 		} 
1008:  GOTO   329E (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void main(void) 
*
311C:  CLRF   FF8
311E:  BCF    FD0.7
3120:  BSF    07.7
3122:  MOVLW  70
3124:  MOVWF  FD3
3126:  BCF    F9B.6
3128:  BCF    F9B.7
312A:  BCF    FB8.3
312C:  MOVLW  19
312E:  MOVWF  FAF
3130:  MOVLW  A6
3132:  MOVWF  FAC
3134:  MOVLW  90
3136:  MOVWF  FAB
3138:  BCF    F70.3
313A:  MOVLW  19
313C:  MOVWF  F75
313E:  MOVLW  A6
3140:  MOVWF  F72
3142:  MOVLW  90
3144:  MOVWF  F71
3146:  CLRF   2D
3148:  CLRF   2C
314A:  CLRF   2F
314C:  CLRF   2E
314E:  CLRF   xE7
3150:  CLRF   xE6
3152:  MOVLW  01
3154:  MOVWF  xFD
3156:  MOVFF  A7,FE
315A:  MOVWF  xFF
315C:  MOVLB  1
315E:  CLRF   x00
3160:  CLRF   x01
3162:  CLRF   x03
3164:  CLRF   x02
3166:  CLRF   x08
3168:  CLRF   x07
316A:  MOVF   FC1,W
316C:  ANDLW  F0
316E:  MOVWF  FC1
3170:  MOVLW  00
3172:  MOVLB  F
3174:  MOVWF  x38
3176:  MOVWF  x3C
3178:  MOVWF  x39
317A:  MOVWF  x3A
317C:  MOVWF  x3B
317E:  MOVLB  1
3180:  CLRF   x88
3182:  CLRF   F77
3184:  CLRF   F78
3186:  CLRF   F79
3188:  MOVLW  03
318A:  MOVWF  x0A
318C:  MOVLW  E8
318E:  MOVWF  x09
3190:  CLRF   x0C
3192:  MOVLW  01
3194:  MOVWF  x0B
....................   { 
....................   int16 vouta =1000, five = 1; 
....................   init_system(); 
3196:  MOVLB  0
3198:  GOTO   0606
....................    
....................   read_setup(); 
319C:  GOTO   06E0
....................  
....................   power_level = setup.power_in[setup.power_level]; 
31A0:  BCF    FD8.0
31A2:  RLCF   xAA,W
31A4:  MOVWF  02
31A6:  RLCF   xAB,W
31A8:  MOVWF  03
31AA:  MOVF   02,W
31AC:  ADDLW  B2
31AE:  MOVWF  FE9
31B0:  MOVLW  00
31B2:  ADDWFC 03,W
31B4:  MOVWF  FEA
31B6:  MOVFF  FEC,17
31BA:  MOVF   FED,F
31BC:  MOVFF  FEF,16
....................   power_control = 10; 
31C0:  CLRF   19
31C2:  MOVLW  0A
31C4:  MOVWF  18
....................  
....................   PLL_initialize(); 
31C6:  GOTO   07F4
....................  
....................   update_all(); 
31CA:  CALL   0C2E
....................  
....................   COM1_send_str("\r\n"); 
31CE:  MOVLW  0D
31D0:  MOVLB  1
31D2:  MOVWF  x0D
31D4:  MOVLW  0A
31D6:  MOVWF  x0E
31D8:  CLRF   x0F
31DA:  MOVLW  01
31DC:  MOVWF  xC4
31DE:  MOVLW  0D
31E0:  MOVWF  xC3
31E2:  MOVLB  0
31E4:  CALL   0C88
....................   COM1_send_str(VERSION); 
31E8:  MOVLW  01
31EA:  MOVWF  FEA
31EC:  MOVLW  0D
31EE:  MOVWF  FE9
31F0:  MOVFF  FF2,11B
31F4:  BCF    FF2.7
31F6:  MOVLW  0E
31F8:  MOVWF  01
31FA:  CLRF   FF7
31FC:  MOVLW  00
31FE:  CALL   040E
3202:  TBLRD*-
3204:  TBLRD*+
3206:  MOVFF  FF5,FEE
320A:  DECFSZ 01,F
320C:  BRA    3204
320E:  MOVLB  1
3210:  BTFSC  x1B.7
3212:  BSF    FF2.7
3214:  MOVLW  01
3216:  MOVWF  xC4
3218:  MOVLW  0D
321A:  MOVWF  xC3
321C:  MOVLB  0
321E:  CALL   0C88
....................   COM1_send_str("\r\n"); 
3222:  MOVLW  0D
3224:  MOVLB  1
3226:  MOVWF  x0D
3228:  MOVLW  0A
322A:  MOVWF  x0E
322C:  CLRF   x0F
322E:  MOVLW  01
3230:  MOVWF  xC4
3232:  MOVLW  0D
3234:  MOVWF  xC3
3236:  MOVLB  0
3238:  CALL   0C88
....................  
....................   set_AD5312(DAC_POS_VOLT, vouta); 
323C:  MOVLB  1
323E:  CLRF   x1D
3240:  MOVFF  10A,11F
3244:  MOVFF  109,11E
3248:  MOVLB  0
324A:  CALL   0D1C
....................   delay_ms(10); 
324E:  MOVLW  0A
3250:  MOVLB  1
3252:  MOVWF  x21
3254:  MOVLB  0
3256:  CALL   07C4
....................   output_low(BIT_MODE_EN); 
325A:  BCF    F8C.3
....................   bit_mode = 0; 
325C:  MOVLB  1
325E:  CLRF   x00
....................   output_high(VC1); 
3260:  BSF    F8C.0
....................   output_low(VC2); 
3262:  BCF    F8C.1
....................   output_high(LNA_EN); 
3264:  BSF    F8C.2
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     if (TMR_100mS_BLINK) 
3266:  BTFSS  20.0
3268:  BRA    3294
....................       { 
....................       TMR_100mS_BLINK = 0; 
326A:  BCF    20.0
.................... 	  if(five) 
326C:  MOVF   x0B,W
326E:  IORWF  x0C,W
3270:  BZ    327E
.................... 	  { 
.................... 	  five = 0; 
3272:  CLRF   x0C
3274:  CLRF   x0B
.................... 	  update_all(); 
3276:  MOVLB  0
3278:  CALL   0C2E
327C:  MOVLB  1
....................       } 
....................       if (setup.power_level)		//$p power mode high 
327E:  MOVLB  0
3280:  MOVF   xAA,W
3282:  IORWF  xAB,W
3284:  BZ    328A
....................         output_high(LED1); 
3286:  BSF    F8A.4
3288:  BRA    328C
....................       else 
....................         output_toggle(LED1);		//$p power mode low 
328A:  BTG    F8A.4
....................       delay_us(1); 
328C:  CLRWDT
328E:  BRA    3290
3290:  NOP   
3292:  MOVLB  1
....................       } 
....................  
.................... 	if(bit_mode == 1) 
3294:  DECFSZ x00,W
3296:  BRA    32A0
.................... 		check_bit_mode(); 
3298:  MOVLB  0
329A:  GOTO   0FE6
329E:  MOVLB  1
....................  
....................     power_output(); 
32A0:  MOVLB  0
32A2:  GOTO   100C
....................     comm_handler(); 
32A6:  BRA    3112
32A8:  MOVLB  1
32AA:  BRA    3266
....................     } 
....................  
....................   vouta = 1; 
32AC:  CLRF   x0A
32AE:  MOVLW  01
32B0:  MOVWF  x09
....................   } 
....................  
32B2:  BRA    32B2
....................  
....................  

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
