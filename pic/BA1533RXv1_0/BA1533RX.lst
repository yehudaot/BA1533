CCS PCH C Compiler, Version 5.008, 5967               04-Jul-18 15:56

               Filename:   C:\BA\Software_projects\PIC\1533\BA_1533\BA1533RXv1_0\BA1533RX.lst

               ROM used:   14440 bytes (44%)
                           Largest free fragment is 18324
               RAM used:   274 (18%) at main() level
                           458 (30%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   36F8
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.1
004A:  GOTO   0054
004E:  BTFSC  F9E.1
0050:  GOTO   043C
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   046C
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0472
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0478
0078:  BTFSS  FA3.5
007A:  GOTO   0084
007E:  BTFSC  FA4.5
0080:  GOTO   04A6
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   0436
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <BA1533RX.h> 
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  EC
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSC  0D.7
00E8:  BSF    FF2.7
00EA:  RETURN 0
00EC:  DATA 00,00
00EE:  DATA DC,00
00F0:  DATA 91,81
00F2:  DATA 00,08
00F4:  DATA C2,5E
00F6:  DATA 00,18
00F8:  DATA B3,04
00FA:  DATA 00,00
00FC:  DATA 3C,00
00FE:  DATA 95,00
0100:  DATA 00,00
0102:  DATA 40,00
0104:  MOVFF  FF2,0D
0108:  BCF    FF2.7
010A:  CLRF   FF7
010C:  ADDLW  1E
010E:  MOVWF  FF6
0110:  MOVLW  01
0112:  ADDWFC FF7,F
0114:  TBLRD*+
0116:  MOVF   FF5,W
0118:  BTFSC  0D.7
011A:  BSF    FF2.7
011C:  RETURN 0
011E:  DATA 24,46
0120:  DATA 20,3C
0122:  DATA 66,72
0124:  DATA 65,71
0126:  DATA 75,65
0128:  DATA 6E,63
012A:  DATA 79,3E
012C:  DATA 3C,63
012E:  DATA 72,3E
0130:  DATA 20,20
0132:  DATA 09,53
0134:  DATA 65,74
0136:  DATA 20,66
0138:  DATA 72,65
013A:  DATA 71,75
013C:  DATA 65,6E
013E:  DATA 63,79
0140:  DATA 20,69
0142:  DATA 6E,20
0144:  DATA 31,4D
0146:  DATA 48,7A
0148:  DATA 20,69
014A:  DATA 6E,63
014C:  DATA 72,65
014E:  DATA 6D,65
0150:  DATA 6E,74
0152:  DATA 73,20
0154:  DATA 28,69
0156:  DATA 2E,65
0158:  DATA 2E,35
015A:  DATA 31,37
015C:  DATA 33,20
015E:  DATA 69,73
0160:  DATA 20,35
0162:  DATA 2E,31
0164:  DATA 37,33
0166:  DATA 47,48
0168:  DATA 7A,29
016A:  DATA 0D,0A
016C:  DATA 00,00
016E:  MOVFF  FF2,0D
0172:  BCF    FF2.7
0174:  CLRF   FF7
0176:  ADDLW  88
0178:  MOVWF  FF6
017A:  MOVLW  01
017C:  ADDWFC FF7,F
017E:  TBLRD*+
0180:  MOVF   FF5,W
0182:  BTFSC  0D.7
0184:  BSF    FF2.7
0186:  RETURN 0
0188:  DATA 24,4F
018A:  DATA 4E,20
018C:  DATA 3C,6F
018E:  DATA 6E,6F
0190:  DATA 66,66
0192:  DATA 3E,3C
0194:  DATA 63,72
0196:  DATA 3E,20
0198:  DATA 20,09
019A:  DATA 53,65
019C:  DATA 74,20
019E:  DATA 50,4C
01A0:  DATA 4C,20
01A2:  DATA 52,46
01A4:  DATA 20,4F
01A6:  DATA 55,54
01A8:  DATA 20,6F
01AA:  DATA 6E,28
01AC:  DATA 31,29
01AE:  DATA 20,6F
01B0:  DATA 72,20
01B2:  DATA 6F,66
01B4:  DATA 66,28
01B6:  DATA 30,29
01B8:  DATA 0D,0A
01BA:  DATA 00,00
01BC:  MOVFF  FF2,0D
01C0:  BCF    FF2.7
01C2:  CLRF   FF7
01C4:  ADDLW  D6
01C6:  MOVWF  FF6
01C8:  MOVLW  01
01CA:  ADDWFC FF7,F
01CC:  TBLRD*+
01CE:  MOVF   FF5,W
01D0:  BTFSC  0D.7
01D2:  BSF    FF2.7
01D4:  RETURN 0
01D6:  DATA 24,50
01D8:  DATA 53,20
01DA:  DATA 3C,70
01DC:  DATA 6F,77
01DE:  DATA 65,72
01E0:  DATA 3E,3C
01E2:  DATA 63,72
01E4:  DATA 3E,20
01E6:  DATA 20,09
01E8:  DATA 53,65
01EA:  DATA 74,20
01EC:  DATA 61,6D
01EE:  DATA 70,20
01F0:  DATA 70,6F
01F2:  DATA 77,65
01F4:  DATA 72,20
01F6:  DATA 6F,6E
01F8:  DATA 28,31
01FA:  DATA 29,20
01FC:  DATA 6F,72
01FE:  DATA 20,6F
0200:  DATA 66,66
0202:  DATA 28,30
0204:  DATA 29,0D
0206:  DATA 0A,00
0208:  MOVFF  FF2,0D
020C:  BCF    FF2.7
020E:  CLRF   FF7
0210:  ADDLW  22
0212:  MOVWF  FF6
0214:  MOVLW  02
0216:  ADDWFC FF7,F
0218:  TBLRD*+
021A:  MOVF   FF5,W
021C:  BTFSC  0D.7
021E:  BSF    FF2.7
0220:  RETURN 0
0222:  DATA 24,50
0224:  DATA 20,3C
0226:  DATA 6C,65
0228:  DATA 76,65
022A:  DATA 6C,3E
022C:  DATA 3C,63
022E:  DATA 72,3E
0230:  DATA 20,20
0232:  DATA 09,53
0234:  DATA 65,74
0236:  DATA 20,70
0238:  DATA 6F,77
023A:  DATA 65,72
023C:  DATA 20,6C
023E:  DATA 65,76
0240:  DATA 65,6C
0242:  DATA 20,68
0244:  DATA 69,67
0246:  DATA 68,28
0248:  DATA 31,29
024A:  DATA 20,6F
024C:  DATA 72,20
024E:  DATA 6C,6F
0250:  DATA 77,28
0252:  DATA 30,29
0254:  DATA 0D,0A
0256:  DATA 00,00
0258:  MOVFF  FF2,0D
025C:  BCF    FF2.7
025E:  CLRF   FF7
0260:  ADDLW  72
0262:  MOVWF  FF6
0264:  MOVLW  02
0266:  ADDWFC FF7,F
0268:  TBLRD*+
026A:  MOVF   FF5,W
026C:  BTFSC  0D.7
026E:  BSF    FF2.7
0270:  RETURN 0
0272:  DATA 24,4C
0274:  DATA 44,20
0276:  DATA 3C,66
0278:  DATA 77,64
027A:  DATA 3E,3C
027C:  DATA 63,72
027E:  DATA 3E,20
0280:  DATA 20,09
0282:  DATA 53,65
0284:  DATA 74,20
0286:  DATA 46,77
0288:  DATA 64,20
028A:  DATA 70,6F
028C:  DATA 77,65
028E:  DATA 72,20
0290:  DATA 6D,65
0292:  DATA 61,73
0294:  DATA 75,72
0296:  DATA 65,6D
0298:  DATA 65,6E
029A:  DATA 74,20
029C:  DATA 6F,6E
029E:  DATA 28,31
02A0:  DATA 29,20
02A2:  DATA 6F,72
02A4:  DATA 20,6F
02A6:  DATA 66,66
02A8:  DATA 28,30
02AA:  DATA 29,0D
02AC:  DATA 0A,00
02AE:  MOVFF  FF2,0D
02B2:  BCF    FF2.7
02B4:  CLRF   FF7
02B6:  ADDLW  C8
02B8:  MOVWF  FF6
02BA:  MOVLW  02
02BC:  ADDWFC FF7,F
02BE:  TBLRD*+
02C0:  MOVF   FF5,W
02C2:  BTFSC  0D.7
02C4:  BSF    FF2.7
02C6:  RETURN 0
02C8:  DATA 24,51
02CA:  DATA 3C,63
02CC:  DATA 72,3E
02CE:  DATA 20,20
02D0:  DATA 09,52
02D2:  DATA 65,71
02D4:  DATA 75,65
02D6:  DATA 73,74
02D8:  DATA 20,73
02DA:  DATA 74,61
02DC:  DATA 74,75
02DE:  DATA 73,0D
02E0:  DATA 0A,00
02E2:  MOVFF  FF2,0D
02E6:  BCF    FF2.7
02E8:  CLRF   FF7
02EA:  ADDLW  FC
02EC:  MOVWF  FF6
02EE:  MOVLW  02
02F0:  ADDWFC FF7,F
02F2:  TBLRD*+
02F4:  MOVF   FF5,W
02F6:  BTFSC  0D.7
02F8:  BSF    FF2.7
02FA:  RETURN 0
02FC:  DATA 24,42
02FE:  DATA 4D,3C
0300:  DATA 63,72
0302:  DATA 3E,20
0304:  DATA 20,09
0306:  DATA 42,49
0308:  DATA 54,20
030A:  DATA 4D,6F
030C:  DATA 64,65
030E:  DATA 20,4F
0310:  DATA 4E,28
0312:  DATA 31,29
0314:  DATA 20,4F
0316:  DATA 46,46
0318:  DATA 28,30
031A:  DATA 29,0D
031C:  DATA 0A,00
031E:  MOVFF  FF2,0D
0322:  BCF    FF2.7
0324:  CLRF   FF7
0326:  ADDLW  38
0328:  MOVWF  FF6
032A:  MOVLW  03
032C:  ADDWFC FF7,F
032E:  TBLRD*+
0330:  MOVF   FF5,W
0332:  BTFSC  0D.7
0334:  BSF    FF2.7
0336:  RETURN 0
0338:  DATA 24,54
033A:  DATA 52,3C
033C:  DATA 63,72
033E:  DATA 3E,20
0340:  DATA 20,09
0342:  DATA 54,52
0344:  DATA 41,4E
0346:  DATA 53,49
0348:  DATA 56,45
034A:  DATA 52,28
034C:  DATA 54,29
034E:  DATA 20,52
0350:  DATA 45,43
0352:  DATA 49,56
0354:  DATA 45,52
0356:  DATA 28,52
0358:  DATA 29,00
035A:  MOVFF  FF2,0D
035E:  BCF    FF2.7
0360:  CLRF   FF7
0362:  ADDLW  74
0364:  MOVWF  FF6
0366:  MOVLW  03
0368:  ADDWFC FF7,F
036A:  TBLRD*+
036C:  MOVF   FF5,W
036E:  BTFSC  0D.7
0370:  BSF    FF2.7
0372:  RETURN 0
0374:  DATA 0D,0A
0376:  DATA 24,46
0378:  DATA 41,49
037A:  DATA 4C,0D
037C:  DATA 0A,00
037E:  MOVFF  FF2,0D
0382:  BCF    FF2.7
0384:  CLRF   FF7
0386:  ADDLW  98
0388:  MOVWF  FF6
038A:  MOVLW  03
038C:  ADDWFC FF7,F
038E:  TBLRD*+
0390:  MOVF   FF5,W
0392:  BTFSC  0D.7
0394:  BSF    FF2.7
0396:  RETURN 0
0398:  DATA 0D,0A
039A:  DATA 24,52
039C:  DATA 0D,0A
039E:  DATA 00,00
03A0:  MOVFF  FF2,0D
03A4:  BCF    FF2.7
03A6:  CLRF   FF7
03A8:  ADDLW  BA
03AA:  MOVWF  FF6
03AC:  MOVLW  03
03AE:  ADDWFC FF7,F
03B0:  TBLRD*+
03B2:  MOVF   FF5,W
03B4:  BTFSC  0D.7
03B6:  BSF    FF2.7
03B8:  RETURN 0
03BA:  DATA 0D,0A
03BC:  DATA 24,46
03BE:  DATA 41,55
03C0:  DATA 4C,54
03C2:  DATA 0D,0A
03C4:  DATA 00,00
03C6:  MOVFF  FF2,0D
03CA:  BCF    FF2.7
03CC:  CLRF   FF7
03CE:  ADDLW  E0
03D0:  MOVWF  FF6
03D2:  MOVLW  03
03D4:  ADDWFC FF7,F
03D6:  TBLRD*+
03D8:  MOVF   FF5,W
03DA:  BTFSC  0D.7
03DC:  BSF    FF2.7
03DE:  RETURN 0
03E0:  DATA 0D,0A
03E2:  DATA 24,4F
03E4:  DATA 4B,0D
03E6:  DATA 0A,00
03E8:  MOVFF  FF2,0D
03EC:  BCF    FF2.7
03EE:  CLRF   FF7
03F0:  ADDLW  02
03F2:  MOVWF  FF6
03F4:  MOVLW  04
03F6:  ADDWFC FF7,F
03F8:  TBLRD*+
03FA:  MOVF   FF5,W
03FC:  BTFSC  0D.7
03FE:  BSF    FF2.7
0400:  RETURN 0
0402:  DATA 0D,0A
0404:  DATA 24,42
0406:  DATA 52,45
0408:  DATA 41,4B
040A:  DATA 0D,0A
040C:  DATA 00,00
040E:  MOVFF  FF2,0D
0412:  BCF    FF2.7
0414:  CLRF   FF7
0416:  ADDLW  28
0418:  MOVWF  FF6
041A:  MOVLW  04
041C:  ADDWFC FF7,F
041E:  TBLRD*+
0420:  MOVF   FF5,W
0422:  BTFSC  0D.7
0424:  BSF    FF2.7
0426:  RETURN 0
0428:  DATA 42,41
042A:  DATA 31,35
042C:  DATA 33,33
042E:  DATA 52,58
0430:  DATA 20,56
0432:  DATA 31,2E
0434:  DATA 30,00
*
04C6:  DATA 0D,0A
04C8:  DATA 33,2E
04CA:  DATA 33,76
04CC:  DATA 20,70
04CE:  DATA 6F,77
04D0:  DATA 65,72
04D2:  DATA 20,69
04D4:  DATA 6E,3D
04D6:  DATA 25,32
04D8:  DATA 2E,31
04DA:  DATA 66,28
04DC:  DATA 76,29
04DE:  DATA 20,32
04E0:  DATA 38,76
04E2:  DATA 20,70
04E4:  DATA 6F,77
04E6:  DATA 65,72
04E8:  DATA 20,69
04EA:  DATA 6E,3D
04EC:  DATA 25,32
04EE:  DATA 2E,31
04F0:  DATA 66,28
04F2:  DATA 76,29
04F4:  DATA 00,00
04F6:  DATA 0D,0A
04F8:  DATA 46,52
04FA:  DATA 45,51
04FC:  DATA 3D,25
04FE:  DATA 6C,75
0500:  DATA 2C,20
0502:  DATA 52,53
0504:  DATA 53,49
0506:  DATA 3D,25
0508:  DATA 6C,75
050A:  DATA 64,42
050C:  DATA 4D,2C
050E:  DATA 20,54
0510:  DATA 45,4D
0512:  DATA 50,3D
0514:  DATA 25,35
0516:  DATA 2E,31
0518:  DATA 66,28
051A:  DATA 63,29
051C:  DATA 2C,20
051E:  DATA 49,44
0520:  DATA 3D,25
0522:  DATA 6C,75
0524:  DATA 2C,20
0526:  DATA 44,43
0528:  DATA 3D,25
052A:  DATA 30,32
052C:  DATA 6C,75
052E:  DATA 25,30
0530:  DATA 32,75
0532:  DATA 2C,20
0534:  DATA 56,45
0536:  DATA 52,20
0538:  DATA 25,6C
053A:  DATA 73,2C
053C:  DATA 20,00
053E:  DATA 56,31
0540:  DATA 2E,30
0542:  DATA 00,00
0544:  DATA 4C,49
0546:  DATA 47,48
0548:  DATA 54,3D
054A:  DATA 4F,4E
054C:  DATA 2C,20
054E:  DATA 00,00
0550:  DATA 4C,49
0552:  DATA 47,48
0554:  DATA 54,3D
0556:  DATA 4F,46
0558:  DATA 46,2C
055A:  DATA 20,00
055C:  DATA 50,41
055E:  DATA 53,53
0560:  DATA 20,42
0562:  DATA 69,74
0564:  DATA 3D,25
0566:  DATA 6C,64
0568:  DATA 2C,20
056A:  DATA 00,00
056C:  DATA 46,41
056E:  DATA 49,4C
0570:  DATA 20,42
0572:  DATA 69,74
0574:  DATA 3D,25
0576:  DATA 6C,64
0578:  DATA 2C,20
057A:  DATA 00,00
057C:  DATA 53,59
057E:  DATA 4E,54
0580:  DATA 48,20
0582:  DATA 4C,4F
0584:  DATA 43,4B
0586:  DATA 3D,4C
0588:  DATA 4F,43
058A:  DATA 4B,2C
058C:  DATA 20,00
058E:  DATA 53,59
0590:  DATA 4E,54
0592:  DATA 48,20
0594:  DATA 4C,4F
0596:  DATA 43,4B
0598:  DATA 3D,4E
059A:  DATA 4F,54
059C:  DATA 20,4C
059E:  DATA 4F,43
05A0:  DATA 4B,2C
05A2:  DATA 20,00
05A4:  DATA 42,49
05A6:  DATA 54,20
05A8:  DATA 4D,4F
05AA:  DATA 44,45
05AC:  DATA 3D,53
05AE:  DATA 54,41
05B0:  DATA 52,54
05B2:  DATA 2C,20
05B4:  DATA 00,00
05B6:  DATA 42,49
05B8:  DATA 54,20
05BA:  DATA 4D,4F
05BC:  DATA 44,45
05BE:  DATA 3D,53
05C0:  DATA 54,4F
05C2:  DATA 50,2C
05C4:  DATA 20,00
05C6:  DATA 50,4F
05C8:  DATA 57,45
05CA:  DATA 52,20
05CC:  DATA 4D,4F
05CE:  DATA 44,45
05D0:  DATA 3D,48
05D2:  DATA 49,47
05D4:  DATA 48,2C
05D6:  DATA 20,00
05D8:  DATA 50,4F
05DA:  DATA 57,45
05DC:  DATA 52,20
05DE:  DATA 4D,4F
05E0:  DATA 44,45
05E2:  DATA 3D,4C
05E4:  DATA 4F,57
05E6:  DATA 2C,20
05E8:  DATA 00,00
05EA:  DATA 41,55
05EC:  DATA 54,4F
05EE:  DATA 5F,50
05F0:  DATA 4F,57
05F2:  DATA 45,52
05F4:  DATA 3D,31
05F6:  DATA 2C,20
05F8:  DATA 00,00
05FA:  DATA 41,55
05FC:  DATA 54,4F
05FE:  DATA 5F,50
0600:  DATA 4F,57
0602:  DATA 45,52
0604:  DATA 3D,30
0606:  DATA 2C,20
0608:  DATA 00,00
060A:  DATA 4D,4F
060C:  DATA 44,55
060E:  DATA 4C,45
0610:  DATA 20,54
0612:  DATA 59,50
0614:  DATA 45,3D
0616:  DATA 52,58
0618:  DATA 2C,20
061A:  DATA 00,00
061C:  DATA 0D,0A
061E:  DATA 24,46
0620:  DATA 41,49
0622:  DATA 4C,0D
0624:  DATA 0A,00
*
071A:  TSTFSZ 01
071C:  BRA    0724
071E:  TSTFSZ 02
0720:  BRA    0726
0722:  BRA    0732
0724:  INCF   02,F
0726:  MOVFF  00,FEE
072A:  DECFSZ 01,F
072C:  BRA    0726
072E:  DECFSZ 02,F
0730:  BRA    0726
0732:  GOTO   0764 (RETURN)
*
08E2:  MOVLB  1
08E4:  MOVF   x57,W
08E6:  MULWF  x59
08E8:  MOVFF  FF3,01
08EC:  MOVFF  FF4,00
08F0:  MULWF  x5A
08F2:  MOVF   FF3,W
08F4:  ADDWF  00,F
08F6:  MOVF   x58,W
08F8:  MULWF  x59
08FA:  MOVF   FF3,W
08FC:  ADDWFC 00,W
08FE:  MOVWF  02
0900:  MOVLB  0
0902:  GOTO   0C96 (RETURN)
0906:  MOVLB  1
0908:  CLRF   x73
090A:  CLRF   x74
090C:  MOVLW  01
090E:  MOVWF  x75
0910:  CLRF   FDA
0912:  CLRF   FD9
0914:  MOVWF  x78
0916:  MOVLW  6B
0918:  MOVWF  x77
091A:  MOVLW  01
091C:  MOVWF  FEA
091E:  MOVLW  6F
0920:  MOVWF  FE9
0922:  MOVFF  178,FE2
0926:  MOVFF  177,FE1
092A:  MOVFF  175,176
092E:  BCF    FD8.0
0930:  MOVF   FE5,W
0932:  MULWF  FEE
0934:  MOVF   FF3,W
0936:  ADDWFC x73,F
0938:  MOVF   FF4,W
093A:  ADDWFC x74,F
093C:  DECFSZ x76,F
093E:  BRA    092E
0940:  MOVFF  173,FDE
0944:  MOVFF  174,173
0948:  CLRF   x74
094A:  BTFSC  FD8.0
094C:  INCF   x74,F
094E:  INCF   x77,F
0950:  BTFSC  FD8.2
0952:  INCF   x78,F
0954:  INCF   x75,F
0956:  MOVF   x75,W
0958:  SUBLW  05
095A:  BNZ   091A
095C:  MOVLB  0
095E:  RETURN 0
0960:  BTFSC  FD8.1
0962:  BRA    096C
0964:  MOVLW  01
0966:  MOVWF  FEA
0968:  MOVLW  C2
096A:  MOVWF  FE9
096C:  CLRF   00
096E:  CLRF   01
0970:  CLRF   02
0972:  CLRF   03
0974:  MOVLB  1
0976:  CLRF   xC2
0978:  CLRF   xC3
097A:  CLRF   xC4
097C:  CLRF   xC5
097E:  MOVF   xC1,W
0980:  IORWF  xC0,W
0982:  IORWF  xBF,W
0984:  IORWF  xBE,W
0986:  BZ    09E0
0988:  MOVLW  20
098A:  MOVWF  xC6
098C:  BCF    FD8.0
098E:  RLCF   xBA,F
0990:  RLCF   xBB,F
0992:  RLCF   xBC,F
0994:  RLCF   xBD,F
0996:  RLCF   xC2,F
0998:  RLCF   xC3,F
099A:  RLCF   xC4,F
099C:  RLCF   xC5,F
099E:  MOVF   xC1,W
09A0:  SUBWF  xC5,W
09A2:  BNZ   09B4
09A4:  MOVF   xC0,W
09A6:  SUBWF  xC4,W
09A8:  BNZ   09B4
09AA:  MOVF   xBF,W
09AC:  SUBWF  xC3,W
09AE:  BNZ   09B4
09B0:  MOVF   xBE,W
09B2:  SUBWF  xC2,W
09B4:  BNC   09D4
09B6:  MOVF   xBE,W
09B8:  SUBWF  xC2,F
09BA:  MOVF   xBF,W
09BC:  BTFSS  FD8.0
09BE:  INCFSZ xBF,W
09C0:  SUBWF  xC3,F
09C2:  MOVF   xC0,W
09C4:  BTFSS  FD8.0
09C6:  INCFSZ xC0,W
09C8:  SUBWF  xC4,F
09CA:  MOVF   xC1,W
09CC:  BTFSS  FD8.0
09CE:  INCFSZ xC1,W
09D0:  SUBWF  xC5,F
09D2:  BSF    FD8.0
09D4:  RLCF   00,F
09D6:  RLCF   01,F
09D8:  RLCF   02,F
09DA:  RLCF   03,F
09DC:  DECFSZ xC6,F
09DE:  BRA    098C
09E0:  MOVFF  1C2,FEF
09E4:  MOVFF  1C3,FEC
09E8:  MOVFF  1C4,FEC
09EC:  MOVFF  1C5,FEC
09F0:  MOVLB  0
09F2:  RETURN 0
*
1506:  MOVLB  1
1508:  MOVF   x5C,W
150A:  XORWF  x5E,W
150C:  ANDLW  80
150E:  MOVWF  x60
1510:  BTFSS  x5C.7
1512:  BRA    151E
1514:  COMF   x5B,F
1516:  COMF   x5C,F
1518:  INCF   x5B,F
151A:  BTFSC  FD8.2
151C:  INCF   x5C,F
151E:  BTFSS  x5E.7
1520:  BRA    152C
1522:  COMF   x5D,F
1524:  COMF   x5E,F
1526:  INCF   x5D,F
1528:  BTFSC  FD8.2
152A:  INCF   x5E,F
152C:  MOVF   x5B,W
152E:  MULWF  x5D
1530:  MOVFF  FF3,01
1534:  MOVFF  FF4,00
1538:  MULWF  x5E
153A:  MOVF   FF3,W
153C:  ADDWF  00,F
153E:  MOVF   x5C,W
1540:  MULWF  x5D
1542:  MOVF   FF3,W
1544:  ADDWFC 00,W
1546:  MOVWF  02
1548:  BTFSS  x60.7
154A:  BRA    1556
154C:  COMF   01,F
154E:  COMF   02,F
1550:  INCF   01,F
1552:  BTFSC  FD8.2
1554:  INCF   02,F
1556:  MOVLB  0
1558:  RETURN 0
*
1720:  MOVLW  8E
1722:  MOVWF  00
1724:  MOVFF  1B4,01
1728:  MOVFF  1B3,02
172C:  CLRF   03
172E:  MOVF   01,F
1730:  BNZ   1744
1732:  MOVFF  02,01
1736:  CLRF   02
1738:  MOVLW  08
173A:  SUBWF  00,F
173C:  MOVF   01,F
173E:  BNZ   1744
1740:  CLRF   00
1742:  BRA    1754
1744:  BCF    FD8.0
1746:  BTFSC  01.7
1748:  BRA    1752
174A:  RLCF   02,F
174C:  RLCF   01,F
174E:  DECF   00,F
1750:  BRA    1744
1752:  BCF    01.7
1754:  RETURN 0
1756:  MOVLB  1
1758:  MOVF   xBA,W
175A:  BTFSC  FD8.2
175C:  BRA    1840
175E:  MOVWF  00
1760:  MOVF   xBE,W
1762:  BTFSC  FD8.2
1764:  BRA    1840
1766:  ADDWF  00,F
1768:  BNC   1772
176A:  MOVLW  81
176C:  ADDWF  00,F
176E:  BC    1840
1770:  BRA    177A
1772:  MOVLW  7F
1774:  SUBWF  00,F
1776:  BNC   1840
1778:  BZ    1840
177A:  MOVFF  1BB,1C2
177E:  MOVF   xBF,W
1780:  XORWF  xC2,F
1782:  BSF    xBB.7
1784:  BSF    xBF.7
1786:  MOVF   xBD,W
1788:  MULWF  xC1
178A:  MOVFF  FF4,1C4
178E:  MOVF   xBC,W
1790:  MULWF  xC0
1792:  MOVFF  FF4,03
1796:  MOVFF  FF3,1C3
179A:  MULWF  xC1
179C:  MOVF   FF3,W
179E:  ADDWF  xC4,F
17A0:  MOVF   FF4,W
17A2:  ADDWFC xC3,F
17A4:  MOVLW  00
17A6:  ADDWFC 03,F
17A8:  MOVF   xBD,W
17AA:  MULWF  xC0
17AC:  MOVF   FF3,W
17AE:  ADDWF  xC4,F
17B0:  MOVF   FF4,W
17B2:  ADDWFC xC3,F
17B4:  MOVLW  00
17B6:  CLRF   02
17B8:  ADDWFC 03,F
17BA:  ADDWFC 02,F
17BC:  MOVF   xBB,W
17BE:  MULWF  xC1
17C0:  MOVF   FF3,W
17C2:  ADDWF  xC3,F
17C4:  MOVF   FF4,W
17C6:  ADDWFC 03,F
17C8:  MOVLW  00
17CA:  ADDWFC 02,F
17CC:  MOVF   xBB,W
17CE:  MULWF  xC0
17D0:  MOVF   FF3,W
17D2:  ADDWF  03,F
17D4:  MOVF   FF4,W
17D6:  ADDWFC 02,F
17D8:  MOVLW  00
17DA:  CLRF   01
17DC:  ADDWFC 01,F
17DE:  MOVF   xBD,W
17E0:  MULWF  xBF
17E2:  MOVF   FF3,W
17E4:  ADDWF  xC3,F
17E6:  MOVF   FF4,W
17E8:  ADDWFC 03,F
17EA:  MOVLW  00
17EC:  ADDWFC 02,F
17EE:  ADDWFC 01,F
17F0:  MOVF   xBC,W
17F2:  MULWF  xBF
17F4:  MOVF   FF3,W
17F6:  ADDWF  03,F
17F8:  MOVF   FF4,W
17FA:  ADDWFC 02,F
17FC:  MOVLW  00
17FE:  ADDWFC 01,F
1800:  MOVF   xBB,W
1802:  MULWF  xBF
1804:  MOVF   FF3,W
1806:  ADDWF  02,F
1808:  MOVF   FF4,W
180A:  ADDWFC 01,F
180C:  INCF   00,F
180E:  BTFSC  01.7
1810:  BRA    181C
1812:  RLCF   xC3,F
1814:  RLCF   03,F
1816:  RLCF   02,F
1818:  RLCF   01,F
181A:  DECF   00,F
181C:  MOVLW  00
181E:  BTFSS  xC3.7
1820:  BRA    1836
1822:  INCF   03,F
1824:  ADDWFC 02,F
1826:  ADDWFC 01,F
1828:  MOVF   01,W
182A:  BNZ   1836
182C:  MOVF   02,W
182E:  BNZ   1836
1830:  MOVF   03,W
1832:  BNZ   1836
1834:  INCF   00,F
1836:  BTFSC  xC2.7
1838:  BSF    01.7
183A:  BTFSS  xC2.7
183C:  BCF    01.7
183E:  BRA    1848
1840:  CLRF   00
1842:  CLRF   01
1844:  CLRF   02
1846:  CLRF   03
1848:  MOVLB  0
184A:  RETURN 0
184C:  MOVLW  8E
184E:  MOVWF  00
1850:  MOVLB  1
1852:  MOVF   x55,W
1854:  SUBWF  00,F
1856:  MOVFF  156,02
185A:  MOVFF  157,01
185E:  BSF    02.7
1860:  MOVF   00,F
1862:  BZ    1876
1864:  BCF    FD8.0
1866:  MOVF   02,F
1868:  BNZ   186E
186A:  MOVF   01,F
186C:  BZ    1876
186E:  RRCF   02,F
1870:  RRCF   01,F
1872:  DECFSZ 00,F
1874:  BRA    1864
1876:  BTFSS  x56.7
1878:  BRA    1884
187A:  COMF   01,F
187C:  COMF   02,F
187E:  INCF   01,F
1880:  BTFSC  FD8.2
1882:  INCF   02,F
1884:  MOVLB  0
1886:  RETURN 0
1888:  MOVLB  1
188A:  MOVF   xB1,W
188C:  BTFSC  FD8.2
188E:  BRA    19DA
1890:  MOVWF  xBD
1892:  MOVF   xB5,W
1894:  BTFSC  FD8.2
1896:  BRA    19DA
1898:  SUBWF  xBD,F
189A:  BNC   18A6
189C:  MOVLW  7F
189E:  ADDWF  xBD,F
18A0:  BTFSC  FD8.0
18A2:  BRA    19DA
18A4:  BRA    18B2
18A6:  MOVLW  81
18A8:  SUBWF  xBD,F
18AA:  BTFSS  FD8.0
18AC:  BRA    19DA
18AE:  BTFSC  FD8.2
18B0:  BRA    19DA
18B2:  MOVFF  1BD,00
18B6:  CLRF   01
18B8:  CLRF   02
18BA:  CLRF   03
18BC:  CLRF   xBC
18BE:  MOVFF  1B2,1BB
18C2:  BSF    xBB.7
18C4:  MOVFF  1B3,1BA
18C8:  MOVFF  1B4,1B9
18CC:  MOVLW  19
18CE:  MOVWF  xBD
18D0:  MOVF   xB8,W
18D2:  SUBWF  xB9,F
18D4:  BC    18F0
18D6:  MOVLW  01
18D8:  SUBWF  xBA,F
18DA:  BC    18F0
18DC:  SUBWF  xBB,F
18DE:  BC    18F0
18E0:  SUBWF  xBC,F
18E2:  BC    18F0
18E4:  INCF   xBC,F
18E6:  INCF   xBB,F
18E8:  INCF   xBA,F
18EA:  MOVF   xB8,W
18EC:  ADDWF  xB9,F
18EE:  BRA    1940
18F0:  MOVF   xB7,W
18F2:  SUBWF  xBA,F
18F4:  BC    191A
18F6:  MOVLW  01
18F8:  SUBWF  xBB,F
18FA:  BC    191A
18FC:  SUBWF  xBC,F
18FE:  BC    191A
1900:  INCF   xBC,F
1902:  INCF   xBB,F
1904:  MOVF   xB7,W
1906:  ADDWF  xBA,F
1908:  MOVF   xB8,W
190A:  ADDWF  xB9,F
190C:  BNC   1940
190E:  INCF   xBA,F
1910:  BNZ   1940
1912:  INCF   xBB,F
1914:  BNZ   1940
1916:  INCF   xBC,F
1918:  BRA    1940
191A:  MOVF   xB6,W
191C:  IORLW  80
191E:  SUBWF  xBB,F
1920:  BC    193E
1922:  MOVLW  01
1924:  SUBWF  xBC,F
1926:  BC    193E
1928:  INCF   xBC,F
192A:  MOVF   xB6,W
192C:  IORLW  80
192E:  ADDWF  xBB,F
1930:  MOVF   xB7,W
1932:  ADDWF  xBA,F
1934:  BNC   1908
1936:  INCF   xBB,F
1938:  BNZ   1908
193A:  INCF   xBC,F
193C:  BRA    1908
193E:  BSF    03.0
1940:  DECFSZ xBD,F
1942:  BRA    1946
1944:  BRA    195C
1946:  BCF    FD8.0
1948:  RLCF   xB9,F
194A:  RLCF   xBA,F
194C:  RLCF   xBB,F
194E:  RLCF   xBC,F
1950:  BCF    FD8.0
1952:  RLCF   03,F
1954:  RLCF   02,F
1956:  RLCF   01,F
1958:  RLCF   xBE,F
195A:  BRA    18D0
195C:  BTFSS  xBE.0
195E:  BRA    196C
1960:  BCF    FD8.0
1962:  RRCF   01,F
1964:  RRCF   02,F
1966:  RRCF   03,F
1968:  RRCF   xBE,F
196A:  BRA    1970
196C:  DECF   00,F
196E:  BZ    19DA
1970:  BTFSC  xBE.7
1972:  BRA    19B0
1974:  BCF    FD8.0
1976:  RLCF   xB9,F
1978:  RLCF   xBA,F
197A:  RLCF   xBB,F
197C:  RLCF   xBC,F
197E:  MOVF   xB8,W
1980:  SUBWF  xB9,F
1982:  BC    1992
1984:  MOVLW  01
1986:  SUBWF  xBA,F
1988:  BC    1992
198A:  SUBWF  xBB,F
198C:  BC    1992
198E:  SUBWF  xBC,F
1990:  BNC   19C6
1992:  MOVF   xB7,W
1994:  SUBWF  xBA,F
1996:  BC    19A2
1998:  MOVLW  01
199A:  SUBWF  xBB,F
199C:  BC    19A2
199E:  SUBWF  xBC,F
19A0:  BNC   19C6
19A2:  MOVF   xB6,W
19A4:  IORLW  80
19A6:  SUBWF  xBB,F
19A8:  BC    19B0
19AA:  MOVLW  01
19AC:  SUBWF  xBC,F
19AE:  BNC   19C6
19B0:  INCF   03,F
19B2:  BNZ   19C6
19B4:  INCF   02,F
19B6:  BNZ   19C6
19B8:  INCF   01,F
19BA:  BNZ   19C6
19BC:  INCF   00,F
19BE:  BZ    19DA
19C0:  RRCF   01,F
19C2:  RRCF   02,F
19C4:  RRCF   03,F
19C6:  MOVFF  1B2,1BD
19CA:  MOVF   xB6,W
19CC:  XORWF  xBD,F
19CE:  BTFSS  xBD.7
19D0:  BRA    19D6
19D2:  BSF    01.7
19D4:  BRA    19E2
19D6:  BCF    01.7
19D8:  BRA    19E2
19DA:  CLRF   00
19DC:  CLRF   01
19DE:  CLRF   02
19E0:  CLRF   03
19E2:  MOVLB  0
19E4:  RETURN 0
19E6:  MOVLW  80
19E8:  BTFSS  FD8.1
19EA:  BRA    19F0
19EC:  MOVLB  1
19EE:  XORWF  xB4,F
19F0:  MOVLB  1
19F2:  CLRF   xB9
19F4:  CLRF   xBA
19F6:  MOVFF  1B0,1B8
19FA:  MOVF   xB4,W
19FC:  XORWF  xB8,F
19FE:  MOVF   xAF,W
1A00:  BTFSC  FD8.2
1A02:  BRA    1BC2
1A04:  MOVWF  xB7
1A06:  MOVWF  00
1A08:  MOVF   xB3,W
1A0A:  BTFSC  FD8.2
1A0C:  BRA    1BD4
1A0E:  SUBWF  xB7,F
1A10:  BTFSC  FD8.2
1A12:  BRA    1B1A
1A14:  BNC   1A92
1A16:  MOVFF  1B4,1BD
1A1A:  BSF    xBD.7
1A1C:  MOVFF  1B5,1BC
1A20:  MOVFF  1B6,1BB
1A24:  CLRF   xBA
1A26:  BCF    FD8.0
1A28:  RRCF   xBD,F
1A2A:  RRCF   xBC,F
1A2C:  RRCF   xBB,F
1A2E:  RRCF   xBA,F
1A30:  DECFSZ xB7,F
1A32:  BRA    1A24
1A34:  BTFSS  xB8.7
1A36:  BRA    1A3E
1A38:  BSF    xB9.0
1A3A:  BRA    1BFC
1A3C:  BCF    xB9.0
1A3E:  BCF    xB7.0
1A40:  BSF    xB9.4
1A42:  MOVLW  01
1A44:  MOVWF  FEA
1A46:  MOVLW  B2
1A48:  MOVWF  FE9
1A4A:  BRA    1C22
1A4C:  BCF    xB9.4
1A4E:  BTFSC  xB8.7
1A50:  BRA    1A66
1A52:  BTFSS  xB7.0
1A54:  BRA    1A7C
1A56:  RRCF   xBD,F
1A58:  RRCF   xBC,F
1A5A:  RRCF   xBB,F
1A5C:  RRCF   xBA,F
1A5E:  INCF   00,F
1A60:  BTFSC  FD8.2
1A62:  BRA    1BF2
1A64:  BRA    1A7C
1A66:  BTFSC  xBD.7
1A68:  BRA    1A82
1A6A:  BCF    FD8.0
1A6C:  RLCF   xBA,F
1A6E:  RLCF   xBB,F
1A70:  RLCF   xBC,F
1A72:  RLCF   xBD,F
1A74:  DECF   00,F
1A76:  BTFSC  FD8.2
1A78:  BRA    1BF2
1A7A:  BRA    1A66
1A7C:  BSF    xB9.6
1A7E:  BRA    1B5A
1A80:  BCF    xB9.6
1A82:  MOVFF  1B0,1B8
1A86:  BTFSS  xB0.7
1A88:  BRA    1A8E
1A8A:  BSF    xBD.7
1A8C:  BRA    1BE4
1A8E:  BCF    xBD.7
1A90:  BRA    1BE4
1A92:  MOVFF  1B3,1B7
1A96:  MOVFF  1B3,00
1A9A:  MOVF   xAF,W
1A9C:  SUBWF  xB7,F
1A9E:  MOVFF  1B0,1BD
1AA2:  BSF    xBD.7
1AA4:  MOVFF  1B1,1BC
1AA8:  MOVFF  1B2,1BB
1AAC:  CLRF   xBA
1AAE:  BCF    FD8.0
1AB0:  RRCF   xBD,F
1AB2:  RRCF   xBC,F
1AB4:  RRCF   xBB,F
1AB6:  RRCF   xBA,F
1AB8:  DECFSZ xB7,F
1ABA:  BRA    1AAC
1ABC:  BTFSS  xB8.7
1ABE:  BRA    1AC6
1AC0:  BSF    xB9.1
1AC2:  BRA    1BFC
1AC4:  BCF    xB9.1
1AC6:  BCF    xB7.0
1AC8:  BSF    xB9.5
1ACA:  MOVLW  01
1ACC:  MOVWF  FEA
1ACE:  MOVLW  B6
1AD0:  MOVWF  FE9
1AD2:  BRA    1C22
1AD4:  BCF    xB9.5
1AD6:  BTFSC  xB8.7
1AD8:  BRA    1AEE
1ADA:  BTFSS  xB7.0
1ADC:  BRA    1B04
1ADE:  RRCF   xBD,F
1AE0:  RRCF   xBC,F
1AE2:  RRCF   xBB,F
1AE4:  RRCF   xBA,F
1AE6:  INCF   00,F
1AE8:  BTFSC  FD8.2
1AEA:  BRA    1BF2
1AEC:  BRA    1B04
1AEE:  BTFSC  xBD.7
1AF0:  BRA    1B0A
1AF2:  BCF    FD8.0
1AF4:  RLCF   xBA,F
1AF6:  RLCF   xBB,F
1AF8:  RLCF   xBC,F
1AFA:  RLCF   xBD,F
1AFC:  DECF   00,F
1AFE:  BTFSC  FD8.2
1B00:  BRA    1BF2
1B02:  BRA    1AEE
1B04:  BSF    xB9.7
1B06:  BRA    1B5A
1B08:  BCF    xB9.7
1B0A:  MOVFF  1B4,1B8
1B0E:  BTFSS  xB4.7
1B10:  BRA    1B16
1B12:  BSF    xBD.7
1B14:  BRA    1BE4
1B16:  BCF    xBD.7
1B18:  BRA    1BE4
1B1A:  MOVFF  1B4,1BD
1B1E:  BSF    xBD.7
1B20:  MOVFF  1B5,1BC
1B24:  MOVFF  1B6,1BB
1B28:  BTFSS  xB8.7
1B2A:  BRA    1B34
1B2C:  BCF    xBD.7
1B2E:  BSF    xB9.2
1B30:  BRA    1BFC
1B32:  BCF    xB9.2
1B34:  CLRF   xBA
1B36:  BCF    xB7.0
1B38:  MOVLW  01
1B3A:  MOVWF  FEA
1B3C:  MOVLW  B2
1B3E:  MOVWF  FE9
1B40:  BRA    1C22
1B42:  BTFSC  xB8.7
1B44:  BRA    1B7E
1B46:  MOVFF  1B0,1B8
1B4A:  BTFSS  xB7.0
1B4C:  BRA    1B5A
1B4E:  RRCF   xBD,F
1B50:  RRCF   xBC,F
1B52:  RRCF   xBB,F
1B54:  RRCF   xBA,F
1B56:  INCF   00,F
1B58:  BZ    1BF2
1B5A:  BTFSS  xBA.7
1B5C:  BRA    1B74
1B5E:  INCF   xBB,F
1B60:  BNZ   1B74
1B62:  INCF   xBC,F
1B64:  BNZ   1B74
1B66:  INCF   xBD,F
1B68:  BNZ   1B74
1B6A:  RRCF   xBD,F
1B6C:  RRCF   xBC,F
1B6E:  RRCF   xBB,F
1B70:  INCF   00,F
1B72:  BZ    1BF2
1B74:  BTFSC  xB9.6
1B76:  BRA    1A80
1B78:  BTFSC  xB9.7
1B7A:  BRA    1B08
1B7C:  BRA    1BB6
1B7E:  MOVLW  80
1B80:  XORWF  xBD,F
1B82:  BTFSS  xBD.7
1B84:  BRA    1B8E
1B86:  BRA    1BFC
1B88:  MOVFF  1B4,1B8
1B8C:  BRA    1BA2
1B8E:  MOVFF  1B0,1B8
1B92:  MOVF   xBD,F
1B94:  BNZ   1BA2
1B96:  MOVF   xBC,F
1B98:  BNZ   1BA2
1B9A:  MOVF   xBB,F
1B9C:  BNZ   1BA2
1B9E:  CLRF   00
1BA0:  BRA    1BE4
1BA2:  BTFSC  xBD.7
1BA4:  BRA    1BB6
1BA6:  BCF    FD8.0
1BA8:  RLCF   xBA,F
1BAA:  RLCF   xBB,F
1BAC:  RLCF   xBC,F
1BAE:  RLCF   xBD,F
1BB0:  DECFSZ 00,F
1BB2:  BRA    1BA2
1BB4:  BRA    1BF2
1BB6:  BTFSS  xB8.7
1BB8:  BRA    1BBE
1BBA:  BSF    xBD.7
1BBC:  BRA    1BE4
1BBE:  BCF    xBD.7
1BC0:  BRA    1BE4
1BC2:  MOVFF  1B3,00
1BC6:  MOVFF  1B4,1BD
1BCA:  MOVFF  1B5,1BC
1BCE:  MOVFF  1B6,1BB
1BD2:  BRA    1BE4
1BD4:  MOVFF  1AF,00
1BD8:  MOVFF  1B0,1BD
1BDC:  MOVFF  1B1,1BC
1BE0:  MOVFF  1B2,1BB
1BE4:  MOVFF  1BD,01
1BE8:  MOVFF  1BC,02
1BEC:  MOVFF  1BB,03
1BF0:  BRA    1C5A
1BF2:  CLRF   00
1BF4:  CLRF   01
1BF6:  CLRF   02
1BF8:  CLRF   03
1BFA:  BRA    1C5A
1BFC:  CLRF   xBA
1BFE:  COMF   xBB,F
1C00:  COMF   xBC,F
1C02:  COMF   xBD,F
1C04:  COMF   xBA,F
1C06:  INCF   xBA,F
1C08:  BNZ   1C14
1C0A:  INCF   xBB,F
1C0C:  BNZ   1C14
1C0E:  INCF   xBC,F
1C10:  BNZ   1C14
1C12:  INCF   xBD,F
1C14:  BTFSC  xB9.0
1C16:  BRA    1A3C
1C18:  BTFSC  xB9.1
1C1A:  BRA    1AC4
1C1C:  BTFSC  xB9.2
1C1E:  BRA    1B32
1C20:  BRA    1B88
1C22:  MOVF   FEF,W
1C24:  ADDWF  xBB,F
1C26:  BNC   1C32
1C28:  INCF   xBC,F
1C2A:  BNZ   1C32
1C2C:  INCF   xBD,F
1C2E:  BTFSC  FD8.2
1C30:  BSF    xB7.0
1C32:  MOVF   FED,F
1C34:  MOVF   FEF,W
1C36:  ADDWF  xBC,F
1C38:  BNC   1C40
1C3A:  INCF   xBD,F
1C3C:  BTFSC  FD8.2
1C3E:  BSF    xB7.0
1C40:  MOVF   FED,F
1C42:  MOVF   FEF,W
1C44:  BTFSC  FEF.7
1C46:  BRA    1C4A
1C48:  XORLW  80
1C4A:  ADDWF  xBD,F
1C4C:  BTFSC  FD8.0
1C4E:  BSF    xB7.0
1C50:  BTFSC  xB9.4
1C52:  BRA    1A4C
1C54:  BTFSC  xB9.5
1C56:  BRA    1AD4
1C58:  BRA    1B42
1C5A:  MOVLB  0
1C5C:  RETURN 0
1C5E:  MOVFF  109,FEA
1C62:  MOVFF  108,FE9
1C66:  MOVLB  1
1C68:  MOVFF  1BA,FEF
1C6C:  INCF   FE9,F
1C6E:  BTFSC  FD8.2
1C70:  INCF   FEA,F
1C72:  CLRF   FEF
1C74:  INCF   x08,F
1C76:  BTFSC  FD8.2
1C78:  INCF   x09,F
1C7A:  MOVLB  0
1C7C:  RETURN 0
1C7E:  TBLRD*+
1C80:  MOVFF  FF6,1AE
1C84:  MOVFF  FF7,1AF
1C88:  MOVFF  FF5,1BA
1C8C:  RCALL  1C5E
1C8E:  MOVFF  1AE,FF6
1C92:  MOVFF  1AF,FF7
1C96:  MOVLB  1
1C98:  DECFSZ xAD,F
1C9A:  BRA    1C9E
1C9C:  BRA    1CA2
1C9E:  MOVLB  0
1CA0:  BRA    1C7E
1CA2:  MOVLB  0
1CA4:  RETURN 0
1CA6:  MOVFF  FEA,1B5
1CAA:  MOVFF  FE9,1B4
1CAE:  MOVLB  1
1CB0:  SWAPF  xAE,W
1CB2:  IORLW  F0
1CB4:  MOVWF  xB0
1CB6:  ADDWF  xB0,F
1CB8:  ADDLW  E2
1CBA:  MOVWF  xB1
1CBC:  ADDLW  32
1CBE:  MOVWF  xB3
1CC0:  MOVF   xAE,W
1CC2:  ANDLW  0F
1CC4:  ADDWF  xB1,F
1CC6:  ADDWF  xB1,F
1CC8:  ADDWF  xB3,F
1CCA:  ADDLW  E9
1CCC:  MOVWF  xB2
1CCE:  ADDWF  xB2,F
1CD0:  ADDWF  xB2,F
1CD2:  SWAPF  xAD,W
1CD4:  ANDLW  0F
1CD6:  ADDWF  xB2,F
1CD8:  ADDWF  xB3,F
1CDA:  RLCF   xB2,F
1CDC:  RLCF   xB3,F
1CDE:  COMF   xB3,F
1CE0:  RLCF   xB3,F
1CE2:  MOVF   xAD,W
1CE4:  ANDLW  0F
1CE6:  ADDWF  xB3,F
1CE8:  RLCF   xB0,F
1CEA:  MOVLW  07
1CEC:  MOVWF  xAF
1CEE:  MOVLW  0A
1CF0:  DECF   xB2,F
1CF2:  ADDWF  xB3,F
1CF4:  BNC   1CF0
1CF6:  DECF   xB1,F
1CF8:  ADDWF  xB2,F
1CFA:  BNC   1CF6
1CFC:  DECF   xB0,F
1CFE:  ADDWF  xB1,F
1D00:  BNC   1CFC
1D02:  DECF   xAF,F
1D04:  ADDWF  xB0,F
1D06:  BNC   1D02
1D08:  MOVLW  01
1D0A:  MOVWF  FEA
1D0C:  MOVLW  AF
1D0E:  MOVWF  FE9
1D10:  MOVLW  07
1D12:  ANDWF  xB4,W
1D14:  BCF    xB4.6
1D16:  ADDWF  FE9,F
1D18:  MOVLW  B3
1D1A:  SUBWF  FE9,W
1D1C:  BTFSC  FD8.2
1D1E:  BSF    xB4.6
1D20:  MOVF   FEF,W
1D22:  MOVWF  00
1D24:  BNZ   1D36
1D26:  BTFSC  xB4.6
1D28:  BRA    1D36
1D2A:  BTFSC  xB4.4
1D2C:  BRA    1D58
1D2E:  BTFSC  xB4.3
1D30:  BRA    1D36
1D32:  MOVLW  20
1D34:  BRA    1D3C
1D36:  BSF    xB4.3
1D38:  BCF    xB4.4
1D3A:  MOVLW  30
1D3C:  ADDWF  00,F
1D3E:  MOVFF  FEA,1AE
1D42:  MOVFF  FE9,1AD
1D46:  MOVFF  00,1BA
1D4A:  MOVLB  0
1D4C:  RCALL  1C5E
1D4E:  MOVFF  1AE,FEA
1D52:  MOVFF  1AD,FE9
1D56:  MOVLB  1
1D58:  MOVF   FEE,W
1D5A:  BTFSS  xB4.6
1D5C:  BRA    1D18
1D5E:  MOVLB  0
1D60:  RETURN 0
1D62:  MOVLB  1
1D64:  MOVF   xBA,W
1D66:  SUBLW  B6
1D68:  MOVWF  xBA
1D6A:  CLRF   03
1D6C:  MOVFF  1BB,1BE
1D70:  BSF    xBB.7
1D72:  BCF    FD8.0
1D74:  RRCF   xBB,F
1D76:  RRCF   xBC,F
1D78:  RRCF   xBD,F
1D7A:  RRCF   03,F
1D7C:  RRCF   02,F
1D7E:  RRCF   01,F
1D80:  RRCF   00,F
1D82:  DECFSZ xBA,F
1D84:  BRA    1D72
1D86:  BTFSS  xBE.7
1D88:  BRA    1DA0
1D8A:  COMF   00,F
1D8C:  COMF   01,F
1D8E:  COMF   02,F
1D90:  COMF   03,F
1D92:  INCF   00,F
1D94:  BTFSC  FD8.2
1D96:  INCF   01,F
1D98:  BTFSC  FD8.2
1D9A:  INCF   02,F
1D9C:  BTFSC  FD8.2
1D9E:  INCF   03,F
1DA0:  MOVLB  0
1DA2:  GOTO   1DFC (RETURN)
1DA6:  MOVF   FE9,W
1DA8:  MOVLB  1
1DAA:  MOVWF  xB2
1DAC:  MOVF   xB1,W
1DAE:  MOVWF  xB4
1DB0:  BZ    1DE8
1DB2:  MOVFF  1B0,1BD
1DB6:  MOVFF  1AF,1BC
1DBA:  MOVFF  1AE,1BB
1DBE:  MOVFF  1AD,1BA
1DC2:  CLRF   xC1
1DC4:  CLRF   xC0
1DC6:  MOVLW  20
1DC8:  MOVWF  xBF
1DCA:  MOVLW  82
1DCC:  MOVWF  xBE
1DCE:  MOVLB  0
1DD0:  RCALL  1756
1DD2:  MOVFF  03,1B0
1DD6:  MOVFF  02,1AF
1DDA:  MOVFF  01,1AE
1DDE:  MOVFF  00,1AD
1DE2:  MOVLB  1
1DE4:  DECFSZ xB4,F
1DE6:  BRA    1DB2
1DE8:  MOVFF  1B0,1BD
1DEC:  MOVFF  1AF,1BC
1DF0:  MOVFF  1AE,1BB
1DF4:  MOVFF  1AD,1BA
1DF8:  MOVLB  0
1DFA:  BRA    1D62
1DFC:  MOVFF  03,1B0
1E00:  MOVFF  02,1AF
1E04:  MOVFF  01,1AE
1E08:  MOVFF  00,1AD
1E0C:  MOVLB  1
1E0E:  BTFSS  xB0.7
1E10:  BRA    1E2C
1E12:  DECF   xB2,F
1E14:  BSF    xB2.5
1E16:  COMF   xAD,F
1E18:  COMF   xAE,F
1E1A:  COMF   xAF,F
1E1C:  COMF   xB0,F
1E1E:  INCF   xAD,F
1E20:  BTFSC  FD8.2
1E22:  INCF   xAE,F
1E24:  BTFSC  FD8.2
1E26:  INCF   xAF,F
1E28:  BTFSC  FD8.2
1E2A:  INCF   xB0,F
1E2C:  MOVLW  3B
1E2E:  MOVWF  xB9
1E30:  MOVLW  9A
1E32:  MOVWF  xB8
1E34:  MOVLW  CA
1E36:  MOVWF  xB7
1E38:  CLRF   xB6
1E3A:  MOVLW  0A
1E3C:  MOVWF  xB4
1E3E:  MOVF   xB1,W
1E40:  BTFSC  FD8.2
1E42:  INCF   xB2,F
1E44:  BSF    FD8.1
1E46:  MOVLW  01
1E48:  MOVWF  FEA
1E4A:  MOVLW  AD
1E4C:  MOVWF  FE9
1E4E:  MOVFF  1B0,1BD
1E52:  MOVFF  1AF,1BC
1E56:  MOVFF  1AE,1BB
1E5A:  MOVFF  1AD,1BA
1E5E:  MOVFF  1B9,1C1
1E62:  MOVFF  1B8,1C0
1E66:  MOVFF  1B7,1BF
1E6A:  MOVFF  1B6,1BE
1E6E:  MOVLB  0
1E70:  CALL   0960
1E74:  MOVF   01,W
1E76:  MOVF   00,F
1E78:  BNZ   1EA0
1E7A:  MOVLB  1
1E7C:  INCF   xB1,W
1E7E:  SUBWF  xB4,W
1E80:  BTFSS  FD8.2
1E82:  BRA    1E88
1E84:  MOVLB  0
1E86:  BRA    1EA0
1E88:  MOVF   xB2,W
1E8A:  BZ    1EA6
1E8C:  ANDLW  0F
1E8E:  SUBWF  xB4,W
1E90:  BZ    1E94
1E92:  BC    1F14
1E94:  BTFSC  xB2.7
1E96:  BRA    1F14
1E98:  BTFSC  xB2.6
1E9A:  BRA    1EA6
1E9C:  MOVLW  20
1E9E:  BRA    1F08
1EA0:  MOVLW  20
1EA2:  MOVLB  1
1EA4:  ANDWF  xB2,F
1EA6:  BTFSS  xB2.5
1EA8:  BRA    1EC6
1EAA:  BCF    xB2.5
1EAC:  MOVF   xB1,W
1EAE:  BTFSS  FD8.2
1EB0:  DECF   xB2,F
1EB2:  MOVF   00,W
1EB4:  MOVWF  xB2
1EB6:  MOVLW  2D
1EB8:  MOVWF  xBA
1EBA:  MOVLB  0
1EBC:  RCALL  1C5E
1EBE:  MOVLB  1
1EC0:  MOVF   xB2,W
1EC2:  MOVWF  00
1EC4:  CLRF   xB2
1EC6:  MOVF   xB1,W
1EC8:  SUBWF  xB4,W
1ECA:  BNZ   1EE4
1ECC:  MOVF   00,W
1ECE:  MOVWF  xB2
1ED0:  MOVLW  2E
1ED2:  MOVWF  xBA
1ED4:  MOVLB  0
1ED6:  RCALL  1C5E
1ED8:  MOVLB  1
1EDA:  MOVF   xB2,W
1EDC:  MOVWF  00
1EDE:  MOVLW  20
1EE0:  ANDWF  xB2,F
1EE2:  MOVLW  00
1EE4:  MOVLW  30
1EE6:  BTFSS  xB2.5
1EE8:  BRA    1F08
1EEA:  BCF    xB2.5
1EEC:  MOVF   xB1,W
1EEE:  BTFSS  FD8.2
1EF0:  DECF   xB2,F
1EF2:  MOVF   00,W
1EF4:  MOVWF  xB2
1EF6:  MOVLW  2D
1EF8:  MOVWF  xBA
1EFA:  MOVLB  0
1EFC:  RCALL  1C5E
1EFE:  MOVLB  1
1F00:  MOVF   xB2,W
1F02:  MOVWF  00
1F04:  CLRF   xB2
1F06:  MOVLW  30
1F08:  ADDWF  00,F
1F0A:  MOVFF  00,1BA
1F0E:  MOVLB  0
1F10:  RCALL  1C5E
1F12:  MOVLB  1
1F14:  BCF    FD8.1
1F16:  MOVFF  1B9,1BD
1F1A:  MOVFF  1B8,1BC
1F1E:  MOVFF  1B7,1BB
1F22:  MOVFF  1B6,1BA
1F26:  CLRF   xC1
1F28:  CLRF   xC0
1F2A:  CLRF   xBF
1F2C:  MOVLW  0A
1F2E:  MOVWF  xBE
1F30:  MOVLB  0
1F32:  CALL   0960
1F36:  MOVFF  03,1B9
1F3A:  MOVFF  02,1B8
1F3E:  MOVFF  01,1B7
1F42:  MOVFF  00,1B6
1F46:  MOVLB  1
1F48:  DECFSZ xB4,F
1F4A:  BRA    1E44
1F4C:  MOVLB  0
1F4E:  RETURN 0
1F50:  MOVLB  1
1F52:  MOVF   xB0,W
1F54:  CLRF   01
1F56:  SUBWF  xAF,W
1F58:  BC    1F60
1F5A:  MOVFF  1AF,00
1F5E:  BRA    1F78
1F60:  CLRF   00
1F62:  MOVLW  08
1F64:  MOVWF  xB1
1F66:  RLCF   xAF,F
1F68:  RLCF   00,F
1F6A:  MOVF   xB0,W
1F6C:  SUBWF  00,W
1F6E:  BTFSC  FD8.0
1F70:  MOVWF  00
1F72:  RLCF   01,F
1F74:  DECFSZ xB1,F
1F76:  BRA    1F66
1F78:  MOVLB  0
1F7A:  RETURN 0
1F7C:  MOVF   01,W
1F7E:  MOVFF  1AD,1AF
1F82:  MOVLW  64
1F84:  MOVLB  1
1F86:  MOVWF  xB0
1F88:  MOVLB  0
1F8A:  RCALL  1F50
1F8C:  MOVFF  00,1AD
1F90:  MOVF   01,W
1F92:  MOVLW  30
1F94:  BNZ   1FA6
1F96:  MOVLB  1
1F98:  BTFSS  xAE.1
1F9A:  BRA    1FBA
1F9C:  BTFSC  xAE.3
1F9E:  BRA    1FBA
1FA0:  BTFSC  xAE.4
1FA2:  MOVLW  20
1FA4:  BRA    1FAE
1FA6:  MOVLB  1
1FA8:  BCF    xAE.3
1FAA:  BCF    xAE.4
1FAC:  BSF    xAE.0
1FAE:  ADDWF  01,F
1FB0:  MOVFF  01,1BA
1FB4:  MOVLB  0
1FB6:  RCALL  1C5E
1FB8:  MOVLB  1
1FBA:  MOVFF  1AD,1AF
1FBE:  MOVLW  0A
1FC0:  MOVWF  xB0
1FC2:  MOVLB  0
1FC4:  RCALL  1F50
1FC6:  MOVFF  00,1AD
1FCA:  MOVF   01,W
1FCC:  MOVLW  30
1FCE:  BNZ   1FE0
1FD0:  MOVLB  1
1FD2:  BTFSC  xAE.3
1FD4:  BRA    1FEA
1FD6:  BTFSS  xAE.0
1FD8:  BRA    1FEA
1FDA:  BTFSC  xAE.4
1FDC:  MOVLW  20
1FDE:  MOVLB  0
1FE0:  ADDWF  01,F
1FE2:  MOVFF  01,1BA
1FE6:  RCALL  1C5E
1FE8:  MOVLB  1
1FEA:  MOVLW  30
1FEC:  ADDWF  xAD,F
1FEE:  MOVFF  1AD,1BA
1FF2:  MOVLB  0
1FF4:  RCALL  1C5E
1FF6:  GOTO   2600 (RETURN)
1FFA:  TBLRD*+
1FFC:  MOVF   FF5,F
1FFE:  BZ    2018
2000:  MOVFF  FF6,1AD
2004:  MOVFF  FF7,1AE
2008:  MOVFF  FF5,1BA
200C:  RCALL  1C5E
200E:  MOVFF  1AD,FF6
2012:  MOVFF  1AE,FF7
2016:  BRA    1FFA
2018:  RETURN 0
201A:  MOVFF  FEA,1B5
201E:  MOVFF  FE9,1B4
2022:  MOVLB  1
2024:  BTFSS  xAE.7
2026:  BRA    2038
2028:  BSF    xB4.7
202A:  BTFSS  xB4.4
202C:  INCF   xB4,F
202E:  COMF   xAD,F
2030:  COMF   xAE,F
2032:  INCF   xAD,F
2034:  BTFSC  FD8.2
2036:  INCF   xAE,F
2038:  SWAPF  xAE,W
203A:  IORLW  F0
203C:  MOVWF  xB0
203E:  ADDWF  xB0,F
2040:  ADDLW  E2
2042:  MOVWF  xB1
2044:  ADDLW  32
2046:  MOVWF  xB3
2048:  MOVF   xAE,W
204A:  ANDLW  0F
204C:  ADDWF  xB1,F
204E:  ADDWF  xB1,F
2050:  ADDWF  xB3,F
2052:  ADDLW  E9
2054:  MOVWF  xB2
2056:  ADDWF  xB2,F
2058:  ADDWF  xB2,F
205A:  SWAPF  xAD,W
205C:  ANDLW  0F
205E:  ADDWF  xB2,F
2060:  ADDWF  xB3,F
2062:  RLCF   xB2,F
2064:  RLCF   xB3,F
2066:  COMF   xB3,F
2068:  RLCF   xB3,F
206A:  MOVF   xAD,W
206C:  ANDLW  0F
206E:  ADDWF  xB3,F
2070:  RLCF   xB0,F
2072:  MOVLW  07
2074:  MOVWF  xAF
2076:  MOVLW  0A
2078:  DECF   xB2,F
207A:  ADDWF  xB3,F
207C:  BNC   2078
207E:  DECF   xB1,F
2080:  ADDWF  xB2,F
2082:  BNC   207E
2084:  DECF   xB0,F
2086:  ADDWF  xB1,F
2088:  BNC   2084
208A:  DECF   xAF,F
208C:  ADDWF  xB0,F
208E:  BNC   208A
2090:  MOVLW  01
2092:  MOVWF  FEA
2094:  MOVLW  AF
2096:  MOVWF  FE9
2098:  MOVLW  07
209A:  ANDWF  xB4,W
209C:  BCF    xB4.6
209E:  DECF   FE9,F
20A0:  ANDWF  xB4,W
20A2:  BNZ   20B2
20A4:  BTFSC  xB4.4
20A6:  INCF   FE9,F
20A8:  BTFSC  xB4.4
20AA:  BRA    20B2
20AC:  MOVLW  20
20AE:  MOVWF  00
20B0:  BRA    20EA
20B2:  ADDWF  FE9,F
20B4:  MOVLW  B3
20B6:  SUBWF  FE9,W
20B8:  BTFSC  FD8.2
20BA:  BSF    xB4.6
20BC:  MOVF   FEF,W
20BE:  MOVWF  00
20C0:  BNZ   20D2
20C2:  BTFSC  xB4.6
20C4:  BRA    20D2
20C6:  BTFSC  xB4.4
20C8:  BRA    2104
20CA:  BTFSC  xB4.3
20CC:  BRA    20D2
20CE:  MOVLW  20
20D0:  BRA    20E8
20D2:  BTFSS  xB4.7
20D4:  BRA    20E2
20D6:  MOVLW  2D
20D8:  MOVWF  00
20DA:  MOVF   FED,W
20DC:  BCF    xB4.6
20DE:  BCF    xB4.7
20E0:  BRA    20EA
20E2:  BSF    xB4.3
20E4:  BCF    xB4.4
20E6:  MOVLW  30
20E8:  ADDWF  00,F
20EA:  MOVFF  FEA,1AE
20EE:  MOVFF  FE9,1AD
20F2:  MOVFF  00,1BA
20F6:  MOVLB  0
20F8:  RCALL  1C5E
20FA:  MOVFF  1AE,FEA
20FE:  MOVFF  1AD,FE9
2102:  MOVLB  1
2104:  MOVF   FEE,W
2106:  BTFSS  xB4.6
2108:  BRA    20B4
210A:  MOVLB  0
210C:  RETURN 0
*
2A58:  TBLRD*+
2A5A:  MOVF   FF5,F
2A5C:  BZ    2A78
2A5E:  MOVFF  FF6,155
2A62:  MOVFF  FF7,156
2A66:  MOVF   FF5,W
2A68:  BTFSS  FA4.4
2A6A:  BRA    2A68
2A6C:  MOVWF  F73
2A6E:  MOVFF  155,FF6
2A72:  MOVFF  156,FF7
2A76:  BRA    2A58
2A78:  GOTO   3518 (RETURN)
*
36C2:  MOVFF  FF2,0D
36C6:  BCF    FF2.7
36C8:  ADDWF  FE8,W
36CA:  CLRF   FF7
36CC:  RLCF   FF7,F
36CE:  ADDLW  E7
36D0:  MOVWF  FF6
36D2:  MOVLW  36
36D4:  ADDWFC FF7,F
36D6:  TBLRD*-
36D8:  MOVF   FF5,W
36DA:  MOVWF  FFA
36DC:  TBLRD*
36DE:  MOVF   FF5,W
36E0:  BTFSC  0D.7
36E2:  BSF    FF2.7
36E4:  MOVWF  FF9
36E6:  DATA 34,35
36E8:  DATA 3A,35
36EA:  DATA A8,35
36EC:  DATA BE,36
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000, restart_wdt) 
*
0810:  MOVLW  01
0812:  MOVWF  FEA
0814:  MOVLW  22
0816:  MOVWF  FE9
0818:  MOVF   FEF,W
081A:  BZ    083E
081C:  MOVLW  05
081E:  MOVWF  01
0820:  MOVLW  BF
0822:  MOVWF  00
0824:  CLRWDT
0826:  DECFSZ 00,F
0828:  BRA    0824
082A:  DECFSZ 01,F
082C:  BRA    0820
082E:  MOVLW  2E
0830:  MOVWF  00
0832:  DECFSZ 00,F
0834:  BRA    0832
0836:  NOP   
0838:  CLRWDT
083A:  DECFSZ FEF,F
083C:  BRA    081C
083E:  RETURN 0
*
0CB4:  MOVLW  04
0CB6:  MOVLB  1
0CB8:  SUBWF  xB3,F
0CBA:  BNC   0CD0
0CBC:  MOVLW  01
0CBE:  MOVWF  FEA
0CC0:  MOVLW  B3
0CC2:  MOVWF  FE9
0CC4:  MOVF   FEF,W
0CC6:  BZ    0CD0
0CC8:  BRA    0CCC
0CCA:  CLRWDT
0CCC:  DECFSZ FEF,F
0CCE:  BRA    0CCA
0CD0:  MOVLB  0
0CD2:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use rs232(baud=38400,parity=N,xmit=PIN_D6,rcv=PIN_D7,bits=8,stream=UART_CPLD)   //Uart to CPLD 
....................  
.................... #define UINT  unsigned int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
.................... #define VERSION "BA1533RX V1.0" 
.................... #define VERSION_V "V1.0" 
....................  
.................... //--------- frequency constants ----------------------------------------------- 
.................... #define FREQ_P_MULT            32L 
.................... #define FREQ_BASE         2095000L       // in KHz 
.................... #define FREQ_STEP              100L       // in KHz 
.................... #define FREQ_OSC            10000L       // in KHz 
.................... #define FREQ_MUL              100L 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP)) 
....................  
.................... #define FRQ_LO_BOT 5150 
.................... #define FRQ_LO_TOP 5250 
.................... #define FRQ_HI_BOT 5650 
.................... #define FRQ_HI_TOP 5850 
....................  
.................... //========== power ============================================================ 
.................... UINT  power_control;	 //power_level = 0,  
....................  
.................... #define A2D_POWER   8    //28v 
.................... #define A2D_PREV    5    //rssi 
.................... #define A2D_TEMP    6 
.................... #define A2D_PWR_IN  7 
.................... #define A2D_Vdd     0 
....................  
.................... #define PWR_IN_TRESHOLD 100 
.................... #define PASS_FAIL_TRESHOLD 96 
....................  
.................... #define DAC_POS_VOLT 0 
.................... #define DAC_NEG_VOLT 1 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
....................  
.................... //========== timer ============================================================ 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... //UCHAR  TMR_1sec_cnt; 
.................... UINT count_1sec = 0; 
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
.................... #bit TMR_1Sec_BIT_EN    =  TMR_1sec_Flags.3 
....................  
.................... #define sense_28v  PIN_B2 
.................... #define MET_EN     PIN_B3 
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define RREV     PIN_A5 // sAN4 
.................... #define FFWR     PIN_E0 // sAN5 rssi 
.................... #define TMP      PIN_E1 // sAN6 temperature 
.................... #define PWR_IN   PIN_E2 // sAN7 
....................  
.................... #define PLL_LD   PIN_C0 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
....................  
.................... #define VC1		 PIN_D0 
.................... #define VC2		 PIN_D1 
....................   
.................... #define LNA_EN   PIN_D2			 
....................  
.................... #define BIT_MODE_EN  PIN_D3 
....................  
.................... #define VGMON_THRESHOLD 650 // 2.1V 
....................  
.................... #define METER_OUTPUT1  1   // 1 
.................... #define METER_OUTPUT2  5   // 11 
.................... #define METER_OUTPUT3  48   // 111  
.................... #define METER_OUTPUT4  481  // 1111 
....................  
.................... UINT power_avg[4], pavgx = 0; 
.................... int16 pass_count = 0; 
.................... UINT fpga_first_val; 
.................... //========== COM1 variables =================================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================================ 
....................  
.................... //----------- setup ----------------------------------------------------------- 
.................... struct { 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UINT  negative_voltage[2]; 
....................        UINT  power_in[2]; 
....................        UINT  reverse; 
....................        UCHAR meter_backlight; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  rssi_table[11][2]; 
.................... 	   UINT  auto_mode_tresh[2]; 
....................  
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
....................  
.................... //========== function prototypes ============================================== 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
....................  
.................... //========== include source files ============================================= 
.................... #include "AD5312.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5312 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5314(int8 channel, int16 level) 
....................   { 
....................   output_low(DA2_SYN); 
*
0D68:  BCF    F89.2
....................  
....................   if (channel) 
0D6A:  MOVLB  1
0D6C:  MOVF   x1E,F
0D6E:  BZ    0D74
....................     output_high(DA2_DAT);    // send to VOUTB 
0D70:  BSF    F89.4
0D72:  BRA    0D76
....................   else 
....................     output_low(DA2_DAT);    // send to VOUTA 
0D74:  BCF    F89.4
....................  
.................... #ifdef SW_SPI 
....................   output_high(DA2_CLK);  // select VoutA/B 
0D76:  BSF    F89.3
....................   delay_us(15); 
0D78:  CLRWDT
0D7A:  MOVLW  13
0D7C:  MOVWF  00
0D7E:  DECFSZ 00,F
0D80:  BRA    0D7E
0D82:  NOP   
....................   output_low(DA2_CLK); 
0D84:  BCF    F89.3
....................   delay_us(15); 
0D86:  CLRWDT
0D88:  MOVLW  13
0D8A:  MOVWF  00
0D8C:  DECFSZ 00,F
0D8E:  BRA    0D8C
0D90:  NOP   
....................  
....................   output_low(DA2_DAT); 
0D92:  BCF    F89.4
....................  
....................   output_high(DA2_CLK); 
0D94:  BSF    F89.3
....................   delay_us(15); 
0D96:  CLRWDT
0D98:  MOVLW  13
0D9A:  MOVWF  00
0D9C:  DECFSZ 00,F
0D9E:  BRA    0D9C
0DA0:  NOP   
....................   output_low(DA2_CLK); 
0DA2:  BCF    F89.3
....................   delay_us(15); 
0DA4:  CLRWDT
0DA6:  MOVLW  13
0DA8:  MOVWF  00
0DAA:  DECFSZ 00,F
0DAC:  BRA    0DAA
0DAE:  NOP   
....................  
....................   output_high(DA2_CLK); 
0DB0:  BSF    F89.3
....................   delay_us(15); 
0DB2:  CLRWDT
0DB4:  MOVLW  13
0DB6:  MOVWF  00
0DB8:  DECFSZ 00,F
0DBA:  BRA    0DB8
0DBC:  NOP   
....................   output_low(DA2_CLK); 
0DBE:  BCF    F89.3
....................   delay_us(15); 
0DC0:  CLRWDT
0DC2:  MOVLW  13
0DC4:  MOVWF  00
0DC6:  DECFSZ 00,F
0DC8:  BRA    0DC6
0DCA:  NOP   
....................  
....................   output_high(DA2_CLK); 
0DCC:  BSF    F89.3
....................   delay_us(15); 
0DCE:  CLRWDT
0DD0:  MOVLW  13
0DD2:  MOVWF  00
0DD4:  DECFSZ 00,F
0DD6:  BRA    0DD4
0DD8:  NOP   
....................   output_low(DA2_CLK); 
0DDA:  BCF    F89.3
....................   delay_us(15); 
0DDC:  CLRWDT
0DDE:  MOVLW  13
0DE0:  MOVWF  00
0DE2:  DECFSZ 00,F
0DE4:  BRA    0DE2
0DE6:  NOP   
....................  
....................  
....................   output_high(DA2_CLK); 
0DE8:  BSF    F89.3
....................   if (level & 0x0200) 
0DEA:  ANDLW  00
0DEC:  MOVWF  00
0DEE:  MOVF   x20,W
0DF0:  ANDLW  02
0DF2:  MOVWF  03
0DF4:  MOVF   00,W
0DF6:  IORWF  03,W
0DF8:  BZ    0DFE
....................     output_high(DA2_DAT); 
0DFA:  BSF    F89.4
0DFC:  BRA    0E00
....................   else 
....................     output_low(DA2_DAT); 
0DFE:  BCF    F89.4
....................   delay_us(15); 
0E00:  CLRWDT
0E02:  MOVLW  13
0E04:  MOVWF  00
0E06:  DECFSZ 00,F
0E08:  BRA    0E06
0E0A:  NOP   
....................   output_low(DA2_CLK); 
0E0C:  BCF    F89.3
....................   delay_us(15); 
0E0E:  CLRWDT
0E10:  MOVLW  13
0E12:  MOVWF  00
0E14:  DECFSZ 00,F
0E16:  BRA    0E14
0E18:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E1A:  BSF    F89.3
....................   if (level & 0x0100) 
0E1C:  ANDLW  00
0E1E:  MOVWF  00
0E20:  MOVF   x20,W
0E22:  ANDLW  01
0E24:  MOVWF  03
0E26:  MOVF   00,W
0E28:  IORWF  03,W
0E2A:  BZ    0E30
....................     output_high(DA2_DAT); 
0E2C:  BSF    F89.4
0E2E:  BRA    0E32
....................   else 
....................     output_low(DA2_DAT); 
0E30:  BCF    F89.4
....................   delay_us(15); 
0E32:  CLRWDT
0E34:  MOVLW  13
0E36:  MOVWF  00
0E38:  DECFSZ 00,F
0E3A:  BRA    0E38
0E3C:  NOP   
....................   output_low(DA2_CLK); 
0E3E:  BCF    F89.3
....................   delay_us(15); 
0E40:  CLRWDT
0E42:  MOVLW  13
0E44:  MOVWF  00
0E46:  DECFSZ 00,F
0E48:  BRA    0E46
0E4A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E4C:  BSF    F89.3
....................   if (level & 0x0080) 
0E4E:  MOVF   x1F,W
0E50:  ANDLW  80
0E52:  MOVWF  00
0E54:  CLRF   03
0E56:  MOVF   00,W
0E58:  IORWF  03,W
0E5A:  BZ    0E60
....................     output_high(DA2_DAT); 
0E5C:  BSF    F89.4
0E5E:  BRA    0E62
....................   else 
....................     output_low(DA2_DAT); 
0E60:  BCF    F89.4
....................   delay_us(15); 
0E62:  CLRWDT
0E64:  MOVLW  13
0E66:  MOVWF  00
0E68:  DECFSZ 00,F
0E6A:  BRA    0E68
0E6C:  NOP   
....................   output_low(DA2_CLK); 
0E6E:  BCF    F89.3
....................   delay_us(15); 
0E70:  CLRWDT
0E72:  MOVLW  13
0E74:  MOVWF  00
0E76:  DECFSZ 00,F
0E78:  BRA    0E76
0E7A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0E7C:  BSF    F89.3
....................   if (level & 0x0040) 
0E7E:  MOVF   x1F,W
0E80:  ANDLW  40
0E82:  MOVWF  00
0E84:  CLRF   03
0E86:  MOVF   00,W
0E88:  IORWF  03,W
0E8A:  BZ    0E90
....................     output_high(DA2_DAT); 
0E8C:  BSF    F89.4
0E8E:  BRA    0E92
....................   else 
....................     output_low(DA2_DAT); 
0E90:  BCF    F89.4
....................   delay_us(15); 
0E92:  CLRWDT
0E94:  MOVLW  13
0E96:  MOVWF  00
0E98:  DECFSZ 00,F
0E9A:  BRA    0E98
0E9C:  NOP   
....................   output_low(DA2_CLK); 
0E9E:  BCF    F89.3
....................   delay_us(15); 
0EA0:  CLRWDT
0EA2:  MOVLW  13
0EA4:  MOVWF  00
0EA6:  DECFSZ 00,F
0EA8:  BRA    0EA6
0EAA:  NOP   
....................  
....................   output_high(DA2_CLK); 
0EAC:  BSF    F89.3
....................   if (level & 0x0020) 
0EAE:  MOVF   x1F,W
0EB0:  ANDLW  20
0EB2:  MOVWF  00
0EB4:  CLRF   03
0EB6:  MOVF   00,W
0EB8:  IORWF  03,W
0EBA:  BZ    0EC0
....................     output_high(DA2_DAT); 
0EBC:  BSF    F89.4
0EBE:  BRA    0EC2
....................   else 
....................     output_low(DA2_DAT); 
0EC0:  BCF    F89.4
....................   delay_us(15); 
0EC2:  CLRWDT
0EC4:  MOVLW  13
0EC6:  MOVWF  00
0EC8:  DECFSZ 00,F
0ECA:  BRA    0EC8
0ECC:  NOP   
....................   output_low(DA2_CLK); 
0ECE:  BCF    F89.3
....................   delay_us(15); 
0ED0:  CLRWDT
0ED2:  MOVLW  13
0ED4:  MOVWF  00
0ED6:  DECFSZ 00,F
0ED8:  BRA    0ED6
0EDA:  NOP   
....................  
....................   output_high(DA2_CLK); 
0EDC:  BSF    F89.3
....................   if (level & 0x0010) 
0EDE:  MOVF   x1F,W
0EE0:  ANDLW  10
0EE2:  MOVWF  00
0EE4:  CLRF   03
0EE6:  MOVF   00,W
0EE8:  IORWF  03,W
0EEA:  BZ    0EF0
....................     output_high(DA2_DAT); 
0EEC:  BSF    F89.4
0EEE:  BRA    0EF2
....................   else 
....................     output_low(DA2_DAT); 
0EF0:  BCF    F89.4
....................   delay_us(15); 
0EF2:  CLRWDT
0EF4:  MOVLW  13
0EF6:  MOVWF  00
0EF8:  DECFSZ 00,F
0EFA:  BRA    0EF8
0EFC:  NOP   
....................   output_low(DA2_CLK); 
0EFE:  BCF    F89.3
....................   delay_us(15); 
0F00:  CLRWDT
0F02:  MOVLW  13
0F04:  MOVWF  00
0F06:  DECFSZ 00,F
0F08:  BRA    0F06
0F0A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F0C:  BSF    F89.3
....................   if (level & 0x0008) 
0F0E:  MOVF   x1F,W
0F10:  ANDLW  08
0F12:  MOVWF  00
0F14:  CLRF   03
0F16:  MOVF   00,W
0F18:  IORWF  03,W
0F1A:  BZ    0F20
....................     output_high(DA2_DAT); 
0F1C:  BSF    F89.4
0F1E:  BRA    0F22
....................   else 
....................     output_low(DA2_DAT); 
0F20:  BCF    F89.4
....................   delay_us(15); 
0F22:  CLRWDT
0F24:  MOVLW  13
0F26:  MOVWF  00
0F28:  DECFSZ 00,F
0F2A:  BRA    0F28
0F2C:  NOP   
....................   output_low(DA2_CLK); 
0F2E:  BCF    F89.3
....................   delay_us(15); 
0F30:  CLRWDT
0F32:  MOVLW  13
0F34:  MOVWF  00
0F36:  DECFSZ 00,F
0F38:  BRA    0F36
0F3A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F3C:  BSF    F89.3
....................   if (level & 0x0004) 
0F3E:  MOVF   x1F,W
0F40:  ANDLW  04
0F42:  MOVWF  00
0F44:  CLRF   03
0F46:  MOVF   00,W
0F48:  IORWF  03,W
0F4A:  BZ    0F50
....................     output_high(DA2_DAT); 
0F4C:  BSF    F89.4
0F4E:  BRA    0F52
....................   else 
....................     output_low(DA2_DAT); 
0F50:  BCF    F89.4
....................   delay_us(15); 
0F52:  CLRWDT
0F54:  MOVLW  13
0F56:  MOVWF  00
0F58:  DECFSZ 00,F
0F5A:  BRA    0F58
0F5C:  NOP   
....................   output_low(DA2_CLK); 
0F5E:  BCF    F89.3
....................   delay_us(15); 
0F60:  CLRWDT
0F62:  MOVLW  13
0F64:  MOVWF  00
0F66:  DECFSZ 00,F
0F68:  BRA    0F66
0F6A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F6C:  BSF    F89.3
....................   if (level & 0x0002) 
0F6E:  MOVF   x1F,W
0F70:  ANDLW  02
0F72:  MOVWF  00
0F74:  CLRF   03
0F76:  MOVF   00,W
0F78:  IORWF  03,W
0F7A:  BZ    0F80
....................     output_high(DA2_DAT); 
0F7C:  BSF    F89.4
0F7E:  BRA    0F82
....................   else 
....................     output_low(DA2_DAT); 
0F80:  BCF    F89.4
....................   delay_us(15); 
0F82:  CLRWDT
0F84:  MOVLW  13
0F86:  MOVWF  00
0F88:  DECFSZ 00,F
0F8A:  BRA    0F88
0F8C:  NOP   
....................   output_low(DA2_CLK); 
0F8E:  BCF    F89.3
....................   delay_us(15); 
0F90:  CLRWDT
0F92:  MOVLW  13
0F94:  MOVWF  00
0F96:  DECFSZ 00,F
0F98:  BRA    0F96
0F9A:  NOP   
....................  
....................   output_high(DA2_CLK); 
0F9C:  BSF    F89.3
....................   if (level & 0x0001) 
0F9E:  MOVF   x1F,W
0FA0:  ANDLW  01
0FA2:  MOVWF  00
0FA4:  CLRF   03
0FA6:  MOVF   00,W
0FA8:  IORWF  03,W
0FAA:  BZ    0FB0
....................     output_high(DA2_DAT); 
0FAC:  BSF    F89.4
0FAE:  BRA    0FB2
....................   else 
....................     output_low(DA2_DAT); 
0FB0:  BCF    F89.4
....................   delay_us(15); 
0FB2:  CLRWDT
0FB4:  MOVLW  13
0FB6:  MOVWF  00
0FB8:  DECFSZ 00,F
0FBA:  BRA    0FB8
0FBC:  NOP   
....................   output_low(DA2_CLK); 
0FBE:  BCF    F89.3
....................   delay_us(15); 
0FC0:  CLRWDT
0FC2:  MOVLW  13
0FC4:  MOVWF  00
0FC6:  DECFSZ 00,F
0FC8:  BRA    0FC6
0FCA:  NOP   
....................  
....................  
....................   output_high(DA2_CLK); 
0FCC:  BSF    F89.3
....................   delay_us(15); 
0FCE:  CLRWDT
0FD0:  MOVLW  13
0FD2:  MOVWF  00
0FD4:  DECFSZ 00,F
0FD6:  BRA    0FD4
0FD8:  NOP   
....................   output_low(DA2_CLK); 
0FDA:  BCF    F89.3
....................   delay_us(15); 
0FDC:  CLRWDT
0FDE:  MOVLW  13
0FE0:  MOVWF  00
0FE2:  DECFSZ 00,F
0FE4:  BRA    0FE2
0FE6:  NOP   
....................  
....................   output_high(DA2_CLK); 
0FE8:  BSF    F89.3
....................   delay_us(15); 
0FEA:  CLRWDT
0FEC:  MOVLW  13
0FEE:  MOVWF  00
0FF0:  DECFSZ 00,F
0FF2:  BRA    0FF0
0FF4:  NOP   
....................   output_low(DA2_CLK); 
0FF6:  BCF    F89.3
....................   delay_us(15); 
0FF8:  CLRWDT
0FFA:  MOVLW  13
0FFC:  MOVWF  00
0FFE:  DECFSZ 00,F
1000:  BRA    0FFE
1002:  NOP   
.................... #else 
....................    level = (level << 2) | 0x8000; 
....................    SPI2BUF = (AD5312,make8(level,1)); 
....................    delay_us(15); 
....................    SPI2BUF = (AD5312,make8(level,0)); 
....................    delay_us(16); 
.................... #endif 
....................  
....................   output_high(DA2_SYN); 
1004:  BSF    F89.2
....................   delay_us(15); 
1006:  CLRWDT
1008:  MOVLW  13
100A:  MOVWF  00
100C:  DECFSZ 00,F
100E:  BRA    100C
1010:  NOP   
....................   output_low(DA2_LAT); 
1012:  BCF    F89.1
....................   delay_us(15); 
1014:  CLRWDT
1016:  MOVLW  13
1018:  MOVWF  00
101A:  DECFSZ 00,F
101C:  BRA    101A
101E:  NOP   
....................   output_high(DA2_LAT); 
1020:  BSF    F89.1
....................   delay_us(15); 
1022:  CLRWDT
1024:  MOVLW  13
1026:  MOVWF  00
1028:  DECFSZ 00,F
102A:  BRA    1028
102C:  NOP   
102E:  MOVLB  0
1030:  RETURN 0
....................   } 
....................  
.................... #include "ADF4350.c" 
.................... //--------- ADF4350 handling functions ---------------------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
0768:  MOVLW  08
076A:  MOVLB  1
076C:  MOVWF  x61
076E:  MOVF   x61,F
0770:  BZ    07AE
....................     { 
....................     if (data & 0X80) 
0772:  BTFSS  x60.7
0774:  BRA    077A
....................       output_high(PLL_DAT); 
0776:  BSF    F8B.3
0778:  BRA    077C
....................     else 
....................       output_low(PLL_DAT); 
077A:  BCF    F8B.3
....................     delay_us(10); 
077C:  CLRWDT
077E:  MOVLW  0C
0780:  MOVWF  00
0782:  DECFSZ 00,F
0784:  BRA    0782
0786:  BRA    0788
....................     output_high(PLL_CLK); 
0788:  BSF    F8B.2
....................     delay_us(10); 
078A:  CLRWDT
078C:  MOVLW  0C
078E:  MOVWF  00
0790:  DECFSZ 00,F
0792:  BRA    0790
0794:  BRA    0796
....................     output_low(PLL_CLK); 
0796:  BCF    F8B.2
....................  
....................     delay_us(25); 
0798:  CLRWDT
079A:  MOVLW  20
079C:  MOVWF  00
079E:  DECFSZ 00,F
07A0:  BRA    079E
07A2:  BRA    07A4
07A4:  MOVF   x61,W
07A6:  DECF   x61,F
07A8:  BCF    FD8.0
07AA:  RLCF   x60,F
07AC:  BRA    076E
....................     } 
....................   output_low(PLL_DAT); 
07AE:  BCF    F8B.3
....................   output_low(PLL_CLK); 
07B0:  BCF    F8B.2
07B2:  MOVLB  0
07B4:  RETURN 0
....................   } 
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
07B6:  CLRWDT
....................   disable_interrupts(GLOBAL); 
07B8:  BCF    FF2.6
07BA:  BCF    FF2.7
07BC:  BTFSC  FF2.7
07BE:  BRA    07BA
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
07C0:  MOVFF  15E,15F
07C4:  MOVFF  15E,160
07C8:  RCALL  0768
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
07CA:  MOVFF  15D,15F
07CE:  MOVFF  15D,160
07D2:  RCALL  0768
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
07D4:  MOVFF  15C,15F
07D8:  MOVFF  15C,160
07DC:  RCALL  0768
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
07DE:  MOVFF  15B,15F
07E2:  MOVFF  15B,160
07E6:  RCALL  0768
....................   delay_us(40); 
07E8:  CLRWDT
07EA:  MOVLW  34
07EC:  MOVWF  00
07EE:  DECFSZ 00,F
07F0:  BRA    07EE
07F2:  BRA    07F4
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
07F4:  BSF    F8B.1
....................   delay_us(5); 
07F6:  CLRWDT
07F8:  MOVLW  05
07FA:  MOVWF  00
07FC:  DECFSZ 00,F
07FE:  BRA    07FC
0800:  BRA    0802
0802:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
0804:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
0806:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
0808:  MOVLW  C0
080A:  IORWF  FF2,F
....................   restart_wdt(); 
080C:  CLRWDT
080E:  RETURN 0
....................   } 
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................    
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
0840:  MOVLB  1
0842:  CLRF   x21
0844:  MOVLW  05
0846:  MOVWF  x20
0848:  MOVF   x21,W
084A:  SUBLW  05
084C:  BNC   08BA
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
084E:  MOVF   x20,W
0850:  MULLW  04
0852:  MOVF   FF3,W
0854:  CLRF   03
0856:  MOVFF  FF2,122
085A:  BCF    FF2.7
085C:  MOVLB  0
085E:  RCALL  00D2
0860:  TBLRD*+
0862:  MOVFF  FF5,01
0866:  TBLRD*+
0868:  MOVFF  FF5,02
086C:  TBLRD*+
086E:  MOVFF  FF5,03
0872:  MOVLB  1
0874:  BTFSC  x22.7
0876:  BSF    FF2.7
0878:  MOVFF  03,11F
087C:  MOVFF  02,11E
0880:  MOVFF  01,11D
0884:  MOVWF  x1C
....................     prog |= (ULONG)idx; 
0886:  CLRF   01
0888:  CLRF   02
088A:  CLRF   03
088C:  MOVF   x20,W
088E:  IORWF  x1C,F
0890:  MOVF   01,W
0892:  IORWF  x1D,F
0894:  MOVF   02,W
0896:  IORWF  x1E,F
0898:  MOVF   03,W
089A:  IORWF  x1F,F
....................     PLL_send_word(prog); 
089C:  MOVFF  11F,15E
08A0:  MOVFF  11E,15D
08A4:  MOVFF  11D,15C
08A8:  MOVFF  11C,15B
08AC:  MOVLB  0
08AE:  RCALL  07B6
08B0:  MOVLB  1
08B2:  MOVF   x21,W
08B4:  INCF   x21,F
08B6:  DECF   x20,F
08B8:  BRA    0848
....................     } 
....................   delay_ms(200); 
08BA:  MOVLW  C8
08BC:  MOVWF  x22
08BE:  MOVLB  0
08C0:  RCALL  0810
....................   PLL_send_word(prog); 
08C2:  MOVFF  11F,15E
08C6:  MOVFF  11E,15D
08CA:  MOVFF  11D,15C
08CE:  MOVFF  11C,15B
08D2:  RCALL  07B6
....................   delay_ms(200); 
08D4:  MOVLW  C8
08D6:  MOVLB  1
08D8:  MOVWF  x22
08DA:  MOVLB  0
08DC:  RCALL  0810
08DE:  GOTO   3784 (RETURN)
....................   } 
....................  
.................... //--------- frequency computation functions ----------------------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
*
09F4:  MOVLB  1
09F6:  CLRF   x66
09F8:  CLRF   x65
09FA:  CLRF   x64
09FC:  MOVLW  01
09FE:  MOVWF  x63
....................   { 
....................   ULONG Fvco, D, RFdiv = 1; 
....................   restart_wdt(); 
0A00:  CLRWDT
....................   D = Frequest-4800; 
0A02:  MOVLW  C0
0A04:  SUBWF  x59,W
0A06:  MOVWF  x5F
0A08:  MOVLW  12
0A0A:  SUBWFB x5A,W
0A0C:  MOVWF  x60
0A0E:  CLRF   x61
0A10:  CLRF   x62
.................... D/=2; 
0A12:  BCF    FD8.0
0A14:  RRCF   x62,F
0A16:  RRCF   x61,F
0A18:  RRCF   x60,F
0A1A:  RRCF   x5F,F
....................   PLL_RFdiv = 0x0085003CL; 
0A1C:  CLRF   x02
0A1E:  MOVLW  85
0A20:  MOVWF  x01
0A22:  CLRF   x00
0A24:  MOVLW  3C
0A26:  MOVLB  0
0A28:  MOVWF  xFF
....................  // if (Frequest >= 22000) 
....................  //   { 
....................  //   RFdiv = 1; 
....................  //   PLL_RFdiv = 0x0085003CL; 
....................  //   } 
....................   restart_wdt(); 
0A2A:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
0A2C:  MOVFF  162,16E
0A30:  MOVFF  161,16D
0A34:  MOVFF  160,16C
0A38:  MOVFF  15F,16B
0A3C:  MOVFF  166,172
0A40:  MOVFF  165,171
0A44:  MOVFF  164,170
0A48:  MOVFF  163,16F
0A4C:  RCALL  0906
0A4E:  MOVFF  03,16A
0A52:  MOVFF  02,169
0A56:  MOVFF  01,168
0A5A:  MOVFF  00,167
0A5E:  MOVFF  03,16E
0A62:  MOVFF  02,16D
0A66:  MOVFF  01,16C
0A6A:  MOVFF  00,16B
0A6E:  MOVLB  1
0A70:  CLRF   x72
0A72:  CLRF   x71
0A74:  CLRF   x70
0A76:  MOVLW  64
0A78:  MOVWF  x6F
0A7A:  MOVLB  0
0A7C:  RCALL  0906
0A7E:  MOVFF  03,162
0A82:  MOVFF  02,161
0A86:  MOVFF  01,160
0A8A:  MOVFF  00,15F
....................   restart_wdt(); 
0A8E:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
0A90:  BCF    FD8.1
0A92:  MOVFF  162,1BD
0A96:  MOVFF  161,1BC
0A9A:  MOVFF  160,1BB
0A9E:  MOVFF  15F,1BA
0AA2:  MOVLB  1
0AA4:  CLRF   xC1
0AA6:  CLRF   xC0
0AA8:  MOVLW  27
0AAA:  MOVWF  xBF
0AAC:  MOVLW  10
0AAE:  MOVWF  xBE
0AB0:  MOVLB  0
0AB2:  RCALL  0960
0AB4:  MOVFF  03,F2
0AB8:  MOVFF  02,F1
0ABC:  MOVFF  01,F0
0AC0:  MOVFF  00,EF
....................   restart_wdt(); 
0AC4:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
0AC6:  MOVFF  F2,16E
0ACA:  MOVFF  F1,16D
0ACE:  MOVFF  F0,16C
0AD2:  MOVFF  EF,16B
0AD6:  MOVLB  1
0AD8:  CLRF   x72
0ADA:  CLRF   x71
0ADC:  MOVLW  27
0ADE:  MOVWF  x70
0AE0:  MOVLW  10
0AE2:  MOVWF  x6F
0AE4:  MOVLB  0
0AE6:  RCALL  0906
0AE8:  MOVF   00,W
0AEA:  MOVLB  1
0AEC:  SUBWF  x5F,W
0AEE:  MOVWF  x67
0AF0:  MOVF   01,W
0AF2:  SUBWFB x60,W
0AF4:  MOVWF  x68
0AF6:  MOVF   02,W
0AF8:  SUBWFB x61,W
0AFA:  MOVWF  x69
0AFC:  MOVF   03,W
0AFE:  SUBWFB x62,W
0B00:  MOVWF  x6A
0B02:  CLRF   x6E
0B04:  CLRF   x6D
0B06:  CLRF   x6C
0B08:  MOVLW  64
0B0A:  MOVWF  x6B
0B0C:  MOVFF  166,172
0B10:  MOVFF  165,171
0B14:  MOVFF  164,170
0B18:  MOVFF  163,16F
0B1C:  MOVLB  0
0B1E:  RCALL  0906
0B20:  MOVFF  03,16E
0B24:  MOVFF  02,16D
0B28:  MOVFF  01,16C
0B2C:  MOVFF  00,16B
0B30:  BCF    FD8.1
0B32:  MOVFF  16A,1BD
0B36:  MOVFF  169,1BC
0B3A:  MOVFF  168,1BB
0B3E:  MOVFF  167,1BA
0B42:  MOVFF  03,1C1
0B46:  MOVFF  02,1C0
0B4A:  MOVFF  01,1BF
0B4E:  MOVFF  00,1BE
0B52:  RCALL  0960
0B54:  MOVFF  03,F6
0B58:  MOVFF  02,F5
0B5C:  MOVFF  01,F4
0B60:  MOVFF  00,F3
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
0B64:  MOVLW  08
0B66:  MOVWF  xFA
0B68:  CLRF   xF9
0B6A:  MOVLW  03
0B6C:  MOVWF  xF8
0B6E:  MOVLW  21
0B70:  MOVWF  xF7
....................   restart_wdt(); 
0B72:  CLRWDT
....................   Fvco++; 
0B74:  MOVLW  01
0B76:  MOVLB  1
0B78:  ADDWF  x5B,F
0B7A:  BTFSC  FD8.0
0B7C:  INCF   x5C,F
0B7E:  BTFSC  FD8.2
0B80:  INCF   x5D,F
0B82:  BTFSC  FD8.2
0B84:  INCF   x5E,F
0B86:  MOVLB  0
0B88:  RETURN 0
....................   } 
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
0B8A:  MOVLB  1
0B8C:  CLRF   x5C
0B8E:  MOVLB  0
0B90:  RLCF   xEF,W
0B92:  MOVLB  1
0B94:  MOVWF  x5D
0B96:  MOVLB  0
0B98:  RLCF   xF0,W
0B9A:  MOVLB  1
0B9C:  MOVWF  x5E
0B9E:  MOVLB  0
0BA0:  RLCF   xF1,W
0BA2:  MOVLB  1
0BA4:  MOVWF  x5F
0BA6:  RLCF   x5D,F
0BA8:  RLCF   x5E,F
0BAA:  RLCF   x5F,F
0BAC:  RLCF   x5D,F
0BAE:  RLCF   x5E,F
0BB0:  RLCF   x5F,F
0BB2:  RLCF   x5D,F
0BB4:  RLCF   x5E,F
0BB6:  RLCF   x5F,F
0BB8:  RLCF   x5D,F
0BBA:  RLCF   x5E,F
0BBC:  RLCF   x5F,F
0BBE:  RLCF   x5D,F
0BC0:  RLCF   x5E,F
0BC2:  RLCF   x5F,F
0BC4:  RLCF   x5D,F
0BC6:  RLCF   x5E,F
0BC8:  RLCF   x5F,F
0BCA:  MOVLW  80
0BCC:  ANDWF  x5D,F
0BCE:  MOVLB  0
0BD0:  RLCF   xF3,W
0BD2:  MOVWF  00
0BD4:  RLCF   xF4,W
0BD6:  MOVWF  01
0BD8:  RLCF   xF5,W
0BDA:  MOVWF  02
0BDC:  RLCF   xF6,W
0BDE:  MOVWF  03
0BE0:  RLCF   00,F
0BE2:  RLCF   01,F
0BE4:  RLCF   02,F
0BE6:  RLCF   03,F
0BE8:  RLCF   00,F
0BEA:  RLCF   01,F
0BEC:  RLCF   02,F
0BEE:  RLCF   03,F
0BF0:  MOVLW  F8
0BF2:  ANDWF  00,F
0BF4:  MOVF   00,W
0BF6:  MOVLB  1
0BF8:  ADDWF  x5C,W
0BFA:  MOVWF  x57
0BFC:  MOVF   01,W
0BFE:  ADDWFC x5D,W
0C00:  MOVWF  x58
0C02:  MOVF   02,W
0C04:  ADDWFC x5E,W
0C06:  MOVWF  x59
0C08:  MOVF   03,W
0C0A:  ADDWFC x5F,W
0C0C:  MOVWF  x5A
....................   PLL_frequency = prog; 
0C0E:  MOVFF  15A,FE
0C12:  MOVFF  159,FD
0C16:  MOVFF  158,FC
0C1A:  MOVFF  157,FB
....................   restart_wdt(); 
0C1E:  CLRWDT
....................   PLL_send_word(prog); 
0C20:  MOVFF  15A,15E
0C24:  MOVFF  159,15D
0C28:  MOVFF  158,15C
0C2C:  MOVFF  157,15B
0C30:  MOVLB  0
0C32:  RCALL  07B6
....................   delay_us(20); 
0C34:  CLRWDT
0C36:  MOVLW  19
0C38:  MOVWF  00
0C3A:  DECFSZ 00,F
0C3C:  BRA    0C3A
0C3E:  BRA    0C40
0C40:  NOP   
....................   restart_wdt(); 
0C42:  CLRWDT
....................   PLL_send_word(PLL_mod); 
0C44:  MOVFF  FA,15E
0C48:  MOVFF  F9,15D
0C4C:  MOVFF  F8,15C
0C50:  MOVFF  F7,15B
0C54:  RCALL  07B6
....................   delay_us(20); 
0C56:  CLRWDT
0C58:  MOVLW  19
0C5A:  MOVWF  00
0C5C:  DECFSZ 00,F
0C5E:  BRA    0C5C
0C60:  BRA    0C62
0C62:  NOP   
....................   restart_wdt(); 
0C64:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
0C66:  MOVFF  102,15E
0C6A:  MOVFF  101,15D
0C6E:  MOVFF  100,15C
0C72:  MOVFF  FF,15B
0C76:  RCALL  07B6
0C78:  RETURN 0
....................  
....................   } 
....................  
.................... void PLL_mute(void) 
.................... { 
....................   ULONG prog; 
....................     
....................     prog = 0x0095001CL;			//register 4 MTLD is '1' to mute the PLL 
*
16CA:  MOVLB  1
16CC:  CLRF   x58
16CE:  MOVLW  95
16D0:  MOVWF  x57
16D2:  CLRF   x56
16D4:  MOVLW  1C
16D6:  MOVWF  x55
....................     PLL_send_word(prog); 
16D8:  MOVFF  158,15E
16DC:  MOVFF  157,15D
16E0:  MOVFF  156,15C
16E4:  MOVFF  155,15B
16E8:  MOVLB  0
16EA:  CALL   07B6
16EE:  GOTO   2C4E (RETURN)
.................... } 
....................  
.................... /* 
.................... void PLL_unmute(void) 
.................... { 
.................... //  ULONG prog; 
....................     
.................... //    prog = 0x0095003CL;			//register 4 MTLD is '1' to mute the PLL 
.................... //    PLL_send_word(prog); 
.................... 	  ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
....................   PLL_frequency = prog; 
....................   restart_wdt(); 
....................   PLL_send_word(prog); 
....................   delay_us(20); 
....................   restart_wdt(); 
....................   PLL_send_word(PLL_mod); 
....................   delay_us(20); 
....................   restart_wdt(); 
....................   PLL_send_word(PLL_RFdiv); 
....................  
.................... } 
.................... */ 
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(250); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1533RX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0436:  BCF    F7E.0
0438:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
043C:  SETF   18
....................   TMR_1mS_Count++; 
043E:  INCF   19,F
....................   if (++TMR_1mS_Cnt >= 10) 
0440:  INCF   1A,F
0442:  MOVF   1A,W
0444:  SUBLW  09
0446:  BC    0466
....................     { 
....................     TMR_1mS_Cnt = 0; 
0448:  CLRF   1A
....................     TMR_10mS_Count++; 
044A:  INCF   1B,F
....................     TMR_10mS_Flags = 0xFF; 
044C:  SETF   1C
....................     if (++TMR_10mS_Cnt >= 10) 
044E:  INCF   1D,F
0450:  MOVF   1D,W
0452:  SUBLW  09
0454:  BC    0466
....................       { 
....................       TMR_10mS_Cnt = 0; 
0456:  CLRF   1D
....................       TMR_100mS_Flags = 0xFF; 
0458:  SETF   1E
....................       if (++TMR_100mS_Cnt >= 10) 
045A:  INCF   1F,F
045C:  MOVF   1F,W
045E:  SUBLW  09
0460:  BC    0466
....................         { 
....................         TMR_100mS_Cnt = 0; 
0462:  CLRF   1F
....................         TMR_1sec_Flags = 0xFF; 
0464:  SETF   20
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0466:  BCF    F9E.1
0468:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
046C:  BCF    FF2.1
046E:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0472:  BCF    FF0.0
0474:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0478:  MOVFF  FAE,1C7
....................   COM1_rbuf[COM1_rxi] = x; 
047C:  CLRF   03
047E:  MOVF   32,W
0480:  ADDLW  34
0482:  MOVWF  FE9
0484:  MOVLW  00
0486:  ADDWFC 03,W
0488:  MOVWF  FEA
048A:  MOVFF  1C7,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
048E:  INCF   32,F
0490:  MOVF   32,W
0492:  SUBLW  1F
0494:  BC    0498
....................     COM1_rxi = 0; 
0496:  CLRF   32
....................   if (COM1_rcnt < COM1_RX_LEN) 
0498:  MOVF   31,W
049A:  SUBLW  1F
049C:  BNC   04A0
....................     COM1_rcnt++; 
049E:  INCF   31,F
....................   } 
....................  
04A0:  BCF    F9E.5
04A2:  GOTO   0090
.................... #int_RDA2 
.................... void  RDA2_isr(void) 
....................   { 
....................   if(fpga_first_val == 1) 
04A6:  DECFSZ 2F,W
04A8:  BRA    04B6
04AA:  MOVF   30,F
04AC:  BNZ   04B6
.................... 	{ 
.................... 	count_1sec = 0; 
04AE:  CLRF   22
04B0:  CLRF   21
.................... 	fpga_first_val = 0; 
04B2:  CLRF   30
04B4:  CLRF   2F
.................... 	} 
....................   if(RCREG2 > 0) 
04B6:  MOVF   F74,F
04B8:  BZ    04C0
....................     pass_count = RCREG2;   
04BA:  CLRF   2E
04BC:  MOVFF  F74,2D
....................   } 
....................  
04C0:  BCF    FA4.5
04C2:  GOTO   0090
.................... #include "BA1533RX_serial.c" 
....................  
.................... UCHAR comm_ptr;  
.................... UCHAR  pa_command = setup.power_amp, on_command = 1, bit_mode = 0, auto_power = 0; 
.................... //UINT count_1sec = 0; 
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
1276:  CLRF   03
1278:  MOVF   33,W
127A:  ADDLW  34
127C:  MOVWF  FE9
127E:  MOVLW  00
1280:  ADDWFC 03,W
1282:  MOVWF  FEA
1284:  MOVFF  FEF,13E
....................   if (++COM1_rxo >= COM1_RX_LEN) 
1288:  INCF   33,F
128A:  MOVF   33,W
128C:  SUBLW  1F
128E:  BC    1292
....................     COM1_rxo = 0; 
1290:  CLRF   33
....................   if (COM1_rcnt) 
1292:  MOVF   31,F
1294:  BZ    1298
....................     COM1_rcnt--; 
1296:  DECF   31,F
....................   return x; 
1298:  MOVLB  1
129A:  MOVFF  13E,01
129E:  MOVLB  0
12A0:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
0CD4:  BCF    F9D.5
....................   pos = 0; 
0CD6:  MOVLB  1
0CD8:  CLRF   xB0
....................   while (*str) 
0CDA:  MOVFF  1AE,03
0CDE:  MOVFF  1AD,FE9
0CE2:  MOVFF  1AE,FEA
0CE6:  MOVF   FEF,F
0CE8:  BZ    0D5E
....................     { 
....................     x = *str++; 
0CEA:  MOVFF  1AE,03
0CEE:  MOVF   xAD,W
0CF0:  INCF   xAD,F
0CF2:  BTFSC  FD8.2
0CF4:  INCF   xAE,F
0CF6:  MOVWF  FE9
0CF8:  MOVFF  03,FEA
0CFC:  MOVFF  FEF,1AF
....................     if (x != '\t') 
0D00:  MOVF   xAF,W
0D02:  SUBLW  09
0D04:  BZ    0D26
....................       { 
....................       TXREG1 = x; 
0D06:  MOVFF  1AF,FAD
....................       pos++; 
0D0A:  INCF   xB0,F
....................       delay_us(300); 
0D0C:  CLRWDT
0D0E:  MOVLW  0D
0D10:  MOVWF  xB2
0D12:  MOVLW  16
0D14:  MOVWF  xB3
0D16:  MOVLB  0
0D18:  RCALL  0CB4
0D1A:  MOVLB  1
0D1C:  DECFSZ xB2,F
0D1E:  BRA    0D12
....................       x = RCREG1; 
0D20:  MOVFF  FAE,1AF
....................       } 
0D24:  BRA    0D5C
....................     else 
....................       { 
....................       tab_stop = 32; 
0D26:  MOVLW  20
0D28:  MOVWF  xB1
....................       if (pos >= tab_stop) 
0D2A:  MOVF   xB1,W
0D2C:  SUBWF  xB0,W
0D2E:  BNC   0D36
....................         tab_stop = pos + 2; 
0D30:  MOVLW  02
0D32:  ADDWF  xB0,W
0D34:  MOVWF  xB1
....................       while (pos < tab_stop) 
0D36:  MOVF   xB1,W
0D38:  SUBWF  xB0,W
0D3A:  BC    0D5C
....................         { 
....................         TXREG1 = ' '; 
0D3C:  MOVLW  20
0D3E:  MOVWF  FAD
....................         pos++; 
0D40:  INCF   xB0,F
....................         delay_us(300); 
0D42:  CLRWDT
0D44:  MOVLW  0D
0D46:  MOVWF  xB2
0D48:  MOVLW  16
0D4A:  MOVWF  xB3
0D4C:  MOVLB  0
0D4E:  RCALL  0CB4
0D50:  MOVLB  1
0D52:  DECFSZ xB2,F
0D54:  BRA    0D48
....................         x = RCREG1; 
0D56:  MOVFF  FAE,1AF
0D5A:  BRA    0D36
....................         } 
....................       } 
0D5C:  BRA    0CDA
....................     } 
....................   x = RCREG1; 
0D5E:  MOVFF  FAE,1AF
....................   enable_interrupts(int_RDA); 
0D62:  BSF    F9D.5
0D64:  MOVLB  0
0D66:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
*
064C:  CLRF   31
064E:  MOVFF  31,33
0652:  MOVFF  33,32
....................   comm_state = COMM_INIT; 
0656:  CLRF   54
....................   enable_interrupts(int_RDA); 
0658:  BSF    F9D.5
065A:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
12A2:  MOVLB  1
12A4:  MOVF   x03,W
12A6:  INCF   x03,F
12A8:  CLRF   03
12AA:  ADDLW  56
12AC:  MOVWF  FE9
12AE:  MOVLW  00
12B0:  ADDWFC 03,W
12B2:  MOVWF  FEA
12B4:  CLRF   03
12B6:  MOVFF  FEF,01
12BA:  MOVFF  03,02
12BE:  MOVLB  0
12C0:  RETURN 0
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
*
149E:  CLRF   03
14A0:  MOVLB  1
14A2:  MOVF   x03,W
14A4:  ADDLW  56
14A6:  MOVWF  FE9
14A8:  MOVLW  00
14AA:  ADDWFC 03,W
14AC:  MOVWF  FEA
14AE:  MOVF   FEF,F
14B0:  BZ    14E2
14B2:  CLRF   03
14B4:  MOVF   x03,W
14B6:  ADDLW  56
14B8:  MOVWF  FE9
14BA:  MOVLW  00
14BC:  ADDWFC 03,W
14BE:  MOVWF  FEA
14C0:  MOVF   FEF,W
14C2:  SUBLW  2C
14C4:  BZ    14DA
14C6:  CLRF   03
14C8:  MOVF   x03,W
14CA:  ADDLW  56
14CC:  MOVWF  FE9
14CE:  MOVLW  00
14D0:  ADDWFC 03,W
14D2:  MOVWF  FEA
14D4:  MOVF   FEF,W
14D6:  SUBLW  20
14D8:  BNZ   14E2
....................     comm_ptr++; 
14DA:  INCF   x03,F
14DC:  MOVLB  0
14DE:  BRA    149E
14E0:  MOVLB  1
14E2:  MOVLB  0
14E4:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
....................   skip_spc(); 
14E6:  RCALL  149E
....................   return comm_buf[comm_ptr]; 
14E8:  CLRF   03
14EA:  MOVLB  1
14EC:  MOVF   x03,W
14EE:  ADDLW  56
14F0:  MOVWF  FE9
14F2:  MOVLW  00
14F4:  ADDWFC 03,W
14F6:  MOVWF  FEA
14F8:  CLRF   03
14FA:  MOVFF  FEF,01
14FE:  MOVFF  03,02
1502:  MOVLB  0
1504:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  
.................... #separate 
.................... SINT get_int(void) 
*
155A:  MOVLB  1
155C:  CLRF   x5A
155E:  MOVLW  01
1560:  MOVWF  x59
....................   { 
....................   SINT num, sign = 1; 
....................   skip_spc(); 
1562:  MOVLB  0
1564:  RCALL  149E
....................   if (comm_buf[comm_ptr]) 
1566:  CLRF   03
1568:  MOVLB  1
156A:  MOVF   x03,W
156C:  ADDLW  56
156E:  MOVWF  FE9
1570:  MOVLW  00
1572:  ADDWFC 03,W
1574:  MOVWF  FEA
1576:  MOVF   FEF,F
1578:  BZ    15FA
....................     { 
....................     num = 0; 
157A:  CLRF   x58
157C:  CLRF   x57
....................     if (peek_char() == '-') 
157E:  MOVLB  0
1580:  RCALL  14E6
1582:  MOVFF  02,15C
1586:  MOVFF  01,15B
158A:  MOVLB  1
158C:  MOVF   01,W
158E:  SUBLW  2D
1590:  BNZ   15A0
1592:  MOVF   x5C,F
1594:  BNZ   15A0
....................       { 
....................       sign = -1; 
1596:  SETF   x5A
1598:  SETF   x59
....................       get_char(); 
159A:  MOVLB  0
159C:  RCALL  12A2
159E:  MOVLB  1
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
15A0:  CLRF   03
15A2:  MOVF   x03,W
15A4:  ADDLW  56
15A6:  MOVWF  FE9
15A8:  MOVLW  00
15AA:  ADDWFC 03,W
15AC:  MOVWF  FEA
15AE:  MOVFF  FEF,15B
15B2:  MOVF   x5B,W
15B4:  SUBLW  2F
15B6:  BC    15FA
15B8:  MOVF   x5B,W
15BA:  SUBLW  39
15BC:  BNC   15FA
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
15BE:  MOVFF  158,15C
15C2:  MOVFF  157,15B
15C6:  CLRF   x5E
15C8:  MOVLW  0A
15CA:  MOVWF  x5D
15CC:  MOVLB  0
15CE:  RCALL  1506
15D0:  MOVFF  02,15C
15D4:  MOVFF  01,15B
15D8:  MOVLB  1
15DA:  MOVF   x03,W
15DC:  INCF   x03,F
15DE:  CLRF   03
15E0:  ADDLW  56
15E2:  MOVWF  FE9
15E4:  MOVLW  00
15E6:  ADDWFC 03,W
15E8:  MOVWF  FEA
15EA:  MOVLW  30
15EC:  SUBWF  FEF,W
15EE:  ADDWF  01,W
15F0:  MOVWF  x57
15F2:  MOVLW  00
15F4:  ADDWFC 02,W
15F6:  MOVWF  x58
15F8:  BRA    15A0
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
15FA:  MOVFF  158,15C
15FE:  MOVFF  157,15B
1602:  MOVFF  15A,15E
1606:  MOVFF  159,15D
160A:  MOVLB  0
160C:  RCALL  1506
160E:  MOVFF  02,03
1612:  MOVFF  02,02
1616:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
....................   if (comm_buf[comm_ptr]) 
....................     { 
....................     num = 0; 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
....................     } 
....................   skip_spc(); 
....................   return num; 
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
....................   if (peek_char()) 
....................     { 
....................     num = 0; 
....................     while (isxdigit(peek_char())) 
....................       { 
....................       chr = get_char(); 
....................       chr = toupper(chr); 
....................       if (chr <= '9') 
....................         chr -= '0'; 
....................       else 
....................         chr = chr - ('A' - 10); 
....................       num = num * 16 + (ULONG)chr; 
....................       } 
....................     } 
....................   return num; 
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int(); 
1618:  RCALL  155A
161A:  MOVFF  02,156
161E:  MOVFF  01,155
....................   return freq; 
1622:  MOVLB  1
1624:  MOVFF  155,01
1628:  MOVFF  156,02
162C:  MOVLB  0
162E:  GOTO   2B24 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
*
12C2:  MOVLW  0D
12C4:  MOVLB  1
12C6:  MOVWF  x55
12C8:  MOVLW  0A
12CA:  MOVWF  x56
12CC:  CLRF   x57
12CE:  MOVLW  01
12D0:  MOVWF  xAE
12D2:  MOVLW  55
12D4:  MOVWF  xAD
12D6:  MOVLB  0
12D8:  RCALL  0CD4
....................   COM1_send_str("$F <frequency><cr>  \tSet frequency in 1MHz increments (i.e.5173 is 5.173GHz)\r\n"); 
12DA:  MOVLW  01
12DC:  MOVWF  FEA
12DE:  MOVLW  55
12E0:  MOVWF  FE9
12E2:  MOVFF  FF2,1A4
12E6:  BCF    FF2.7
12E8:  MOVLW  4F
12EA:  MOVWF  01
12EC:  CLRF   FF7
12EE:  MOVLW  00
12F0:  CALL   0104
12F4:  TBLRD*-
12F6:  TBLRD*+
12F8:  MOVFF  FF5,FEE
12FC:  DECFSZ 01,F
12FE:  BRA    12F6
1300:  MOVLB  1
1302:  BTFSC  xA4.7
1304:  BSF    FF2.7
1306:  MOVLW  01
1308:  MOVWF  xAE
130A:  MOVLW  55
130C:  MOVWF  xAD
130E:  MOVLB  0
1310:  RCALL  0CD4
....................   COM1_send_str("$ON <onoff><cr>  \tSet PLL RF OUT on(1) or off(0)\r\n"); 
1312:  MOVLW  01
1314:  MOVWF  FEA
1316:  MOVLW  55
1318:  MOVWF  FE9
131A:  MOVFF  FF2,1A4
131E:  BCF    FF2.7
1320:  MOVLW  33
1322:  MOVWF  01
1324:  CLRF   FF7
1326:  MOVLW  00
1328:  CALL   016E
132C:  TBLRD*-
132E:  TBLRD*+
1330:  MOVFF  FF5,FEE
1334:  DECFSZ 01,F
1336:  BRA    132E
1338:  MOVLB  1
133A:  BTFSC  xA4.7
133C:  BSF    FF2.7
133E:  MOVLW  01
1340:  MOVWF  xAE
1342:  MOVLW  55
1344:  MOVWF  xAD
1346:  MOVLB  0
1348:  RCALL  0CD4
....................   COM1_send_str("$PS <power><cr>  \tSet amp power on(1) or off(0)\r\n"); 
134A:  MOVLW  01
134C:  MOVWF  FEA
134E:  MOVLW  55
1350:  MOVWF  FE9
1352:  MOVFF  FF2,1A4
1356:  BCF    FF2.7
1358:  MOVLW  32
135A:  MOVWF  01
135C:  CLRF   FF7
135E:  MOVLW  00
1360:  CALL   01BC
1364:  TBLRD*-
1366:  TBLRD*+
1368:  MOVFF  FF5,FEE
136C:  DECFSZ 01,F
136E:  BRA    1366
1370:  MOVLB  1
1372:  BTFSC  xA4.7
1374:  BSF    FF2.7
1376:  MOVLW  01
1378:  MOVWF  xAE
137A:  MOVLW  55
137C:  MOVWF  xAD
137E:  MOVLB  0
1380:  RCALL  0CD4
....................   COM1_send_str("$P <level><cr>  \tSet power level high(1) or low(0)\r\n"); 
1382:  MOVLW  01
1384:  MOVWF  FEA
1386:  MOVLW  55
1388:  MOVWF  FE9
138A:  MOVFF  FF2,1A4
138E:  BCF    FF2.7
1390:  MOVLW  35
1392:  MOVWF  01
1394:  CLRF   FF7
1396:  MOVLW  00
1398:  CALL   0208
139C:  TBLRD*-
139E:  TBLRD*+
13A0:  MOVFF  FF5,FEE
13A4:  DECFSZ 01,F
13A6:  BRA    139E
13A8:  MOVLB  1
13AA:  BTFSC  xA4.7
13AC:  BSF    FF2.7
13AE:  MOVLW  01
13B0:  MOVWF  xAE
13B2:  MOVLW  55
13B4:  MOVWF  xAD
13B6:  MOVLB  0
13B8:  RCALL  0CD4
....................   COM1_send_str("$LD <fwd><cr>  \tSet Fwd power measurement on(1) or off(0)\r\n"); 
13BA:  MOVLW  01
13BC:  MOVWF  FEA
13BE:  MOVLW  55
13C0:  MOVWF  FE9
13C2:  MOVFF  FF2,1A4
13C6:  BCF    FF2.7
13C8:  MOVLW  3C
13CA:  MOVWF  01
13CC:  CLRF   FF7
13CE:  MOVLW  00
13D0:  CALL   0258
13D4:  TBLRD*-
13D6:  TBLRD*+
13D8:  MOVFF  FF5,FEE
13DC:  DECFSZ 01,F
13DE:  BRA    13D6
13E0:  MOVLB  1
13E2:  BTFSC  xA4.7
13E4:  BSF    FF2.7
13E6:  MOVLW  01
13E8:  MOVWF  xAE
13EA:  MOVLW  55
13EC:  MOVWF  xAD
13EE:  MOVLB  0
13F0:  RCALL  0CD4
....................   COM1_send_str("$Q<cr>  \tRequest status\r\n"); 
13F2:  MOVLW  01
13F4:  MOVWF  FEA
13F6:  MOVLW  55
13F8:  MOVWF  FE9
13FA:  MOVFF  FF2,1A4
13FE:  BCF    FF2.7
1400:  MOVLW  1A
1402:  MOVWF  01
1404:  CLRF   FF7
1406:  MOVLW  00
1408:  CALL   02AE
140C:  TBLRD*-
140E:  TBLRD*+
1410:  MOVFF  FF5,FEE
1414:  DECFSZ 01,F
1416:  BRA    140E
1418:  MOVLB  1
141A:  BTFSC  xA4.7
141C:  BSF    FF2.7
141E:  MOVLW  01
1420:  MOVWF  xAE
1422:  MOVLW  55
1424:  MOVWF  xAD
1426:  MOVLB  0
1428:  RCALL  0CD4
....................   COM1_send_str("$BM<cr>  \tBIT Mode ON(1) OFF(0)\r\n"); 
142A:  MOVLW  01
142C:  MOVWF  FEA
142E:  MOVLW  55
1430:  MOVWF  FE9
1432:  MOVFF  FF2,1A4
1436:  BCF    FF2.7
1438:  MOVLW  22
143A:  MOVWF  01
143C:  CLRF   FF7
143E:  MOVLW  00
1440:  CALL   02E2
1444:  TBLRD*-
1446:  TBLRD*+
1448:  MOVFF  FF5,FEE
144C:  DECFSZ 01,F
144E:  BRA    1446
1450:  MOVLB  1
1452:  BTFSC  xA4.7
1454:  BSF    FF2.7
1456:  MOVLW  01
1458:  MOVWF  xAE
145A:  MOVLW  55
145C:  MOVWF  xAD
145E:  MOVLB  0
1460:  RCALL  0CD4
....................   COM1_send_str("$TR<cr>  \tTRANSIVER(T) RECIVER(R)"); 
1462:  MOVLW  01
1464:  MOVWF  FEA
1466:  MOVLW  55
1468:  MOVWF  FE9
146A:  MOVFF  FF2,1A4
146E:  BCF    FF2.7
1470:  MOVLW  22
1472:  MOVWF  01
1474:  CLRF   FF7
1476:  MOVLW  00
1478:  CALL   031E
147C:  TBLRD*-
147E:  TBLRD*+
1480:  MOVFF  FF5,FEE
1484:  DECFSZ 01,F
1486:  BRA    147E
1488:  MOVLB  1
148A:  BTFSC  xA4.7
148C:  BSF    FF2.7
148E:  MOVLW  01
1490:  MOVWF  xAE
1492:  MOVLW  55
1494:  MOVWF  xAD
1496:  MOVLB  0
1498:  RCALL  0CD4
149A:  GOTO   2B18 (RETURN)
....................   //COM1_send_str("\r\n"); 
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... void send_raw_status(void) 
....................   { 
.................... 	UCHAR buf[64] ; 
.................... 	UINT iv3p3, iv28; 
.................... 	float v3p3, v28; 
.................... 	set_adc_channel(A2D_Vdd); // select 3.3v power input 
*
2868:  MOVLW  00
286A:  MOVWF  01
286C:  MOVF   FC2,W
286E:  ANDLW  83
2870:  IORWF  01,W
2872:  MOVWF  FC2
....................   	delay_us(20); 
2874:  CLRWDT
2876:  MOVLW  19
2878:  MOVWF  00
287A:  DECFSZ 00,F
287C:  BRA    287A
287E:  BRA    2880
2880:  NOP   
....................   	iv3p3 = read_adc(); 
2882:  BSF    FC2.1
2884:  BTFSC  FC2.1
2886:  BRA    2884
2888:  MOVFF  FC4,196
288C:  MOVLB  1
288E:  MOVFF  FC3,195
....................  
.................... 	set_adc_channel(A2D_POWER); // select 28v power input 
2892:  MOVLW  20
2894:  MOVWF  01
2896:  MOVF   FC2,W
2898:  ANDLW  83
289A:  IORWF  01,W
289C:  MOVWF  FC2
....................   	delay_us(20); 
289E:  CLRWDT
28A0:  MOVLW  19
28A2:  MOVWF  00
28A4:  DECFSZ 00,F
28A6:  BRA    28A4
28A8:  BRA    28AA
28AA:  NOP   
....................   	iv28 = read_adc(); 
28AC:  BSF    FC2.1
28AE:  BTFSC  FC2.1
28B0:  BRA    28AE
28B2:  MOVFF  FC3,197
28B6:  MOVFF  FC4,198
....................  
.................... 	v3p3 = (float)iv3p3 / 1024.0 * 3.3; 
28BA:  MOVFF  196,1B4
28BE:  MOVFF  195,1B3
28C2:  MOVLB  0
28C4:  CALL   1720
28C8:  MOVFF  03,1A4
28CC:  MOVFF  02,1A3
28D0:  MOVFF  01,1A2
28D4:  MOVFF  00,1A1
28D8:  MOVFF  03,1B4
28DC:  MOVFF  02,1B3
28E0:  MOVFF  01,1B2
28E4:  MOVFF  00,1B1
28E8:  MOVLB  1
28EA:  CLRF   xB8
28EC:  CLRF   xB7
28EE:  CLRF   xB6
28F0:  MOVLW  89
28F2:  MOVWF  xB5
28F4:  MOVLB  0
28F6:  CALL   1888
28FA:  MOVFF  03,1A4
28FE:  MOVFF  02,1A3
2902:  MOVFF  01,1A2
2906:  MOVFF  00,1A1
290A:  MOVFF  03,1BD
290E:  MOVFF  02,1BC
2912:  MOVFF  01,1BB
2916:  MOVFF  00,1BA
291A:  MOVLW  33
291C:  MOVLB  1
291E:  MOVWF  xC1
2920:  MOVWF  xC0
2922:  MOVLW  53
2924:  MOVWF  xBF
2926:  MOVLW  80
2928:  MOVWF  xBE
292A:  MOVLB  0
292C:  CALL   1756
2930:  MOVFF  03,19C
2934:  MOVFF  02,19B
2938:  MOVFF  01,19A
293C:  MOVFF  00,199
.................... 	v28 = (float)iv28 / 1024.0 * 36.3;  //36.3 = 3.3 * 11  
2940:  MOVFF  198,1B4
2944:  MOVFF  197,1B3
2948:  CALL   1720
294C:  MOVFF  03,1A4
2950:  MOVFF  02,1A3
2954:  MOVFF  01,1A2
2958:  MOVFF  00,1A1
295C:  MOVFF  03,1B4
2960:  MOVFF  02,1B3
2964:  MOVFF  01,1B2
2968:  MOVFF  00,1B1
296C:  MOVLB  1
296E:  CLRF   xB8
2970:  CLRF   xB7
2972:  CLRF   xB6
2974:  MOVLW  89
2976:  MOVWF  xB5
2978:  MOVLB  0
297A:  CALL   1888
297E:  MOVFF  03,1A4
2982:  MOVFF  02,1A3
2986:  MOVFF  01,1A2
298A:  MOVFF  00,1A1
298E:  MOVFF  03,1BD
2992:  MOVFF  02,1BC
2996:  MOVFF  01,1BB
299A:  MOVFF  00,1BA
299E:  MOVLW  33
29A0:  MOVLB  1
29A2:  MOVWF  xC1
29A4:  MOVWF  xC0
29A6:  MOVLW  11
29A8:  MOVWF  xBF
29AA:  MOVLW  84
29AC:  MOVWF  xBE
29AE:  MOVLB  0
29B0:  CALL   1756
29B4:  MOVFF  03,1A0
29B8:  MOVFF  02,19F
29BC:  MOVFF  01,19E
29C0:  MOVFF  00,19D
.................... 	sprintf(buf, "\r\n3.3v power in=%2.1f(v) 28v power in=%2.1f(v)",v3p3, v28); 
29C4:  MOVLW  01
29C6:  MOVLB  1
29C8:  MOVWF  x09
29CA:  MOVLW  55
29CC:  MOVWF  x08
29CE:  MOVLW  C6
29D0:  MOVWF  FF6
29D2:  MOVLW  04
29D4:  MOVWF  FF7
29D6:  MOVLW  10
29D8:  MOVWF  xAD
29DA:  MOVLB  0
29DC:  CALL   1C7E
29E0:  MOVLW  01
29E2:  MOVWF  FE9
29E4:  MOVFF  19C,1B0
29E8:  MOVFF  19B,1AF
29EC:  MOVFF  19A,1AE
29F0:  MOVFF  199,1AD
29F4:  MOVLB  1
29F6:  MOVWF  xB1
29F8:  MOVLB  0
29FA:  CALL   1DA6
29FE:  MOVLW  DB
2A00:  MOVWF  FF6
2A02:  MOVLW  04
2A04:  MOVWF  FF7
2A06:  MOVLW  11
2A08:  MOVLB  1
2A0A:  MOVWF  xAD
2A0C:  MOVLB  0
2A0E:  CALL   1C7E
2A12:  MOVLW  01
2A14:  MOVWF  FE9
2A16:  MOVFF  1A0,1B0
2A1A:  MOVFF  19F,1AF
2A1E:  MOVFF  19E,1AE
2A22:  MOVFF  19D,1AD
2A26:  MOVLB  1
2A28:  MOVWF  xB1
2A2A:  MOVLB  0
2A2C:  CALL   1DA6
2A30:  MOVLW  F1
2A32:  MOVWF  FF6
2A34:  MOVLW  04
2A36:  MOVWF  FF7
2A38:  MOVLW  03
2A3A:  MOVLB  1
2A3C:  MOVWF  xAD
2A3E:  MOVLB  0
2A40:  CALL   1C7E
.................... 	COM1_send_str(buf); 
2A44:  MOVLW  01
2A46:  MOVLB  1
2A48:  MOVWF  xAE
2A4A:  MOVLW  55
2A4C:  MOVWF  xAD
2A4E:  MOVLB  0
2A50:  CALL   0CD4
2A54:  GOTO   351E (RETURN)
....................   } 
....................  
....................  
.................... //rssi_table[11][2]; 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void send_status(void) 
*
210E:  MOVLB  1
2110:  CLRF   xA2
2112:  CLRF   xA1
2114:  CLRF   xA0
2116:  MOVLW  7F
2118:  MOVWF  x9F
211A:  CLRF   xA6
211C:  CLRF   xA5
211E:  CLRF   xA4
2120:  MOVWF  xA3
2122:  CLRF   xAA
2124:  CLRF   xA9
2126:  CLRF   xA8
2128:  CLRF   xA7
....................   { 
....................   UINT  itemp, idx, rssi; 
....................   UCHAR buf[64] ; 
....................   float temp ; 
....................    
.................... 			//s				t		k 
....................   float numerator=1,denominator=1,res=0; 
....................  
....................  
....................   
.................... //  UINT fwdp, revp, muxout; 
....................  
....................   //set_adc_channel(A2D_PREV); // select RSSI power input 
....................   //delay_us(20); 
....................   //rssi = read_adc(); 
....................  
....................   set_adc_channel(A2D_PREV); // select RSSI power input 
212A:  MOVLW  14
212C:  MOVWF  01
212E:  MOVF   FC2,W
2130:  ANDLW  83
2132:  IORWF  01,W
2134:  MOVWF  FC2
....................   delay_us(20); 
2136:  CLRWDT
2138:  MOVLW  19
213A:  MOVWF  00
213C:  DECFSZ 00,F
213E:  BRA    213C
2140:  BRA    2142
2142:  NOP   
....................   rssi = read_adc(); 
2144:  BSF    FC2.1
2146:  BTFSC  FC2.1
2148:  BRA    2146
214A:  MOVFF  FC3,159
214E:  MOVFF  FC4,15A
....................  
....................  
.................... /////rssi = a 
.................... //rssi_table[x][0] - x 
.................... //rssi_table[x][1] - y 
.................... int i, j; 
.................... for(i=0; i<n; i++) 
2152:  CLRF   xAB
2154:  BTFSC  xAB.0
2156:  BRA    234E
2158:  BTFSS  FD8.4
215A:  BRA    234E
....................         { 
....................             numerator=1; 
215C:  CLRF   xA2
215E:  CLRF   xA1
2160:  CLRF   xA0
2162:  MOVLW  7F
2164:  MOVWF  x9F
....................             denominator=1; 
2166:  CLRF   xA6
2168:  CLRF   xA5
216A:  CLRF   xA4
216C:  MOVWF  xA3
....................             for(j=0; j<n; j++) 
216E:  CLRF   xAC
2170:  BTFSC  xAC.0
2172:  BRA    2268
2174:  BNN   2268
....................             { 
....................                 if(j!=i) 
2176:  MOVF   xAB,W
2178:  SUBWF  xAC,W
217A:  BZ    2264
....................                 { 
....................                     numerator=numerator*(rssi-setup.rssi_table[j][0]); 
217C:  MOVF   xAC,W
217E:  MULLW  04
2180:  MOVF   FF3,W
2182:  CLRF   03
2184:  ADDLW  BD
2186:  MOVWF  FE9
2188:  MOVLW  00
218A:  ADDWFC 03,W
218C:  MOVWF  FEA
218E:  MOVFF  FEC,03
2192:  MOVF   FED,F
2194:  MOVF   FEF,W
2196:  SUBWF  x59,W
2198:  MOVWF  00
219A:  MOVF   03,W
219C:  SUBWFB x5A,W
219E:  MOVWF  03
21A0:  MOVFF  00,1B3
21A4:  MOVWF  xB4
21A6:  MOVLB  0
21A8:  CALL   1720
21AC:  MOVFF  1A2,1BD
21B0:  MOVFF  1A1,1BC
21B4:  MOVFF  1A0,1BB
21B8:  MOVFF  19F,1BA
21BC:  MOVFF  03,1C1
21C0:  MOVFF  02,1C0
21C4:  MOVFF  01,1BF
21C8:  MOVFF  00,1BE
21CC:  CALL   1756
21D0:  MOVFF  03,1A2
21D4:  MOVFF  02,1A1
21D8:  MOVFF  01,1A0
21DC:  MOVFF  00,19F
....................                     denominator=denominator*(setup.rssi_table[i][0]-setup.rssi_table[j][0]); 
21E0:  MOVLB  1
21E2:  MOVF   xAB,W
21E4:  MULLW  04
21E6:  MOVF   FF3,W
21E8:  CLRF   03
21EA:  ADDLW  BD
21EC:  MOVWF  FE9
21EE:  MOVLW  00
21F0:  ADDWFC 03,W
21F2:  MOVWF  FEA
21F4:  MOVFF  FEC,1B0
21F8:  MOVF   FED,F
21FA:  MOVFF  FEF,1AF
21FE:  MOVF   xAC,W
2200:  MULLW  04
2202:  MOVF   FF3,W
2204:  CLRF   03
2206:  ADDLW  BD
2208:  MOVWF  FE9
220A:  MOVLW  00
220C:  ADDWFC 03,W
220E:  MOVWF  FEA
2210:  MOVFF  FEC,03
2214:  MOVF   FED,F
2216:  MOVF   FEF,W
2218:  SUBWF  xAF,W
221A:  MOVWF  00
221C:  MOVF   03,W
221E:  SUBWFB xB0,W
2220:  MOVWF  03
2222:  MOVFF  00,1B3
2226:  MOVWF  xB4
2228:  MOVLB  0
222A:  CALL   1720
222E:  MOVFF  1A6,1BD
2232:  MOVFF  1A5,1BC
2236:  MOVFF  1A4,1BB
223A:  MOVFF  1A3,1BA
223E:  MOVFF  03,1C1
2242:  MOVFF  02,1C0
2246:  MOVFF  01,1BF
224A:  MOVFF  00,1BE
224E:  CALL   1756
2252:  MOVFF  03,1A6
2256:  MOVFF  02,1A5
225A:  MOVFF  01,1A4
225E:  MOVFF  00,1A3
2262:  MOVLB  1
....................                 } 
2264:  INCF   xAC,F
2266:  BRA    2170
....................             } 
....................             res=res+((numerator/denominator)*setup.rssi_table[i][1]); 
2268:  MOVFF  1A2,1B4
226C:  MOVFF  1A1,1B3
2270:  MOVFF  1A0,1B2
2274:  MOVFF  19F,1B1
2278:  MOVFF  1A6,1B8
227C:  MOVFF  1A5,1B7
2280:  MOVFF  1A4,1B6
2284:  MOVFF  1A3,1B5
2288:  MOVLB  0
228A:  CALL   1888
228E:  MOVFF  03,1B0
2292:  MOVFF  02,1AF
2296:  MOVFF  01,1AE
229A:  MOVFF  00,1AD
229E:  MOVLB  1
22A0:  MOVF   xAB,W
22A2:  MULLW  04
22A4:  MOVF   FF3,W
22A6:  CLRF   03
22A8:  ADDLW  15
22AA:  MOVWF  xB1
22AC:  MOVLW  00
22AE:  ADDWFC 03,W
22B0:  MOVWF  xB2
22B2:  MOVLW  02
22B4:  ADDWF  xB1,W
22B6:  MOVWF  01
22B8:  MOVLW  00
22BA:  ADDWFC xB2,W
22BC:  MOVWF  03
22BE:  MOVF   01,W
22C0:  ADDLW  A8
22C2:  MOVWF  FE9
22C4:  MOVLW  00
22C6:  ADDWFC 03,W
22C8:  MOVWF  FEA
22CA:  MOVFF  FEC,03
22CE:  MOVF   FED,F
22D0:  MOVFF  FEF,1B3
22D4:  MOVFF  03,1B4
22D8:  MOVLB  0
22DA:  CALL   1720
22DE:  MOVFF  1B0,1BD
22E2:  MOVFF  1AF,1BC
22E6:  MOVFF  1AE,1BB
22EA:  MOVFF  1AD,1BA
22EE:  MOVFF  03,1C1
22F2:  MOVFF  02,1C0
22F6:  MOVFF  01,1BF
22FA:  MOVFF  00,1BE
22FE:  CALL   1756
2302:  MOVFF  FEA,1AE
2306:  MOVFF  FE9,1AD
230A:  BCF    FD8.1
230C:  MOVFF  1AA,1B2
2310:  MOVFF  1A9,1B1
2314:  MOVFF  1A8,1B0
2318:  MOVFF  1A7,1AF
231C:  MOVFF  03,1B6
2320:  MOVFF  02,1B5
2324:  MOVFF  01,1B4
2328:  MOVFF  00,1B3
232C:  CALL   19E6
2330:  MOVFF  1AE,FEA
2334:  MOVFF  1AD,FE9
2338:  MOVFF  03,1AA
233C:  MOVFF  02,1A9
2340:  MOVFF  01,1A8
2344:  MOVFF  00,1A7
2348:  MOVLB  1
234A:  INCF   xAB,F
234C:  BRA    2154
....................         } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................   set_adc_channel(A2D_TEMP); // select tmperature  input 
234E:  MOVLW  18
2350:  MOVWF  01
2352:  MOVF   FC2,W
2354:  ANDLW  83
2356:  IORWF  01,W
2358:  MOVWF  FC2
....................   delay_us(20); 
235A:  CLRWDT
235C:  MOVLW  19
235E:  MOVWF  00
2360:  DECFSZ 00,F
2362:  BRA    2360
2364:  BRA    2366
2366:  NOP   
....................   itemp = read_adc(); 
2368:  BSF    FC2.1
236A:  BTFSC  FC2.1
236C:  BRA    236A
236E:  MOVFF  FC3,155
2372:  MOVFF  FC4,156
....................  
....................   temp = (float)itemp / 1024.0 * 3.3; 
2376:  MOVFF  156,1B4
237A:  MOVFF  155,1B3
237E:  MOVLB  0
2380:  CALL   1720
2384:  MOVFF  03,1B0
2388:  MOVFF  02,1AF
238C:  MOVFF  01,1AE
2390:  MOVFF  00,1AD
2394:  MOVFF  03,1B4
2398:  MOVFF  02,1B3
239C:  MOVFF  01,1B2
23A0:  MOVFF  00,1B1
23A4:  MOVLB  1
23A6:  CLRF   xB8
23A8:  CLRF   xB7
23AA:  CLRF   xB6
23AC:  MOVLW  89
23AE:  MOVWF  xB5
23B0:  MOVLB  0
23B2:  CALL   1888
23B6:  MOVFF  03,1B0
23BA:  MOVFF  02,1AF
23BE:  MOVFF  01,1AE
23C2:  MOVFF  00,1AD
23C6:  MOVFF  03,1BD
23CA:  MOVFF  02,1BC
23CE:  MOVFF  01,1BB
23D2:  MOVFF  00,1BA
23D6:  MOVLW  33
23D8:  MOVLB  1
23DA:  MOVWF  xC1
23DC:  MOVWF  xC0
23DE:  MOVLW  53
23E0:  MOVWF  xBF
23E2:  MOVLW  80
23E4:  MOVWF  xBE
23E6:  MOVLB  0
23E8:  CALL   1756
23EC:  MOVFF  03,19E
23F0:  MOVFF  02,19D
23F4:  MOVFF  01,19C
23F8:  MOVFF  00,19B
....................   temp -= 0.75; 
23FC:  BSF    FD8.1
23FE:  MOVFF  19E,1B2
2402:  MOVFF  19D,1B1
2406:  MOVFF  19C,1B0
240A:  MOVFF  19B,1AF
240E:  MOVLB  1
2410:  CLRF   xB6
2412:  CLRF   xB5
2414:  MOVLW  40
2416:  MOVWF  xB4
2418:  MOVLW  7E
241A:  MOVWF  xB3
241C:  MOVLB  0
241E:  CALL   19E6
2422:  MOVFF  03,19E
2426:  MOVFF  02,19D
242A:  MOVFF  01,19C
242E:  MOVFF  00,19B
....................   temp *= 100; 
2432:  MOVFF  19E,1BD
2436:  MOVFF  19D,1BC
243A:  MOVFF  19C,1BB
243E:  MOVFF  19B,1BA
2442:  MOVLB  1
2444:  CLRF   xC1
2446:  CLRF   xC0
2448:  MOVLW  48
244A:  MOVWF  xBF
244C:  MOVLW  85
244E:  MOVWF  xBE
2450:  MOVLB  0
2452:  CALL   1756
2456:  MOVFF  03,19E
245A:  MOVFF  02,19D
245E:  MOVFF  01,19C
2462:  MOVFF  00,19B
....................   temp += 25.0; 
2466:  BCF    FD8.1
2468:  MOVFF  19E,1B2
246C:  MOVFF  19D,1B1
2470:  MOVFF  19C,1B0
2474:  MOVFF  19B,1AF
2478:  MOVLB  1
247A:  CLRF   xB6
247C:  CLRF   xB5
247E:  MOVLW  48
2480:  MOVWF  xB4
2482:  MOVLW  83
2484:  MOVWF  xB3
2486:  MOVLB  0
2488:  CALL   19E6
248C:  MOVFF  03,19E
2490:  MOVFF  02,19D
2494:  MOVFF  01,19C
2498:  MOVFF  00,19B
....................    
....................   for (idx = 0; idx < 10; idx++) 
249C:  MOVLB  1
249E:  CLRF   x58
24A0:  CLRF   x57
24A2:  MOVF   x58,F
24A4:  BNZ   24EA
24A6:  MOVF   x57,W
24A8:  SUBLW  09
24AA:  BNC   24EA
....................     if (rssi <= setup.rssi_table[idx][0]) 
24AC:  RLCF   x57,W
24AE:  MOVWF  02
24B0:  RLCF   x58,W
24B2:  MOVWF  03
24B4:  RLCF   02,F
24B6:  RLCF   03,F
24B8:  MOVLW  FC
24BA:  ANDWF  02,F
24BC:  MOVF   02,W
24BE:  ADDLW  BD
24C0:  MOVWF  FE9
24C2:  MOVLW  00
24C4:  ADDWFC 03,W
24C6:  MOVWF  FEA
24C8:  MOVFF  FEC,03
24CC:  MOVF   FED,F
24CE:  MOVFF  FEF,01
24D2:  MOVF   x5A,W
24D4:  SUBWF  03,W
24D6:  BNC   24E2
24D8:  BNZ   24E0
24DA:  MOVF   x59,W
24DC:  SUBWF  01,W
24DE:  BNC   24E2
....................       break; 
24E0:  BRA    24EA
24E2:  INCF   x57,F
24E4:  BTFSC  FD8.2
24E6:  INCF   x58,F
24E8:  BRA    24A2
....................   rssi = setup.rssi_table[idx][1]; 
24EA:  RLCF   x57,W
24EC:  MOVWF  02
24EE:  RLCF   x58,W
24F0:  MOVWF  03
24F2:  RLCF   02,F
24F4:  RLCF   03,F
24F6:  MOVLW  FC
24F8:  ANDWF  02,F
24FA:  MOVF   02,W
24FC:  ADDLW  15
24FE:  MOVWF  xAD
2500:  MOVLW  00
2502:  ADDWFC 03,W
2504:  MOVWF  xAE
2506:  MOVLW  02
2508:  ADDWF  xAD,W
250A:  MOVWF  01
250C:  MOVLW  00
250E:  ADDWFC xAE,W
2510:  MOVWF  03
2512:  MOVF   01,W
2514:  ADDLW  A8
2516:  MOVWF  FE9
2518:  MOVLW  00
251A:  ADDWFC 03,W
251C:  MOVWF  FEA
251E:  MOVFF  FEC,15A
2522:  MOVF   FED,F
2524:  MOVFF  FEF,159
....................  
....................   sprintf(buf, "\r\nFREQ=%lu, RSSI=%ludBM, TEMP=%5.1f(c), ID=%lu, DC=%02lu%02u, VER %ls, ", 
....................           setup.frequency, rssi,  temp, setup.unit_ID, setup.year, setup.week, VERSION_V); 
2528:  MOVLW  01
252A:  MOVWF  x09
252C:  MOVLW  5B
252E:  MOVWF  x08
2530:  MOVLW  F6
2532:  MOVWF  FF6
2534:  MOVLW  04
2536:  MOVWF  FF7
2538:  MOVLW  07
253A:  MOVWF  xAD
253C:  MOVLB  0
253E:  CALL   1C7E
2542:  MOVLW  10
2544:  MOVWF  FE9
2546:  MOVFF  AA,1AE
254A:  MOVFF  A9,1AD
254E:  CALL   1CA6
2552:  MOVLW  00
2554:  MOVWF  FF6
2556:  MOVLW  05
2558:  MOVWF  FF7
255A:  MOVLW  07
255C:  MOVLB  1
255E:  MOVWF  xAD
2560:  MOVLB  0
2562:  CALL   1C7E
2566:  MOVLW  10
2568:  MOVWF  FE9
256A:  MOVFF  15A,1AE
256E:  MOVFF  159,1AD
2572:  CALL   1CA6
2576:  MOVLW  0A
2578:  MOVWF  FF6
257A:  MOVLW  05
257C:  MOVWF  FF7
257E:  MOVLW  0A
2580:  MOVLB  1
2582:  MOVWF  xAD
2584:  MOVLB  0
2586:  CALL   1C7E
258A:  MOVLW  04
258C:  MOVWF  FE9
258E:  MOVFF  19E,1B0
2592:  MOVFF  19D,1AF
2596:  MOVFF  19C,1AE
259A:  MOVFF  19B,1AD
259E:  MOVLW  01
25A0:  MOVLB  1
25A2:  MOVWF  xB1
25A4:  MOVLB  0
25A6:  CALL   1DA6
25AA:  MOVLW  19
25AC:  MOVWF  FF6
25AE:  MOVLW  05
25B0:  MOVWF  FF7
25B2:  MOVLW  08
25B4:  MOVLB  1
25B6:  MOVWF  xAD
25B8:  MOVLB  0
25BA:  CALL   1C7E
25BE:  MOVLW  10
25C0:  MOVWF  FE9
25C2:  MOVFF  BC,1AE
25C6:  MOVFF  BB,1AD
25CA:  CALL   1CA6
25CE:  MOVLW  24
25D0:  MOVWF  FF6
25D2:  MOVLW  05
25D4:  MOVWF  FF7
25D6:  MOVLW  05
25D8:  MOVLB  1
25DA:  MOVWF  xAD
25DC:  MOVLB  0
25DE:  CALL   1C7E
25E2:  MOVLW  0B
25E4:  MOVWF  FE9
25E6:  MOVFF  B9,1AE
25EA:  MOVFF  B8,1AD
25EE:  CALL   1CA6
25F2:  MOVFF  BA,1AD
25F6:  MOVLW  01
25F8:  MOVLB  1
25FA:  MOVWF  xAE
25FC:  MOVLB  0
25FE:  BRA    1F7C
2600:  MOVLW  32
2602:  MOVWF  FF6
2604:  MOVLW  05
2606:  MOVWF  FF7
2608:  MOVLW  06
260A:  MOVLB  1
260C:  MOVWF  xAD
260E:  MOVLB  0
2610:  CALL   1C7E
2614:  MOVLW  3E
2616:  MOVWF  FF6
2618:  MOVLW  05
261A:  MOVWF  FF7
261C:  RCALL  1FFA
261E:  MOVLW  2C
2620:  MOVLB  1
2622:  MOVWF  xBA
2624:  MOVLB  0
2626:  CALL   1C5E
262A:  MOVLW  20
262C:  MOVLB  1
262E:  MOVWF  xBA
2630:  MOVLB  0
2632:  CALL   1C5E
.................... 		  //setup.frequency, resultat,  temp, setup.unit_ID, setup.year, setup.week, VERSION_V); 
....................   COM1_send_str(buf); 
2636:  MOVLW  01
2638:  MOVLB  1
263A:  MOVWF  xAE
263C:  MOVLW  5B
263E:  MOVWF  xAD
2640:  MOVLB  0
2642:  CALL   0CD4
....................  
....................   if(setup.meter_backlight == 1) 
2646:  DECFSZ xB7,W
2648:  BRA    2662
....................   sprintf(buf, "LIGHT=ON, "); 
264A:  MOVLW  01
264C:  MOVLB  1
264E:  MOVWF  x09
2650:  MOVLW  5B
2652:  MOVWF  x08
2654:  MOVLW  44
2656:  MOVWF  FF6
2658:  MOVLW  05
265A:  MOVWF  FF7
265C:  MOVLB  0
265E:  RCALL  1FFA
2660:  BRA    2678
....................   else  
....................   sprintf(buf, "LIGHT=OFF, "); 
2662:  MOVLW  01
2664:  MOVLB  1
2666:  MOVWF  x09
2668:  MOVLW  5B
266A:  MOVWF  x08
266C:  MOVLW  50
266E:  MOVWF  FF6
2670:  MOVLW  05
2672:  MOVWF  FF7
2674:  MOVLB  0
2676:  RCALL  1FFA
....................   COM1_send_str(buf); 
2678:  MOVLW  01
267A:  MOVLB  1
267C:  MOVWF  xAE
267E:  MOVLW  5B
2680:  MOVWF  xAD
2682:  MOVLB  0
2684:  CALL   0CD4
....................   
....................   if(pass_count > PASS_FAIL_TRESHOLD) 
2688:  MOVF   2E,F
268A:  BNZ   2692
268C:  MOVF   2D,W
268E:  SUBLW  60
2690:  BC    26D6
....................   	sprintf(buf, "PASS Bit=%ld, ",pass_count); 
2692:  MOVLW  01
2694:  MOVLB  1
2696:  MOVWF  x09
2698:  MOVLW  5B
269A:  MOVWF  x08
269C:  MOVLW  5C
269E:  MOVWF  FF6
26A0:  MOVLW  05
26A2:  MOVWF  FF7
26A4:  MOVLW  09
26A6:  MOVWF  xAD
26A8:  MOVLB  0
26AA:  CALL   1C7E
26AE:  MOVLW  10
26B0:  MOVWF  FE9
26B2:  MOVFF  2E,1AE
26B6:  MOVFF  2D,1AD
26BA:  RCALL  201A
26BC:  MOVLW  2C
26BE:  MOVLB  1
26C0:  MOVWF  xBA
26C2:  MOVLB  0
26C4:  CALL   1C5E
26C8:  MOVLW  20
26CA:  MOVLB  1
26CC:  MOVWF  xBA
26CE:  MOVLB  0
26D0:  CALL   1C5E
26D4:  BRA    2718
....................   else  
....................   	sprintf(buf, "FAIL Bit=%ld, ",pass_count); 
26D6:  MOVLW  01
26D8:  MOVLB  1
26DA:  MOVWF  x09
26DC:  MOVLW  5B
26DE:  MOVWF  x08
26E0:  MOVLW  6C
26E2:  MOVWF  FF6
26E4:  MOVLW  05
26E6:  MOVWF  FF7
26E8:  MOVLW  09
26EA:  MOVWF  xAD
26EC:  MOVLB  0
26EE:  CALL   1C7E
26F2:  MOVLW  10
26F4:  MOVWF  FE9
26F6:  MOVFF  2E,1AE
26FA:  MOVFF  2D,1AD
26FE:  RCALL  201A
2700:  MOVLW  2C
2702:  MOVLB  1
2704:  MOVWF  xBA
2706:  MOVLB  0
2708:  CALL   1C5E
270C:  MOVLW  20
270E:  MOVLB  1
2710:  MOVWF  xBA
2712:  MOVLB  0
2714:  CALL   1C5E
....................   COM1_send_str(buf); 
2718:  MOVLW  01
271A:  MOVLB  1
271C:  MOVWF  xAE
271E:  MOVLW  5B
2720:  MOVWF  xAD
2722:  MOVLB  0
2724:  CALL   0CD4
....................  
....................  
....................   if(input(PLL_LD)) 
2728:  BTFSS  F82.0
272A:  BRA    2744
.................... 	sprintf(buf, "SYNTH LOCK=LOCK, "); 
272C:  MOVLW  01
272E:  MOVLB  1
2730:  MOVWF  x09
2732:  MOVLW  5B
2734:  MOVWF  x08
2736:  MOVLW  7C
2738:  MOVWF  FF6
273A:  MOVLW  05
273C:  MOVWF  FF7
273E:  MOVLB  0
2740:  RCALL  1FFA
2742:  BRA    275A
....................   else 
....................     sprintf(buf, "SYNTH LOCK=NOT LOCK, "); 
2744:  MOVLW  01
2746:  MOVLB  1
2748:  MOVWF  x09
274A:  MOVLW  5B
274C:  MOVWF  x08
274E:  MOVLW  8E
2750:  MOVWF  FF6
2752:  MOVLW  05
2754:  MOVWF  FF7
2756:  MOVLB  0
2758:  RCALL  1FFA
....................   COM1_send_str(buf); 
275A:  MOVLW  01
275C:  MOVLB  1
275E:  MOVWF  xAE
2760:  MOVLW  5B
2762:  MOVWF  xAD
2764:  MOVLB  0
2766:  CALL   0CD4
....................  
....................   if(bit_mode == 1) 
276A:  MOVLB  1
276C:  DECFSZ x06,W
276E:  BRA    2788
....................   	sprintf(buf, "BIT MODE=START, "); 
2770:  MOVLW  01
2772:  MOVWF  x09
2774:  MOVLW  5B
2776:  MOVWF  x08
2778:  MOVLW  A4
277A:  MOVWF  FF6
277C:  MOVLW  05
277E:  MOVWF  FF7
2780:  MOVLB  0
2782:  RCALL  1FFA
2784:  BRA    27A0
2786:  MOVLB  1
....................   else if(bit_mode == 0) 
2788:  MOVF   x06,F
278A:  BNZ   27A2
....................   	sprintf(buf, "BIT MODE=STOP, "); 
278C:  MOVLW  01
278E:  MOVWF  x09
2790:  MOVLW  5B
2792:  MOVWF  x08
2794:  MOVLW  B6
2796:  MOVWF  FF6
2798:  MOVLW  05
279A:  MOVWF  FF7
279C:  MOVLB  0
279E:  RCALL  1FFA
27A0:  MOVLB  1
....................   COM1_send_str(buf); 
27A2:  MOVLW  01
27A4:  MOVWF  xAE
27A6:  MOVLW  5B
27A8:  MOVWF  xAD
27AA:  MOVLB  0
27AC:  CALL   0CD4
....................  
....................   if(setup.power_level == 1) 
27B0:  DECFSZ xAB,W
27B2:  BRA    27D0
27B4:  MOVF   xAC,F
27B6:  BNZ   27D0
.................... 	sprintf(buf, "POWER MODE=HIGH, "); 
27B8:  MOVLW  01
27BA:  MOVLB  1
27BC:  MOVWF  x09
27BE:  MOVLW  5B
27C0:  MOVWF  x08
27C2:  MOVLW  C6
27C4:  MOVWF  FF6
27C6:  MOVLW  05
27C8:  MOVWF  FF7
27CA:  MOVLB  0
27CC:  RCALL  1FFA
27CE:  BRA    27E6
....................   else 
....................     sprintf(buf, "POWER MODE=LOW, "); 
27D0:  MOVLW  01
27D2:  MOVLB  1
27D4:  MOVWF  x09
27D6:  MOVLW  5B
27D8:  MOVWF  x08
27DA:  MOVLW  D8
27DC:  MOVWF  FF6
27DE:  MOVLW  05
27E0:  MOVWF  FF7
27E2:  MOVLB  0
27E4:  RCALL  1FFA
....................   COM1_send_str(buf); 
27E6:  MOVLW  01
27E8:  MOVLB  1
27EA:  MOVWF  xAE
27EC:  MOVLW  5B
27EE:  MOVWF  xAD
27F0:  MOVLB  0
27F2:  CALL   0CD4
....................  
....................   if(auto_power)						//sample power_in and compare to PWR_IN_TRESHOLD, change setup.power_level ($P) 
27F6:  MOVLB  1
27F8:  MOVF   x07,F
27FA:  BZ    2816
.................... 	sprintf(buf, "AUTO_POWER=1, "); 
27FC:  MOVLW  01
27FE:  MOVWF  x09
2800:  MOVLW  5B
2802:  MOVWF  x08
2804:  MOVLW  EA
2806:  MOVWF  FF6
2808:  MOVLW  05
280A:  MOVWF  FF7
280C:  MOVLB  0
280E:  CALL   1FFA
2812:  BRA    282C
2814:  MOVLB  1
....................   else 
.................... 	sprintf(buf, "AUTO_POWER=0, "); 
2816:  MOVLW  01
2818:  MOVWF  x09
281A:  MOVLW  5B
281C:  MOVWF  x08
281E:  MOVLW  FA
2820:  MOVWF  FF6
2822:  MOVLW  05
2824:  MOVWF  FF7
2826:  MOVLB  0
2828:  CALL   1FFA
....................   COM1_send_str(buf); 
282C:  MOVLW  01
282E:  MOVLB  1
2830:  MOVWF  xAE
2832:  MOVLW  5B
2834:  MOVWF  xAD
2836:  MOVLB  0
2838:  CALL   0CD4
....................  
.................... 	sprintf(buf, "MODULE TYPE=RX, "); 
283C:  MOVLW  01
283E:  MOVLB  1
2840:  MOVWF  x09
2842:  MOVLW  5B
2844:  MOVWF  x08
2846:  MOVLW  0A
2848:  MOVWF  FF6
284A:  MOVLW  06
284C:  MOVWF  FF7
284E:  MOVLB  0
2850:  CALL   1FFA
....................   COM1_send_str(buf); 
2854:  MOVLW  01
2856:  MOVLB  1
2858:  MOVWF  xAE
285A:  MOVLW  5B
285C:  MOVWF  xAD
285E:  MOVLB  0
2860:  CALL   0CD4
2864:  GOTO   351E (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  bit set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
16F2:  RCALL  155A
16F4:  MOVFF  02,156
16F8:  MOVFF  01,155
....................   if (idx < 2) 
16FC:  MOVLB  1
16FE:  MOVF   x56,F
1700:  BNZ   1716
1702:  MOVF   x55,W
1704:  SUBLW  01
1706:  BNC   1716
....................     { 
....................     setup.power_level = idx; 
1708:  MOVFF  156,AC
170C:  MOVFF  155,AB
....................     return 1; 
1710:  MOVLW  01
1712:  MOVWF  01
1714:  BRA    171A
....................     } 
....................   return 0; 
1716:  MOVLW  00
1718:  MOVWF  01
171A:  MOVLB  0
171C:  GOTO   2F0C (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, addr; 
....................   ULONG freq; 
....................   UINT  value; 
....................   chr = 2; 
*
2A7C:  MOVLW  02
2A7E:  MOVLB  1
2A80:  MOVWF  x3E
....................   comm_ptr = 0; 
2A82:  CLRF   x03
....................   UINT year, week; 
....................   switch (toupper(get_char())) 
2A84:  MOVLB  0
2A86:  CALL   12A2
2A8A:  MOVFF  02,156
2A8E:  MOVFF  01,155
2A92:  MOVLB  1
2A94:  MOVF   x56,F
2A96:  BNZ   2A9E
2A98:  MOVF   x55,W
2A9A:  SUBLW  60
2A9C:  BC    2AAE
2A9E:  MOVF   x56,F
2AA0:  BNZ   2AAE
2AA2:  MOVF   x55,W
2AA4:  SUBLW  7A
2AA6:  BNC   2AAE
2AA8:  MOVF   x55,W
2AAA:  ANDLW  DF
2AAC:  BRA    2AB0
2AAE:  MOVF   x55,W
2AB0:  XORLW  48
2AB2:  MOVLB  0
2AB4:  BZ    2B14
2AB6:  XORLW  77
2AB8:  BZ    2B14
2ABA:  XORLW  79
2ABC:  BZ    2B20
2ABE:  XORLW  09
2AC0:  BTFSC  FD8.2
2AC2:  BRA    2BF4
2AC4:  XORLW  1B
2AC6:  BTFSC  FD8.2
2AC8:  BRA    2CD2
2ACA:  XORLW  16
2ACC:  BTFSC  FD8.2
2ACE:  BRA    2D80
2AD0:  XORLW  12
2AD2:  BTFSC  FD8.2
2AD4:  BRA    2E60
2AD6:  XORLW  1C
2AD8:  BTFSC  FD8.2
2ADA:  BRA    2F1A
2ADC:  XORLW  0D
2ADE:  BTFSC  FD8.2
2AE0:  BRA    2FFE
2AE2:  XORLW  12
2AE4:  BTFSC  FD8.2
2AE6:  BRA    305E
2AE8:  XORLW  62
2AEA:  BTFSC  FD8.2
2AEC:  GOTO   341E
2AF0:  XORLW  03
2AF2:  BTFSC  FD8.2
2AF4:  GOTO   348A
2AF8:  XORLW  01
2AFA:  BTFSC  FD8.2
2AFC:  GOTO   34F2
2B00:  XORLW  62
2B02:  BTFSC  FD8.2
2B04:  GOTO   3500
2B08:  XORLW  03
2B0A:  BTFSC  FD8.2
2B0C:  GOTO   3506
2B10:  GOTO   350C
....................     { 
....................     case 'H':  
....................     case '?': 
....................       list_help(); 
2B14:  GOTO   12C2
....................       return 0; 
2B18:  MOVLW  00
2B1A:  MOVWF  01
2B1C:  GOTO   3522
....................  // break; 
....................  
....................     case 'F': 
....................       freq = get_frequency(); 
2B20:  GOTO   1618
2B24:  MOVLB  1
2B26:  CLRF   x44
2B28:  CLRF   x43
2B2A:  MOVFF  02,142
2B2E:  MOVFF  01,141
.................... 		if (freq >= FRQ_HI_BOT && freq <= FRQ_HI_TOP) 
2B32:  MOVF   x44,F
2B34:  BNZ   2B4A
2B36:  MOVF   x43,F
2B38:  BNZ   2B4A
2B3A:  MOVF   x42,W
2B3C:  SUBLW  15
2B3E:  BC    2BB4
2B40:  XORLW  FF
2B42:  BNZ   2B4A
2B44:  MOVF   x41,W
2B46:  SUBLW  11
2B48:  BC    2BB4
2B4A:  MOVF   x44,F
2B4C:  BNZ   2BB4
2B4E:  MOVF   x43,F
2B50:  BNZ   2BB4
2B52:  MOVF   x42,W
2B54:  SUBLW  16
2B56:  BNC   2BB4
2B58:  BNZ   2B60
2B5A:  MOVF   x41,W
2B5C:  SUBLW  DA
2B5E:  BNC   2BB4
....................                { 
....................          		setup.frequency = freq; 
2B60:  MOVFF  142,AA
2B64:  MOVFF  141,A9
....................         	 	PLL_compute_freq_parameters(freq * 10); 
2B68:  MOVFF  144,16E
2B6C:  MOVFF  143,16D
2B70:  MOVFF  142,16C
2B74:  MOVFF  141,16B
2B78:  CLRF   x72
2B7A:  CLRF   x71
2B7C:  CLRF   x70
2B7E:  MOVLW  0A
2B80:  MOVWF  x6F
2B82:  MOVLB  0
2B84:  CALL   0906
2B88:  MOVFF  01,156
2B8C:  MOVFF  00,155
2B90:  MOVFF  01,15A
2B94:  MOVFF  00,159
2B98:  CALL   09F4
....................          		PLL_update();              
2B9C:  CALL   0B8A
....................          		allow_write = 2975; 
2BA0:  MOVLW  0B
2BA2:  MOVWF  xEE
2BA4:  MOVLW  9F
2BA6:  MOVWF  xED
....................          		write_setup(); 
2BA8:  CALL   16A2
....................          		update_all(); 
2BAC:  CALL   0C7A
....................          		} 
2BB0:  BRA    2BF0
2BB2:  MOVLB  1
.................... 		else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
2BB4:  MOVLW  01
2BB6:  MOVWF  FEA
2BB8:  MOVLW  4B
2BBA:  MOVWF  FE9
2BBC:  MOVFF  FF2,155
2BC0:  BCF    FF2.7
2BC2:  MOVLW  0A
2BC4:  MOVWF  01
2BC6:  CLRF   FF7
2BC8:  MOVLW  00
2BCA:  MOVLB  0
2BCC:  CALL   035A
2BD0:  TBLRD*-
2BD2:  TBLRD*+
2BD4:  MOVFF  FF5,FEE
2BD8:  DECFSZ 01,F
2BDA:  BRA    2BD2
2BDC:  MOVLB  1
2BDE:  BTFSC  x55.7
2BE0:  BSF    FF2.7
2BE2:  MOVLW  01
2BE4:  MOVWF  xAE
2BE6:  MOVLW  4B
2BE8:  MOVWF  xAD
2BEA:  MOVLB  0
2BEC:  CALL   0CD4
.................... 		break; 
2BF0:  GOTO   351E
.................... /*///////////////////in case of one software version for high and low frequence 
.................... 		if(setup.power_level) 
.................... 		{ 
....................       		if (freq >= FRQ_HI_BOT && freq <= FRQ_HI_TOP) 
....................                { 
....................          		setup.frequency = freq; 
....................         	 	PLL_compute_freq_parameters(freq * 10); 
....................          		PLL_update();              
....................          		allow_write = 2975; 
....................          		write_setup(); 
....................          		update_all(); 
....................          		} 
....................       			else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
....................   		} 
.................... 		else 
.................... 		{ 
.................... 			    if (freq >= FRQ_LO_BOT && freq <= FRQ_LO_TOP) 
....................                { 
....................          		setup.frequency = freq; 
....................         	 	PLL_compute_freq_parameters(freq * 10); 
....................          		PLL_update();              
....................          		allow_write = 2975; 
....................          		write_setup(); 
....................          		update_all(); 
....................          		} 
....................       			else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
.................... 		} 
....................  
....................       break; 
.................... */ 
....................  
....................     case 'O': 
....................       if (toupper(get_char()) == 'N') 
2BF4:  CALL   12A2
2BF8:  MOVFF  02,156
2BFC:  MOVFF  01,155
2C00:  MOVLB  1
2C02:  MOVF   x56,F
2C04:  BNZ   2C0C
2C06:  MOVF   x55,W
2C08:  SUBLW  60
2C0A:  BC    2C1C
2C0C:  MOVF   x56,F
2C0E:  BNZ   2C1C
2C10:  MOVF   x55,W
2C12:  SUBLW  7A
2C14:  BNC   2C1C
2C16:  MOVF   x55,W
2C18:  ANDLW  DF
2C1A:  BRA    2C1E
2C1C:  MOVF   x55,W
2C1E:  SUBLW  4E
2C20:  BNZ   2C92
....................         { 
....................         idx = get_int(); 
2C22:  MOVLB  0
2C24:  CALL   155A
2C28:  MOVFF  01,13F
....................         if (idx <2) 
2C2C:  MOVLB  1
2C2E:  MOVF   x3F,W
2C30:  SUBLW  01
2C32:  BNC   2C52
....................           { 
....................           if (idx) 
2C34:  MOVF   x3F,F
2C36:  BZ    2C46
....................             { 
.................... 			on_command = 1; 
2C38:  MOVLW  01
2C3A:  MOVWF  x05
.................... 			PLL_update(); 
2C3C:  MOVLB  0
2C3E:  CALL   0B8A
....................             } 
2C42:  BRA    2C4E
2C44:  MOVLB  1
....................           else 
....................             { 
....................   			on_command = 0; 
2C46:  CLRF   x05
.................... 			PLL_mute(); 
2C48:  MOVLB  0
2C4A:  GOTO   16CA
....................             } 
....................           } 
2C4E:  BRA    2C8E
2C50:  MOVLB  1
....................       else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2C52:  MOVLW  01
2C54:  MOVWF  FEA
2C56:  MOVLW  4B
2C58:  MOVWF  FE9
2C5A:  MOVFF  FF2,155
2C5E:  BCF    FF2.7
2C60:  MOVLW  0A
2C62:  MOVWF  01
2C64:  CLRF   FF7
2C66:  MOVLW  00
2C68:  MOVLB  0
2C6A:  CALL   035A
2C6E:  TBLRD*-
2C70:  TBLRD*+
2C72:  MOVFF  FF5,FEE
2C76:  DECFSZ 01,F
2C78:  BRA    2C70
2C7A:  MOVLB  1
2C7C:  BTFSC  x55.7
2C7E:  BSF    FF2.7
2C80:  MOVLW  01
2C82:  MOVWF  xAE
2C84:  MOVLW  4B
2C86:  MOVWF  xAD
2C88:  MOVLB  0
2C8A:  CALL   0CD4
....................       } 
2C8E:  BRA    2CCE
2C90:  MOVLB  1
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n");          
2C92:  MOVLW  01
2C94:  MOVWF  FEA
2C96:  MOVLW  4B
2C98:  MOVWF  FE9
2C9A:  MOVFF  FF2,155
2C9E:  BCF    FF2.7
2CA0:  MOVLW  0A
2CA2:  MOVWF  01
2CA4:  CLRF   FF7
2CA6:  MOVLW  00
2CA8:  MOVLB  0
2CAA:  CALL   035A
2CAE:  TBLRD*-
2CB0:  TBLRD*+
2CB2:  MOVFF  FF5,FEE
2CB6:  DECFSZ 01,F
2CB8:  BRA    2CB0
2CBA:  MOVLB  1
2CBC:  BTFSC  x55.7
2CBE:  BSF    FF2.7
2CC0:  MOVLW  01
2CC2:  MOVWF  xAE
2CC4:  MOVLW  4B
2CC6:  MOVWF  xAD
2CC8:  MOVLB  0
2CCA:  CALL   0CD4
....................       break; 
2CCE:  GOTO   351E
....................  
.................... 	case 'T':							//command TR - return T in case of TX, return R in case of RX 
.................... 	  if (toupper(get_char()) == 'R') 
2CD2:  CALL   12A2
2CD6:  MOVFF  02,156
2CDA:  MOVFF  01,155
2CDE:  MOVLB  1
2CE0:  MOVF   x56,F
2CE2:  BNZ   2CEA
2CE4:  MOVF   x55,W
2CE6:  SUBLW  60
2CE8:  BC    2CFA
2CEA:  MOVF   x56,F
2CEC:  BNZ   2CFA
2CEE:  MOVF   x55,W
2CF0:  SUBLW  7A
2CF2:  BNC   2CFA
2CF4:  MOVF   x55,W
2CF6:  ANDLW  DF
2CF8:  BRA    2CFC
2CFA:  MOVF   x55,W
2CFC:  SUBLW  52
2CFE:  BNZ   2D40
.................... 		{ 
.................... 		COM1_send_str("\r\n$R\r\n"); 
2D00:  MOVLW  01
2D02:  MOVWF  FEA
2D04:  MOVLW  4B
2D06:  MOVWF  FE9
2D08:  MOVFF  FF2,155
2D0C:  BCF    FF2.7
2D0E:  MOVLW  07
2D10:  MOVWF  01
2D12:  CLRF   FF7
2D14:  MOVLW  00
2D16:  MOVLB  0
2D18:  CALL   037E
2D1C:  TBLRD*-
2D1E:  TBLRD*+
2D20:  MOVFF  FF5,FEE
2D24:  DECFSZ 01,F
2D26:  BRA    2D1E
2D28:  MOVLB  1
2D2A:  BTFSC  x55.7
2D2C:  BSF    FF2.7
2D2E:  MOVLW  01
2D30:  MOVWF  xAE
2D32:  MOVLW  4B
2D34:  MOVWF  xAD
2D36:  MOVLB  0
2D38:  CALL   0CD4
.................... 		}    
2D3C:  BRA    2D7C
2D3E:  MOVLB  1
.................... 	  else 
.................... 		COM1_send_str("\r\n$FAIL\r\n"); 
2D40:  MOVLW  01
2D42:  MOVWF  FEA
2D44:  MOVLW  4B
2D46:  MOVWF  FE9
2D48:  MOVFF  FF2,155
2D4C:  BCF    FF2.7
2D4E:  MOVLW  0A
2D50:  MOVWF  01
2D52:  CLRF   FF7
2D54:  MOVLW  00
2D56:  MOVLB  0
2D58:  CALL   035A
2D5C:  TBLRD*-
2D5E:  TBLRD*+
2D60:  MOVFF  FF5,FEE
2D64:  DECFSZ 01,F
2D66:  BRA    2D5E
2D68:  MOVLB  1
2D6A:  BTFSC  x55.7
2D6C:  BSF    FF2.7
2D6E:  MOVLW  01
2D70:  MOVWF  xAE
2D72:  MOVLW  4B
2D74:  MOVWF  xAD
2D76:  MOVLB  0
2D78:  CALL   0CD4
.................... 		break; 
2D7C:  GOTO   351E
....................  
....................  
....................  
.................... 	case 'B': 
....................       if (toupper(get_char()) == 'M') 
2D80:  CALL   12A2
2D84:  MOVFF  02,156
2D88:  MOVFF  01,155
2D8C:  MOVLB  1
2D8E:  MOVF   x56,F
2D90:  BNZ   2D98
2D92:  MOVF   x55,W
2D94:  SUBLW  60
2D96:  BC    2DA8
2D98:  MOVF   x56,F
2D9A:  BNZ   2DA8
2D9C:  MOVF   x55,W
2D9E:  SUBLW  7A
2DA0:  BNC   2DA8
2DA2:  MOVF   x55,W
2DA4:  ANDLW  DF
2DA6:  BRA    2DAA
2DA8:  MOVF   x55,W
2DAA:  SUBLW  4D
2DAC:  BNZ   2E1E
....................         { 
....................         idx = get_int(); 
2DAE:  MOVLB  0
2DB0:  CALL   155A
2DB4:  MOVFF  01,13F
....................         if (idx <2) 
2DB8:  MOVLB  1
2DBA:  MOVF   x3F,W
2DBC:  SUBLW  01
2DBE:  BNC   2DDE
....................           { 
....................           if (idx) 
2DC0:  MOVF   x3F,F
2DC2:  BZ    2DD6
....................             { 
....................             fpga_first_val = 1; 
2DC4:  CLRF   30
2DC6:  MOVLW  01
2DC8:  MOVWF  2F
.................... 			pass_count = 0; 
2DCA:  CLRF   2E
2DCC:  CLRF   2D
.................... 			bit_mode = 1; 
2DCE:  MOVWF  x06
.................... 			output_high(BIT_MODE_EN); 
2DD0:  BSF    F8C.3
.................... 			enable_interrupts(INT_RDA2);  
2DD2:  BSF    FA3.5
....................             } 
2DD4:  BRA    2DDC
....................           else 
....................             { 
....................             bit_mode = 0; 
2DD6:  CLRF   x06
.................... 			output_low(BIT_MODE_EN); 
2DD8:  BCF    F8C.3
.................... 			disable_interrupts(INT_RDA2);  
2DDA:  BCF    FA3.5
....................             } 
....................           } 
2DDC:  BRA    2E1C
....................       else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2DDE:  MOVLW  01
2DE0:  MOVWF  FEA
2DE2:  MOVLW  4B
2DE4:  MOVWF  FE9
2DE6:  MOVFF  FF2,155
2DEA:  BCF    FF2.7
2DEC:  MOVLW  0A
2DEE:  MOVWF  01
2DF0:  CLRF   FF7
2DF2:  MOVLW  00
2DF4:  MOVLB  0
2DF6:  CALL   035A
2DFA:  TBLRD*-
2DFC:  TBLRD*+
2DFE:  MOVFF  FF5,FEE
2E02:  DECFSZ 01,F
2E04:  BRA    2DFC
2E06:  MOVLB  1
2E08:  BTFSC  x55.7
2E0A:  BSF    FF2.7
2E0C:  MOVLW  01
2E0E:  MOVWF  xAE
2E10:  MOVLW  4B
2E12:  MOVWF  xAD
2E14:  MOVLB  0
2E16:  CALL   0CD4
2E1A:  MOVLB  1
....................       } 
2E1C:  BRA    2E5C
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n");          
2E1E:  MOVLW  01
2E20:  MOVWF  FEA
2E22:  MOVLW  4B
2E24:  MOVWF  FE9
2E26:  MOVFF  FF2,155
2E2A:  BCF    FF2.7
2E2C:  MOVLW  0A
2E2E:  MOVWF  01
2E30:  CLRF   FF7
2E32:  MOVLW  00
2E34:  MOVLB  0
2E36:  CALL   035A
2E3A:  TBLRD*-
2E3C:  TBLRD*+
2E3E:  MOVFF  FF5,FEE
2E42:  DECFSZ 01,F
2E44:  BRA    2E3C
2E46:  MOVLB  1
2E48:  BTFSC  x55.7
2E4A:  BSF    FF2.7
2E4C:  MOVLW  01
2E4E:  MOVWF  xAE
2E50:  MOVLW  4B
2E52:  MOVWF  xAD
2E54:  MOVLB  0
2E56:  CALL   0CD4
2E5A:  MOVLB  1
....................       break; 
2E5C:  MOVLB  0
2E5E:  BRA    351E
....................  
....................  
....................     case 'P': 
....................       if (toupper(peek_char()) == 'S') // $PS command 
2E60:  CALL   14E6
2E64:  MOVFF  02,156
2E68:  MOVFF  01,155
2E6C:  MOVLB  1
2E6E:  MOVF   x56,F
2E70:  BNZ   2E78
2E72:  MOVF   x55,W
2E74:  SUBLW  60
2E76:  BC    2E88
2E78:  MOVF   x56,F
2E7A:  BNZ   2E88
2E7C:  MOVF   x55,W
2E7E:  SUBLW  7A
2E80:  BNC   2E88
2E82:  MOVF   x55,W
2E84:  ANDLW  DF
2E86:  BRA    2E8A
2E88:  MOVF   x55,W
2E8A:  SUBLW  53
2E8C:  BNZ   2F06
....................         { 
....................         get_char(); 				// get rid of 'S' 
2E8E:  MOVLB  0
2E90:  CALL   12A2
....................         idx = get_int(); 
2E94:  CALL   155A
2E98:  MOVFF  01,13F
....................               if (idx <2) 
2E9C:  MOVLB  1
2E9E:  MOVF   x3F,W
2EA0:  SUBLW  01
2EA2:  BNC   2EC6
....................                { 
....................                 if (idx) 
2EA4:  MOVF   x3F,F
2EA6:  BZ    2EAE
....................                  pa_command  = 1; 
2EA8:  MOVLW  01
2EAA:  MOVWF  x04
2EAC:  BRA    2EB0
....................                 else 
....................                  pa_command  = 0; 
2EAE:  CLRF   x04
....................  
....................                  setup.power_amp = pa_command;   
2EB0:  MOVFF  104,A8
.................... 	    		 allow_write = 2975;           
2EB4:  MOVLW  0B
2EB6:  MOVLB  0
2EB8:  MOVWF  xEE
2EBA:  MOVLW  9F
2EBC:  MOVWF  xED
....................          		 write_setup(); 
2EBE:  CALL   16A2
....................                } 
2EC2:  BRA    2F02
2EC4:  MOVLB  1
....................          else   
....................             COM1_send_str("\r\n$FAIL\r\n");                
2EC6:  MOVLW  01
2EC8:  MOVWF  FEA
2ECA:  MOVLW  4B
2ECC:  MOVWF  FE9
2ECE:  MOVFF  FF2,155
2ED2:  BCF    FF2.7
2ED4:  MOVLW  0A
2ED6:  MOVWF  01
2ED8:  CLRF   FF7
2EDA:  MOVLW  00
2EDC:  MOVLB  0
2EDE:  CALL   035A
2EE2:  TBLRD*-
2EE4:  TBLRD*+
2EE6:  MOVFF  FF5,FEE
2EEA:  DECFSZ 01,F
2EEC:  BRA    2EE4
2EEE:  MOVLB  1
2EF0:  BTFSC  x55.7
2EF2:  BSF    FF2.7
2EF4:  MOVLW  01
2EF6:  MOVWF  xAE
2EF8:  MOVLW  4B
2EFA:  MOVWF  xAD
2EFC:  MOVLB  0
2EFE:  CALL   0CD4
....................          } 
2F02:  BRA    2F0C
2F04:  MOVLB  1
....................          else 							  // $P command 
....................            set_power_level(); 
2F06:  MOVLB  0
2F08:  GOTO   16F2
.................... 		   	allow_write = 2975;           
2F0C:  MOVLW  0B
2F0E:  MOVWF  xEE
2F10:  MOVLW  9F
2F12:  MOVWF  xED
....................          	write_setup(); 
2F14:  CALL   16A2
....................          break; 
2F18:  BRA    351E
....................  
....................     case 'L': 
....................       if (toupper(get_char()) == 'D') 
2F1A:  CALL   12A2
2F1E:  MOVFF  02,156
2F22:  MOVFF  01,155
2F26:  MOVLB  1
2F28:  MOVF   x56,F
2F2A:  BNZ   2F32
2F2C:  MOVF   x55,W
2F2E:  SUBLW  60
2F30:  BC    2F42
2F32:  MOVF   x56,F
2F34:  BNZ   2F42
2F36:  MOVF   x55,W
2F38:  SUBLW  7A
2F3A:  BNC   2F42
2F3C:  MOVF   x55,W
2F3E:  ANDLW  DF
2F40:  BRA    2F44
2F42:  MOVF   x55,W
2F44:  SUBLW  44
2F46:  BNZ   2FC0
....................         { 
....................         idx = get_int(); 
2F48:  MOVLB  0
2F4A:  CALL   155A
2F4E:  MOVFF  01,13F
....................         if (idx <2) 
2F52:  MOVLB  1
2F54:  MOVF   x3F,W
2F56:  SUBLW  01
2F58:  BNC   2F80
....................         { 
....................           if (idx) 
2F5A:  MOVF   x3F,F
2F5C:  BZ    2F6A
....................             { 
....................             setup.meter_backlight = 1; 
2F5E:  MOVLW  01
2F60:  MOVLB  0
2F62:  MOVWF  xB7
....................             output_high(MET_EN); 
2F64:  BSF    F8A.3
....................             } 
2F66:  BRA    2F70
2F68:  MOVLB  1
....................           else 
....................             { 
....................             setup.meter_backlight = 0; 
2F6A:  MOVLB  0
2F6C:  CLRF   xB7
....................             output_low(MET_EN); 
2F6E:  BCF    F8A.3
....................             } 
.................... 			allow_write = 2975;           
2F70:  MOVLW  0B
2F72:  MOVWF  xEE
2F74:  MOVLW  9F
2F76:  MOVWF  xED
....................          	write_setup(); 
2F78:  CALL   16A2
....................          } 
2F7C:  BRA    2FBC
2F7E:  MOVLB  1
....................    else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2F80:  MOVLW  01
2F82:  MOVWF  FEA
2F84:  MOVLW  4B
2F86:  MOVWF  FE9
2F88:  MOVFF  FF2,155
2F8C:  BCF    FF2.7
2F8E:  MOVLW  0A
2F90:  MOVWF  01
2F92:  CLRF   FF7
2F94:  MOVLW  00
2F96:  MOVLB  0
2F98:  CALL   035A
2F9C:  TBLRD*-
2F9E:  TBLRD*+
2FA0:  MOVFF  FF5,FEE
2FA4:  DECFSZ 01,F
2FA6:  BRA    2F9E
2FA8:  MOVLB  1
2FAA:  BTFSC  x55.7
2FAC:  BSF    FF2.7
2FAE:  MOVLW  01
2FB0:  MOVWF  xAE
2FB2:  MOVLW  4B
2FB4:  MOVWF  xAD
2FB6:  MOVLB  0
2FB8:  CALL   0CD4
....................         } 
2FBC:  BRA    2FFC
2FBE:  MOVLB  1
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
2FC0:  MOVLW  01
2FC2:  MOVWF  FEA
2FC4:  MOVLW  4B
2FC6:  MOVWF  FE9
2FC8:  MOVFF  FF2,155
2FCC:  BCF    FF2.7
2FCE:  MOVLW  0A
2FD0:  MOVWF  01
2FD2:  CLRF   FF7
2FD4:  MOVLW  00
2FD6:  MOVLB  0
2FD8:  CALL   035A
2FDC:  TBLRD*-
2FDE:  TBLRD*+
2FE0:  MOVFF  FF5,FEE
2FE4:  DECFSZ 01,F
2FE6:  BRA    2FDE
2FE8:  MOVLB  1
2FEA:  BTFSC  x55.7
2FEC:  BSF    FF2.7
2FEE:  MOVLW  01
2FF0:  MOVWF  xAE
2FF2:  MOVLW  4B
2FF4:  MOVWF  xAD
2FF6:  MOVLB  0
2FF8:  CALL   0CD4
....................       break; 
2FFC:  BRA    351E
....................  
.................... 	case 'A':							//command to choose automatic or manual power_level 
.................... 		idx = get_int(); 
2FFE:  CALL   155A
3002:  MOVFF  01,13F
.................... 		if (idx <2) 
3006:  MOVLB  1
3008:  MOVF   x3F,W
300A:  SUBLW  01
300C:  BNC   301C
....................         { 
....................           if (idx) 
300E:  MOVF   x3F,F
3010:  BZ    3018
.................... 			auto_power = 1; 
3012:  MOVLW  01
3014:  MOVWF  x07
3016:  BRA    301A
.................... 		  else 
.................... 		  	auto_power = 0; 
3018:  CLRF   x07
.................... 		} 
301A:  BRA    305A
.................... 		else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
301C:  MOVLW  01
301E:  MOVWF  FEA
3020:  MOVLW  4B
3022:  MOVWF  FE9
3024:  MOVFF  FF2,155
3028:  BCF    FF2.7
302A:  MOVLW  0A
302C:  MOVWF  01
302E:  CLRF   FF7
3030:  MOVLW  00
3032:  MOVLB  0
3034:  CALL   035A
3038:  TBLRD*-
303A:  TBLRD*+
303C:  MOVFF  FF5,FEE
3040:  DECFSZ 01,F
3042:  BRA    303A
3044:  MOVLB  1
3046:  BTFSC  x55.7
3048:  BSF    FF2.7
304A:  MOVLW  01
304C:  MOVWF  xAE
304E:  MOVLW  4B
3050:  MOVWF  xAD
3052:  MOVLB  0
3054:  CALL   0CD4
3058:  MOVLB  1
.................... 		break; 
305A:  MOVLB  0
305C:  BRA    351E
....................  
.................... 	 
....................     case 'S': 			// set tables 
....................       skip_spc(); 
305E:  CALL   149E
....................       idx = get_char(); // get table designator 
3062:  CALL   12A2
3066:  MOVFF  01,13F
....................       addr = get_int(); // get table index 
306A:  CALL   155A
306E:  MOVFF  01,140
....................       value = get_int(); // get value to put into table 
3072:  CALL   155A
3076:  MOVFF  02,146
307A:  MOVFF  01,145
....................       switch (toupper(idx)) 
307E:  MOVLB  1
3080:  MOVF   x3F,W
3082:  SUBLW  60
3084:  BC    3092
3086:  MOVF   x3F,W
3088:  SUBLW  7A
308A:  BNC   3092
308C:  MOVF   x3F,W
308E:  ANDLW  DF
3090:  BRA    3094
3092:  MOVF   x3F,W
3094:  XORLW  4E
3096:  MOVLB  0
3098:  BZ    30B8
309A:  XORLW  1E
309C:  BZ    3172
309E:  XORLW  02
30A0:  BTFSC  FD8.2
30A2:  BRA    322C
30A4:  XORLW  14
30A6:  BTFSC  FD8.2
30A8:  BRA    32A6
30AA:  XORLW  07
30AC:  BTFSC  FD8.2
30AE:  BRA    3352
30B0:  XORLW  17
30B2:  BTFSC  FD8.2
30B4:  BRA    340C
30B6:  BRA    341C
....................         { 
....................         case 'N': // negative voltage 
....................                 if (addr <2 ) 
30B8:  MOVLB  1
30BA:  MOVF   x40,W
30BC:  SUBLW  01
30BE:  BNC   3130
....................                     { 
....................                     value = value * 0.3103;					//read DAC values in mv 
30C0:  MOVFF  146,1B4
30C4:  MOVFF  145,1B3
30C8:  MOVLB  0
30CA:  CALL   1720
30CE:  MOVFF  03,1BD
30D2:  MOVFF  02,1BC
30D6:  MOVFF  01,1BB
30DA:  MOVFF  00,1BA
30DE:  MOVLW  A4
30E0:  MOVLB  1
30E2:  MOVWF  xC1
30E4:  MOVLW  DF
30E6:  MOVWF  xC0
30E8:  MOVLW  1E
30EA:  MOVWF  xBF
30EC:  MOVLW  7D
30EE:  MOVWF  xBE
30F0:  MOVLB  0
30F2:  CALL   1756
30F6:  MOVFF  03,158
30FA:  MOVFF  02,157
30FE:  MOVFF  01,156
3102:  MOVFF  00,155
3106:  CALL   184C
310A:  MOVFF  02,146
310E:  MOVFF  01,145
.................... 					setup.negative_voltage[addr] = value; 
3112:  BCF    FD8.0
3114:  MOVLB  1
3116:  RLCF   x40,W
3118:  CLRF   03
311A:  ADDLW  AD
311C:  MOVWF  FE9
311E:  MOVLW  00
3120:  ADDWFC 03,W
3122:  MOVWF  FEA
3124:  MOVFF  146,FEC
3128:  MOVF   FED,F
312A:  MOVFF  145,FEF
....................                   	} 
312E:  BRA    316E
....................                else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
3130:  MOVLW  01
3132:  MOVWF  FEA
3134:  MOVLW  4B
3136:  MOVWF  FE9
3138:  MOVFF  FF2,155
313C:  BCF    FF2.7
313E:  MOVLW  0A
3140:  MOVWF  01
3142:  CLRF   FF7
3144:  MOVLW  00
3146:  MOVLB  0
3148:  CALL   035A
314C:  TBLRD*-
314E:  TBLRD*+
3150:  MOVFF  FF5,FEE
3154:  DECFSZ 01,F
3156:  BRA    314E
3158:  MOVLB  1
315A:  BTFSC  x55.7
315C:  BSF    FF2.7
315E:  MOVLW  01
3160:  MOVWF  xAE
3162:  MOVLW  4B
3164:  MOVWF  xAD
3166:  MOVLB  0
3168:  CALL   0CD4
316C:  MOVLB  1
....................  
....................           break; 
316E:  MOVLB  0
3170:  BRA    341C
....................         case 'P': // positive voltage 
....................              if (addr <2) 
3172:  MOVLB  1
3174:  MOVF   x40,W
3176:  SUBLW  01
3178:  BNC   31EA
....................               { 
....................               	value = value * 0.3103;					//read DAC values in mv 
317A:  MOVFF  146,1B4
317E:  MOVFF  145,1B3
3182:  MOVLB  0
3184:  CALL   1720
3188:  MOVFF  03,1BD
318C:  MOVFF  02,1BC
3190:  MOVFF  01,1BB
3194:  MOVFF  00,1BA
3198:  MOVLW  A4
319A:  MOVLB  1
319C:  MOVWF  xC1
319E:  MOVLW  DF
31A0:  MOVWF  xC0
31A2:  MOVLW  1E
31A4:  MOVWF  xBF
31A6:  MOVLW  7D
31A8:  MOVWF  xBE
31AA:  MOVLB  0
31AC:  CALL   1756
31B0:  MOVFF  03,158
31B4:  MOVFF  02,157
31B8:  MOVFF  01,156
31BC:  MOVFF  00,155
31C0:  CALL   184C
31C4:  MOVFF  02,146
31C8:  MOVFF  01,145
.................... 				setup.power_in[addr] = value; 
31CC:  BCF    FD8.0
31CE:  MOVLB  1
31D0:  RLCF   x40,W
31D2:  CLRF   03
31D4:  ADDLW  B1
31D6:  MOVWF  FE9
31D8:  MOVLW  00
31DA:  ADDWFC 03,W
31DC:  MOVWF  FEA
31DE:  MOVFF  146,FEC
31E2:  MOVF   FED,F
31E4:  MOVFF  145,FEF
....................               } 
31E8:  BRA    3228
....................            else 
....................               COM1_send_str("\r\n$FAIL\r\n"); 
31EA:  MOVLW  01
31EC:  MOVWF  FEA
31EE:  MOVLW  4B
31F0:  MOVWF  FE9
31F2:  MOVFF  FF2,155
31F6:  BCF    FF2.7
31F8:  MOVLW  0A
31FA:  MOVWF  01
31FC:  CLRF   FF7
31FE:  MOVLW  00
3200:  MOVLB  0
3202:  CALL   035A
3206:  TBLRD*-
3208:  TBLRD*+
320A:  MOVFF  FF5,FEE
320E:  DECFSZ 01,F
3210:  BRA    3208
3212:  MOVLB  1
3214:  BTFSC  x55.7
3216:  BSF    FF2.7
3218:  MOVLW  01
321A:  MOVWF  xAE
321C:  MOVLW  4B
321E:  MOVWF  xAD
3220:  MOVLB  0
3222:  CALL   0CD4
3226:  MOVLB  1
....................           break; 
3228:  MOVLB  0
322A:  BRA    341C
....................  
....................         case 'R': // rev table 
....................          if (toupper(get_char()) == 'R') 
322C:  CALL   12A2
3230:  MOVFF  02,156
3234:  MOVFF  01,155
3238:  MOVLB  1
323A:  MOVF   x56,F
323C:  BNZ   3244
323E:  MOVF   x55,W
3240:  SUBLW  60
3242:  BC    3254
3244:  MOVF   x56,F
3246:  BNZ   3254
3248:  MOVF   x55,W
324A:  SUBLW  7A
324C:  BNC   3254
324E:  MOVF   x55,W
3250:  ANDLW  DF
3252:  BRA    3256
3254:  MOVF   x55,W
3256:  SUBLW  52
3258:  BNZ   3264
....................          { 
....................             setup.reverse = value; 
325A:  MOVFF  146,B6
325E:  MOVFF  145,B5
....................          } 
3262:  BRA    32A2
....................          else 
....................             COM1_send_str("\r\n$FAIL\r\n"); 
3264:  MOVLW  01
3266:  MOVWF  FEA
3268:  MOVLW  4B
326A:  MOVWF  FE9
326C:  MOVFF  FF2,155
3270:  BCF    FF2.7
3272:  MOVLW  0A
3274:  MOVWF  01
3276:  CLRF   FF7
3278:  MOVLW  00
327A:  MOVLB  0
327C:  CALL   035A
3280:  TBLRD*-
3282:  TBLRD*+
3284:  MOVFF  FF5,FEE
3288:  DECFSZ 01,F
328A:  BRA    3282
328C:  MOVLB  1
328E:  BTFSC  x55.7
3290:  BSF    FF2.7
3292:  MOVLW  01
3294:  MOVWF  xAE
3296:  MOVLW  4B
3298:  MOVWF  xAD
329A:  MOVLB  0
329C:  CALL   0CD4
32A0:  MOVLB  1
....................           break; 
32A2:  MOVLB  0
32A4:  BRA    341C
....................  
....................         case 'F': // rssi table 
....................                if (addr < 12) 
32A6:  MOVLB  1
32A8:  MOVF   x40,W
32AA:  SUBLW  0B
32AC:  BNC   3310
....................                  { 
....................                  setup.rssi_table[addr][0] = value; 
32AE:  MOVF   x40,W
32B0:  MULLW  04
32B2:  MOVF   FF3,W
32B4:  CLRF   03
32B6:  ADDLW  BD
32B8:  MOVWF  FE9
32BA:  MOVLW  00
32BC:  ADDWFC 03,W
32BE:  MOVWF  FEA
32C0:  MOVFF  146,FEC
32C4:  MOVF   FED,F
32C6:  MOVFF  145,FEF
....................                  value = get_int(); 
32CA:  MOVLB  0
32CC:  CALL   155A
32D0:  MOVFF  02,146
32D4:  MOVFF  01,145
....................                  setup.rssi_table[addr][1] = value; 
32D8:  MOVLB  1
32DA:  MOVF   x40,W
32DC:  MULLW  04
32DE:  MOVF   FF3,W
32E0:  CLRF   03
32E2:  ADDLW  15
32E4:  MOVWF  x55
32E6:  MOVLW  00
32E8:  ADDWFC 03,W
32EA:  MOVWF  x56
32EC:  MOVLW  02
32EE:  ADDWF  x55,W
32F0:  MOVWF  01
32F2:  MOVLW  00
32F4:  ADDWFC x56,W
32F6:  MOVWF  03
32F8:  MOVF   01,W
32FA:  ADDLW  A8
32FC:  MOVWF  FE9
32FE:  MOVLW  00
3300:  ADDWFC 03,W
3302:  MOVWF  FEA
3304:  MOVFF  146,FEC
3308:  MOVF   FED,F
330A:  MOVFF  145,FEF
....................                  } 
330E:  BRA    334E
....................              else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
3310:  MOVLW  01
3312:  MOVWF  FEA
3314:  MOVLW  4B
3316:  MOVWF  FE9
3318:  MOVFF  FF2,155
331C:  BCF    FF2.7
331E:  MOVLW  0A
3320:  MOVWF  01
3322:  CLRF   FF7
3324:  MOVLW  00
3326:  MOVLB  0
3328:  CALL   035A
332C:  TBLRD*-
332E:  TBLRD*+
3330:  MOVFF  FF5,FEE
3334:  DECFSZ 01,F
3336:  BRA    332E
3338:  MOVLB  1
333A:  BTFSC  x55.7
333C:  BSF    FF2.7
333E:  MOVLW  01
3340:  MOVWF  xAE
3342:  MOVLW  4B
3344:  MOVWF  xAD
3346:  MOVLB  0
3348:  CALL   0CD4
334C:  MOVLB  1
....................             break; 
334E:  MOVLB  0
3350:  BRA    341C
....................  
....................  
....................         case 'A': // automatic mode address 0 - high treshold, 1 - low treshold table 
....................                if (addr < 2) 
3352:  MOVLB  1
3354:  MOVF   x40,W
3356:  SUBLW  01
3358:  BNC   33CA
....................                  { 
....................                  	value = value * 0.3103; 
335A:  MOVFF  146,1B4
335E:  MOVFF  145,1B3
3362:  MOVLB  0
3364:  CALL   1720
3368:  MOVFF  03,1BD
336C:  MOVFF  02,1BC
3370:  MOVFF  01,1BB
3374:  MOVFF  00,1BA
3378:  MOVLW  A4
337A:  MOVLB  1
337C:  MOVWF  xC1
337E:  MOVLW  DF
3380:  MOVWF  xC0
3382:  MOVLW  1E
3384:  MOVWF  xBF
3386:  MOVLW  7D
3388:  MOVWF  xBE
338A:  MOVLB  0
338C:  CALL   1756
3390:  MOVFF  03,158
3394:  MOVFF  02,157
3398:  MOVFF  01,156
339C:  MOVFF  00,155
33A0:  CALL   184C
33A4:  MOVFF  02,146
33A8:  MOVFF  01,145
.................... 					setup.auto_mode_tresh[addr] = value; 
33AC:  BCF    FD8.0
33AE:  MOVLB  1
33B0:  RLCF   x40,W
33B2:  CLRF   03
33B4:  ADDLW  E9
33B6:  MOVWF  FE9
33B8:  MOVLW  00
33BA:  ADDWFC 03,W
33BC:  MOVWF  FEA
33BE:  MOVFF  146,FEC
33C2:  MOVF   FED,F
33C4:  MOVFF  145,FEF
....................                  } 
33C8:  BRA    3408
....................              else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
33CA:  MOVLW  01
33CC:  MOVWF  FEA
33CE:  MOVLW  4B
33D0:  MOVWF  FE9
33D2:  MOVFF  FF2,155
33D6:  BCF    FF2.7
33D8:  MOVLW  0A
33DA:  MOVWF  01
33DC:  CLRF   FF7
33DE:  MOVLW  00
33E0:  MOVLB  0
33E2:  CALL   035A
33E6:  TBLRD*-
33E8:  TBLRD*+
33EA:  MOVFF  FF5,FEE
33EE:  DECFSZ 01,F
33F0:  BRA    33E8
33F2:  MOVLB  1
33F4:  BTFSC  x55.7
33F6:  BSF    FF2.7
33F8:  MOVLW  01
33FA:  MOVWF  xAE
33FC:  MOVLW  4B
33FE:  MOVWF  xAD
3400:  MOVLB  0
3402:  CALL   0CD4
3406:  MOVLB  1
....................             break; 
3408:  MOVLB  0
340A:  BRA    341C
....................  
....................         case 'V': // save parameters 
....................  
....................           allow_write = 2975; 
340C:  MOVLW  0B
340E:  MOVWF  xEE
3410:  MOVLW  9F
3412:  MOVWF  xED
....................           write_setup(); 
3414:  CALL   16A2
....................           update_all(); 
3418:  CALL   0C7A
....................  
....................           break; 
....................         } 
....................       break; 
341C:  BRA    351E
....................  
....................     case '1': // year    
....................       year = get_int(); 
341E:  CALL   155A
3422:  MOVFF  02,148
3426:  MOVFF  01,147
....................        if(year > 0 && year < 100)  
342A:  MOVLB  1
342C:  MOVF   x47,F
342E:  BNZ   3434
3430:  MOVF   x48,F
3432:  BZ    3448
3434:  MOVF   x48,F
3436:  BNZ   3448
3438:  MOVF   x47,W
343A:  SUBLW  63
343C:  BNC   3448
....................          { 
....................       setup.year = year; 
343E:  MOVFF  148,B9
3442:  MOVFF  147,B8
....................       } 
3446:  BRA    3486
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
3448:  MOVLW  01
344A:  MOVWF  FEA
344C:  MOVLW  4B
344E:  MOVWF  FE9
3450:  MOVFF  FF2,155
3454:  BCF    FF2.7
3456:  MOVLW  0A
3458:  MOVWF  01
345A:  CLRF   FF7
345C:  MOVLW  00
345E:  MOVLB  0
3460:  CALL   035A
3464:  TBLRD*-
3466:  TBLRD*+
3468:  MOVFF  FF5,FEE
346C:  DECFSZ 01,F
346E:  BRA    3466
3470:  MOVLB  1
3472:  BTFSC  x55.7
3474:  BSF    FF2.7
3476:  MOVLW  01
3478:  MOVWF  xAE
347A:  MOVLW  4B
347C:  MOVWF  xAD
347E:  MOVLB  0
3480:  CALL   0CD4
3484:  MOVLB  1
....................     break; 
3486:  MOVLB  0
3488:  BRA    351E
....................  
....................     case '2': // week 
....................       week = get_int(); 
348A:  CALL   155A
348E:  MOVFF  02,14A
3492:  MOVFF  01,149
....................       if(week > 0 && week < 58)  
3496:  MOVLB  1
3498:  MOVF   x49,F
349A:  BNZ   34A0
349C:  MOVF   x4A,F
349E:  BZ    34B0
34A0:  MOVF   x4A,F
34A2:  BNZ   34B0
34A4:  MOVF   x49,W
34A6:  SUBLW  39
34A8:  BNC   34B0
....................       { 
....................       setup.week = week; 
34AA:  MOVFF  149,BA
....................       }   
34AE:  BRA    34EE
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
34B0:  MOVLW  01
34B2:  MOVWF  FEA
34B4:  MOVLW  4B
34B6:  MOVWF  FE9
34B8:  MOVFF  FF2,155
34BC:  BCF    FF2.7
34BE:  MOVLW  0A
34C0:  MOVWF  01
34C2:  CLRF   FF7
34C4:  MOVLW  00
34C6:  MOVLB  0
34C8:  CALL   035A
34CC:  TBLRD*-
34CE:  TBLRD*+
34D0:  MOVFF  FF5,FEE
34D4:  DECFSZ 01,F
34D6:  BRA    34CE
34D8:  MOVLB  1
34DA:  BTFSC  x55.7
34DC:  BSF    FF2.7
34DE:  MOVLW  01
34E0:  MOVWF  xAE
34E2:  MOVLW  4B
34E4:  MOVWF  xAD
34E6:  MOVLB  0
34E8:  CALL   0CD4
34EC:  MOVLB  1
....................    break; 
34EE:  MOVLB  0
34F0:  BRA    351E
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
34F2:  CALL   155A
34F6:  MOVFF  02,BC
34FA:  MOVFF  01,BB
....................       break; 
34FE:  BRA    351E
....................     case 'Q': 
....................       send_status(); 
3500:  GOTO   210E
....................       break; 
3504:  BRA    351E
.................... 	case 'R': 
....................       send_raw_status(); 
3506:  GOTO   2868
....................       break; 
350A:  BRA    351E
....................     default: 
....................       printf("\r\n$FAIL\r\n"); 
350C:  MOVLW  1C
350E:  MOVWF  FF6
3510:  MOVLW  06
3512:  MOVWF  FF7
3514:  GOTO   2A58
....................  
....................       return 0; 
3518:  MOVLW  00
351A:  MOVWF  01
351C:  BRA    3522
....................     } 
....................   return 0;      
351E:  MOVLW  00
3520:  MOVWF  01
3522:  GOTO   35F0 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
3526:  MOVF   54,W
3528:  ADDLW  FC
352A:  BTFSC  FD8.0
352C:  BRA    36BE
352E:  ADDLW  04
3530:  GOTO   36C2
....................     { 
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
3534:  CLRF   55
....................       comm_state++; 
3536:  INCF   54,F
....................       break; 
3538:  BRA    36BE
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................     if (COM1_rcnt) 
353A:  MOVF   31,F
353C:  BZ    35A2
....................       { 
....................       chr = COM1_get_chr(); 
353E:  CALL   1276
3542:  MOVLB  1
3544:  CLRF   x1D
3546:  MOVFF  01,11C
....................       if (chr) 
354A:  MOVF   x1C,W
354C:  IORWF  x1D,W
354E:  BZ    35A4
....................           if (chr == '$') 
3550:  MOVF   x1C,W
3552:  SUBLW  24
3554:  BNZ   3566
3556:  MOVF   x1D,F
3558:  BNZ   3566
....................              { 
....................              comm_state++; 
355A:  INCF   54,F
....................              comm_timeout = 0; 
355C:  MOVLB  0
355E:  CLRF   xA7
3560:  CLRF   xA6
....................              }    
3562:  BRA    35A2
3564:  MOVLB  1
....................            else 
....................               COM1_send_str("\r\n$FAULT\r\n"); 
3566:  MOVLW  01
3568:  MOVWF  FEA
356A:  MOVLW  20
356C:  MOVWF  FE9
356E:  MOVFF  FF2,13E
3572:  BCF    FF2.7
3574:  MOVLW  0B
3576:  MOVWF  01
3578:  CLRF   FF7
357A:  MOVLW  00
357C:  MOVLB  0
357E:  CALL   03A0
3582:  TBLRD*-
3584:  TBLRD*+
3586:  MOVFF  FF5,FEE
358A:  DECFSZ 01,F
358C:  BRA    3584
358E:  MOVLB  1
3590:  BTFSC  x3E.7
3592:  BSF    FF2.7
3594:  MOVLW  01
3596:  MOVWF  xAE
3598:  MOVLW  20
359A:  MOVWF  xAD
359C:  MOVLB  0
359E:  CALL   0CD4
35A2:  MOVLB  1
....................       } 
....................       break; 
35A4:  MOVLB  0
35A6:  BRA    36BE
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
35A8:  MOVF   31,F
35AA:  BTFSC  FD8.2
35AC:  BRA    3690
....................         { 
....................         comm_timeout = 0; 
35AE:  CLRF   xA7
35B0:  CLRF   xA6
....................         chr = COM1_get_chr(); 
35B2:  CALL   1276
35B6:  MOVLB  1
35B8:  CLRF   x1D
35BA:  MOVFF  01,11C
....................         comm_buf[comm_ridx++] = chr; 
35BE:  MOVF   55,W
35C0:  INCF   55,F
35C2:  CLRF   03
35C4:  ADDLW  56
35C6:  MOVWF  FE9
35C8:  MOVLW  00
35CA:  ADDWFC 03,W
35CC:  MOVWF  FEA
35CE:  MOVFF  11C,FEF
....................         if (comm_ridx > 70) 
35D2:  MOVF   55,W
35D4:  SUBLW  46
35D6:  BC    35E0
....................           { 
....................           comm_state = 0; 
35D8:  CLRF   54
....................           break; 
35DA:  MOVLB  0
35DC:  BRA    36BE
35DE:  MOVLB  1
....................           } 
....................         if (chr == 13)				//<CR> 
35E0:  MOVF   x1C,W
35E2:  SUBLW  0D
35E4:  BNZ   3648
35E6:  MOVF   x1D,F
35E8:  BNZ   3648
....................           { 
....................           ret = process_dollar_commands(); 
35EA:  MOVLB  0
35EC:  GOTO   2A7C
35F0:  MOVLB  1
35F2:  CLRF   x1F
35F4:  MOVFF  01,11E
....................           if (ret != 255) 
35F8:  INCFSZ x1E,W
35FA:  BRA    3600
35FC:  MOVF   x1F,F
35FE:  BZ    363E
....................             COM1_send_str("\r\n$OK\r\n"); 
3600:  MOVLW  01
3602:  MOVWF  FEA
3604:  MOVLW  2B
3606:  MOVWF  FE9
3608:  MOVFF  FF2,13E
360C:  BCF    FF2.7
360E:  MOVLW  08
3610:  MOVWF  01
3612:  CLRF   FF7
3614:  MOVLW  00
3616:  MOVLB  0
3618:  CALL   03C6
361C:  TBLRD*-
361E:  TBLRD*+
3620:  MOVFF  FF5,FEE
3624:  DECFSZ 01,F
3626:  BRA    361E
3628:  MOVLB  1
362A:  BTFSC  x3E.7
362C:  BSF    FF2.7
362E:  MOVLW  01
3630:  MOVWF  xAE
3632:  MOVLW  2B
3634:  MOVWF  xAD
3636:  MOVLB  0
3638:  CALL   0CD4
363C:  MOVLB  1
....................           COM1_init(); 
363E:  MOVLB  0
3640:  CALL   064C
....................           } 
3644:  BRA    3690
3646:  MOVLB  1
....................         else if (chr == 27)			//ESC 
3648:  MOVF   x1C,W
364A:  SUBLW  1B
364C:  BNZ   3692
364E:  MOVF   x1D,F
3650:  BNZ   3692
....................           { 
....................           COM1_send_str("\r\n$BREAK\r\n"); 
3652:  MOVLW  01
3654:  MOVWF  FEA
3656:  MOVLW  33
3658:  MOVWF  FE9
365A:  MOVFF  FF2,13E
365E:  BCF    FF2.7
3660:  MOVLW  0B
3662:  MOVWF  01
3664:  CLRF   FF7
3666:  MOVLW  00
3668:  MOVLB  0
366A:  CALL   03E8
366E:  TBLRD*-
3670:  TBLRD*+
3672:  MOVFF  FF5,FEE
3676:  DECFSZ 01,F
3678:  BRA    3670
367A:  MOVLB  1
367C:  BTFSC  x3E.7
367E:  BSF    FF2.7
3680:  MOVLW  01
3682:  MOVWF  xAE
3684:  MOVLW  33
3686:  MOVWF  xAD
3688:  MOVLB  0
368A:  CALL   0CD4
....................           comm_state = 0; 
368E:  CLRF   54
3690:  MOVLB  1
....................           } 
....................         } 
....................           
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
3692:  MOVF   54,W
3694:  SUBLW  01
3696:  BC    36BA
....................         if (TMR_100MS_COMM_TO) 
3698:  BTFSS  1E.1
369A:  BRA    36BA
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
369C:  BCF    1E.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
369E:  MOVLB  0
36A0:  INCF   xA6,F
36A2:  BTFSC  FD8.2
36A4:  INCF   xA7,F
36A6:  MOVF   xA7,W
36A8:  SUBLW  26
36AA:  BC    36B8
36AC:  XORLW  FF
36AE:  BNZ   36B6
36B0:  MOVF   xA6,W
36B2:  SUBLW  10
36B4:  BC    36B8
....................             comm_state = 0; 
36B6:  CLRF   54
36B8:  MOVLB  1
....................           } 
....................       break; 
36BA:  MOVLB  0
36BC:  BRA    36BE
....................     case COMM_DELAY: 
....................       break; 
....................     } 
36BE:  GOTO   36F4 (RETURN)
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... void clear_comm_errors(void) 
....................   { 
....................   UCHAR chr; 
....................   if (OERR) 
*
1250:  BTFSS  FAB.1
1252:  BRA    1268
....................     { 
....................     OERR = 0; 
1254:  BCF    FAB.1
....................     CREN = 0; 
1256:  BCF    FAB.4
....................     delay_us(5); 
1258:  CLRWDT
125A:  MOVLW  05
125C:  MOVWF  00
125E:  DECFSZ 00,F
1260:  BRA    125E
1262:  BRA    1264
1264:  NOP   
....................     CREN = 1; 
1266:  BSF    FAB.4
....................     } 
....................   if (FERR) 
1268:  BTFSS  FAB.2
126A:  BRA    1272
....................     { 
....................     FERR = 0; 
126C:  BCF    FAB.2
....................     chr = RCREG1; 
126E:  MOVFF  FAE,11C
....................     } 
1272:  GOTO   36F2 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   clear_comm_errors(); 
*
36EE:  GOTO   1250
....................   dollar_handler(); 
36F2:  BRA    3526
36F4:  GOTO   3860 (RETURN)
....................   } 
....................  
....................  
....................  
....................  
.................... //========== functions ======================================================== 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0626:  CLRF   F89
....................   output_b(0); 
0628:  CLRF   F8A
....................   output_c(0); 
062A:  CLRF   F8B
....................   output_d(0); 
062C:  CLRF   F8C
....................   output_e(0); 
062E:  CLRF   F8D
....................   set_tris_a(0b11000001); 
0630:  MOVLW  C1
0632:  MOVWF  F92
....................   set_tris_b(0b11000100); 
0634:  MOVLW  C4
0636:  MOVWF  F93
....................   set_tris_c(0b10000001); 
0638:  MOVLW  81
063A:  MOVWF  F94
....................   set_tris_d(0b10000000); 
063C:  MOVLW  80
063E:  MOVWF  F95
....................   set_tris_e(0b11111111); 
0640:  BSF    F96.0
0642:  BSF    F96.1
0644:  BSF    F96.2
0646:  BSF    F96.3
0648:  GOTO   0686 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
1632:  MOVLB  1
1634:  MOVFF  15A,03
1638:  MOVF   x59,W
163A:  BTFSC  FD8.2
163C:  DECF   x5A,F
163E:  DECF   x59,F
1640:  IORWF  03,W
1642:  BZ    169C
....................     write_eeprom(addr++, *data++); 
1644:  MOVF   x56,W
1646:  MOVWF  03
1648:  MOVF   x55,W
164A:  INCF   x55,F
164C:  BTFSC  FD8.2
164E:  INCF   x56,F
1650:  MOVWF  x5B
1652:  MOVFF  03,15C
1656:  MOVF   x58,W
1658:  MOVWF  03
165A:  MOVF   x57,W
165C:  INCF   x57,F
165E:  BTFSC  FD8.2
1660:  INCF   x58,F
1662:  MOVWF  FE9
1664:  MOVFF  03,FEA
1668:  MOVFF  FEF,15D
166C:  MOVF   FF2,W
166E:  MOVWF  00
1670:  BCF    FF2.7
1672:  MOVFF  15B,FA9
1676:  MOVFF  15D,FA8
167A:  BCF    FA6.6
167C:  BCF    FA6.7
167E:  BSF    FA6.2
1680:  MOVLB  F
1682:  MOVLW  55
1684:  MOVWF  FA7
1686:  MOVLW  AA
1688:  MOVWF  FA7
168A:  BSF    FA6.1
168C:  BTFSC  FA6.1
168E:  BRA    168C
1690:  BCF    FA6.2
1692:  MOVF   00,W
1694:  IORWF  FF2,F
1696:  MOVLB  0
1698:  BRA    1632
169A:  MOVLB  1
169C:  MOVLB  0
169E:  GOTO   16C4 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
06C4:  MOVLB  1
06C6:  MOVFF  121,03
06CA:  MOVF   x20,W
06CC:  BTFSC  FD8.2
06CE:  DECF   x21,F
06D0:  DECF   x20,F
06D2:  IORWF  03,W
06D4:  BZ    0714
....................     *data++ = read_eeprom(addr++); 
06D6:  MOVF   x1F,W
06D8:  MOVWF  03
06DA:  MOVF   x1E,W
06DC:  INCF   x1E,F
06DE:  BTFSC  FD8.2
06E0:  INCF   x1F,F
06E2:  MOVWF  FE9
06E4:  MOVFF  03,FEA
06E8:  MOVF   x1D,W
06EA:  MOVWF  03
06EC:  MOVF   x1C,W
06EE:  INCF   x1C,F
06F0:  BTFSC  FD8.2
06F2:  INCF   x1D,F
06F4:  MOVWF  x24
06F6:  MOVFF  03,125
06FA:  MOVFF  FF2,126
06FE:  BCF    FF2.7
0700:  MOVFF  124,FA9
0704:  BCF    FA6.6
0706:  BCF    FA6.7
0708:  BSF    FA6.0
070A:  MOVF   FA8,W
070C:  BTFSC  x26.7
070E:  BSF    FF2.7
0710:  MOVWF  FEF
0712:  BRA    06C6
0714:  MOVLB  0
0716:  GOTO   074C (RETURN)
....................   } 
....................  
.................... //============================================================================== 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
16A2:  MOVF   xED,W
16A4:  SUBLW  9F
16A6:  BNZ   16C4
16A8:  MOVF   xEE,W
16AA:  SUBLW  0B
16AC:  BNZ   16C4
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
16AE:  MOVLB  1
16B0:  CLRF   x56
16B2:  CLRF   x55
16B4:  CLRF   x58
16B6:  MOVLW  A8
16B8:  MOVWF  x57
16BA:  CLRF   x5A
16BC:  MOVLW  45
16BE:  MOVWF  x59
16C0:  MOVLB  0
16C2:  BRA    1632
....................   allow_write = 0; 
16C4:  CLRF   xEE
16C6:  CLRF   xED
16C8:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0736:  MOVLB  1
0738:  CLRF   x1D
073A:  CLRF   x1C
073C:  CLRF   x1F
073E:  MOVLW  A8
0740:  MOVWF  x1E
0742:  CLRF   x21
0744:  MOVLW  45
0746:  MOVWF  x20
0748:  MOVLB  0
074A:  BRA    06C4
....................   if (setup.frequency == 0xFFFF) 
074C:  INCFSZ xA9,W
074E:  BRA    0764
0750:  INCFSZ xAA,W
0752:  BRA    0764
....................     memset(&setup, 0, sizeof(setup)); 
0754:  CLRF   FEA
0756:  MOVLW  A8
0758:  MOVWF  FE9
075A:  CLRF   00
075C:  CLRF   02
075E:  MOVLW  45
0760:  MOVWF  01
0762:  BRA    071A
0764:  GOTO   377A (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void power_output(void)				//function not defined yet, need to finish it. 
....................   { 
....................   UINT power; 
....................  
.................... //  if (input(STANDBY)) 
.................... //    { 
.................... //    if (pwr_command) 
.................... //      output_high(POWER_EN); 
.................... //    else 
.................... //      output_low(POWER_EN); 
.................... 	if(pa_command) 
*
105E:  MOVLB  1
1060:  MOVF   x04,F
1062:  BZ    1068
.................... 	{ 
.................... 		output_high(LNA_EN); 
1064:  BSF    F8C.2
.................... 	} 
1066:  BRA    106A
.................... 	else 
.................... 	{ 
.................... 		output_low(LNA_EN); 
1068:  BCF    F8C.2
.................... 	} 
....................     //set_adc_channel(A2D_VGMON); // select forward power input 
.................... //	set_adc_channel(PWR_IN); // select forward power input 
.................... //    delay_us(20); 
.................... //    power = read_adc(); 
.................... //    if (power > VGMON_THRESHOLD) 
.................... //      output_low(PA_ON); 
.................... //    else if (pa_command) 
.................... //      output_high(PA_ON); 
.................... //    else 
.................... //      output_low(PA_ON); 
.................... //   } 
.................... //  else 
.................... //    { 
.................... //    output_low(POWER_EN); 
.................... //    output_low(PA_ON); 
.................... //    } 
....................  
....................  
....................  
....................   if (setup.power_level) 
106A:  MOVLB  0
106C:  MOVF   xAB,W
106E:  IORWF  xAC,W
1070:  BZ    1086
....................     { 
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1072:  MOVLW  01
1074:  MOVLB  1
1076:  MOVWF  x1E
1078:  MOVFF  B0,120
107C:  MOVFF  AF,11F
1080:  MOVLB  0
1082:  RCALL  0D68
....................     } 
1084:  BRA    1098
....................   else 
....................     { 
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1086:  MOVLW  01
1088:  MOVLB  1
108A:  MOVWF  x1E
108C:  MOVFF  AE,120
1090:  MOVFF  AD,11F
1094:  MOVLB  0
1096:  RCALL  0D68
....................     } 
....................  
....................  
....................  
.................... 	if(auto_power) 
1098:  MOVLB  1
109A:  MOVF   x07,F
109C:  BZ    1118
.................... 	{ 
....................   	set_adc_channel(A2D_PWR_IN); // select PWR_IN power input 
109E:  MOVLW  1C
10A0:  MOVWF  01
10A2:  MOVF   FC2,W
10A4:  ANDLW  83
10A6:  IORWF  01,W
10A8:  MOVWF  FC2
....................     delay_us(20); 
10AA:  CLRWDT
10AC:  MOVLW  19
10AE:  MOVWF  00
10B0:  DECFSZ 00,F
10B2:  BRA    10B0
10B4:  BRA    10B6
10B6:  NOP   
....................     power = read_adc(); 
10B8:  BSF    FC2.1
10BA:  BTFSC  FC2.1
10BC:  BRA    10BA
10BE:  MOVFF  FC3,11C
10C2:  MOVFF  FC4,11D
.................... 	//if(power > 125)				//400mv  P0 
.................... 	if(power > setup.auto_mode_tresh[0]) 
10C6:  MOVLB  0
10C8:  MOVF   xEA,W
10CA:  MOVLB  1
10CC:  SUBWF  x1D,W
10CE:  BNC   10F0
10D0:  BNZ   10E2
10D2:  MOVF   x1C,W
10D4:  MOVLB  0
10D6:  SUBWF  xE9,W
10D8:  BTFSS  FD8.0
10DA:  BRA    10E0
10DC:  MOVLB  1
10DE:  BRA    10F0
10E0:  MOVLB  1
.................... 		{ 
.................... 		output_high(VC1); 
10E2:  BSF    F8C.0
.................... 		output_low(VC2); 
10E4:  BCF    F8C.1
.................... 		setup.power_level = 0; 
10E6:  MOVLB  0
10E8:  CLRF   xAC
10EA:  CLRF   xAB
.................... 		} 
10EC:  BRA    1114
10EE:  MOVLB  1
.................... 	//else if(power < 108)		//350mv P1 
.................... 	else if(power < setup.auto_mode_tresh[1]) 
10F0:  MOVF   x1D,W
10F2:  MOVLB  0
10F4:  SUBWF  xEC,W
10F6:  BNC   1114
10F8:  BNZ   110A
10FA:  MOVF   xEB,W
10FC:  MOVLB  1
10FE:  SUBWF  x1C,W
1100:  BTFSS  FD8.0
1102:  BRA    1108
1104:  MOVLB  0
1106:  BRA    1114
1108:  MOVLB  0
.................... 		{ 
.................... 		output_low(VC1);		 
110A:  BCF    F8C.0
.................... 		output_high(VC2); 
110C:  BSF    F8C.1
.................... 		setup.power_level = 1; 
110E:  CLRF   xAC
1110:  MOVLW  01
1112:  MOVWF  xAB
.................... 		} 
.................... 	} 
1114:  BRA    112A
1116:  MOVLB  1
.................... 	else  
.................... 	{ 
.................... 		if(setup.power_level) 
1118:  MOVLB  0
111A:  MOVF   xAB,W
111C:  IORWF  xAC,W
111E:  BZ    1126
.................... 		{ 
.................... 			output_low(VC1); 
1120:  BCF    F8C.0
.................... 			output_high(VC2); 
1122:  BSF    F8C.1
.................... 		} 
1124:  BRA    112A
.................... 		else 
.................... 		{ 
.................... 			output_high(VC1); 
1126:  BSF    F8C.0
.................... 			output_low(VC2); 
1128:  BCF    F8C.1
.................... 		} 
.................... 	} 
....................   
....................   if (TMR_100MS_POWER) 
112A:  BTFSS  1E.3
112C:  BRA    124C
....................     { 
....................     TMR_100MS_POWER = 0; 
112E:  BCF    1E.3
....................     set_adc_channel(A2D_PREV); // select RSSI power input 
1130:  MOVLW  14
1132:  MOVWF  01
1134:  MOVF   FC2,W
1136:  ANDLW  83
1138:  IORWF  01,W
113A:  MOVWF  FC2
....................     delay_us(20); 
113C:  CLRWDT
113E:  MOVLW  19
1140:  MOVWF  00
1142:  DECFSZ 00,F
1144:  BRA    1142
1146:  BRA    1148
1148:  NOP   
....................     power = read_adc(); 
114A:  BSF    FC2.1
114C:  BTFSC  FC2.1
114E:  BRA    114C
1150:  MOVFF  FC4,11D
1154:  MOVLB  1
1156:  MOVFF  FC3,11C
....................     power_avg[pavgx] = power; 
115A:  BCF    FD8.0
115C:  RLCF   2B,W
115E:  MOVWF  02
1160:  RLCF   2C,W
1162:  MOVWF  03
1164:  MOVF   02,W
1166:  ADDLW  23
1168:  MOVWF  FE9
116A:  MOVLW  00
116C:  ADDWFC 03,W
116E:  MOVWF  FEA
1170:  MOVFF  11D,FEC
1174:  MOVF   FED,F
1176:  MOVFF  11C,FEF
....................     if (++pavgx > 3) 
117A:  INCF   2B,F
117C:  BTFSC  FD8.2
117E:  INCF   2C,F
1180:  MOVF   2C,F
1182:  BNZ   118A
1184:  MOVF   2B,W
1186:  SUBLW  03
1188:  BC    118E
....................       pavgx = 0; 
118A:  CLRF   2C
118C:  CLRF   2B
....................     power = (power_avg[0] + power_avg[1] + power_avg[2] + power_avg[3]) / 4; 
118E:  MOVF   25,W
1190:  ADDWF  23,W
1192:  MOVWF  x1E
1194:  MOVF   26,W
1196:  ADDWFC 24,W
1198:  MOVWF  x1F
119A:  MOVF   27,W
119C:  ADDWF  x1E,F
119E:  MOVF   28,W
11A0:  ADDWFC x1F,F
11A2:  MOVF   29,W
11A4:  ADDWF  x1E,F
11A6:  MOVF   2A,W
11A8:  ADDWFC x1F,F
11AA:  RRCF   x1F,W
11AC:  MOVWF  x1D
11AE:  RRCF   x1E,W
11B0:  MOVWF  x1C
11B2:  RRCF   x1D,F
11B4:  RRCF   x1C,F
11B6:  MOVLW  3F
11B8:  ANDWF  x1D,F
....................     if (power < setup.rssi_table[0][0]) 
11BA:  MOVF   x1D,W
11BC:  MOVLB  0
11BE:  SUBWF  xBE,W
11C0:  BNC   11E4
11C2:  BNZ   11D4
11C4:  MOVF   xBD,W
11C6:  MOVLB  1
11C8:  SUBWF  x1C,W
11CA:  BTFSS  FD8.0
11CC:  BRA    11D2
11CE:  MOVLB  0
11D0:  BRA    11E4
11D2:  MOVLB  0
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT1); 
11D4:  MOVLB  1
11D6:  CLRF   x1E
11D8:  CLRF   x20
11DA:  MOVLW  01
11DC:  MOVWF  x1F
11DE:  MOVLB  0
11E0:  RCALL  0D68
11E2:  BRA    124C
....................     else if (power < setup.rssi_table[4][0]) 
11E4:  MOVLB  1
11E6:  MOVF   x1D,W
11E8:  MOVLB  0
11EA:  SUBWF  xCE,W
11EC:  BNC   1210
11EE:  BNZ   1200
11F0:  MOVF   xCD,W
11F2:  MOVLB  1
11F4:  SUBWF  x1C,W
11F6:  BTFSS  FD8.0
11F8:  BRA    11FE
11FA:  MOVLB  0
11FC:  BRA    1210
11FE:  MOVLB  0
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT2); 
1200:  MOVLB  1
1202:  CLRF   x1E
1204:  CLRF   x20
1206:  MOVLW  05
1208:  MOVWF  x1F
120A:  MOVLB  0
120C:  RCALL  0D68
120E:  BRA    124C
....................     else if (power < setup.rssi_table[8][0]) 
1210:  MOVLB  1
1212:  MOVF   x1D,W
1214:  MOVLB  0
1216:  SUBWF  xDE,W
1218:  BNC   123C
121A:  BNZ   122C
121C:  MOVF   xDD,W
121E:  MOVLB  1
1220:  SUBWF  x1C,W
1222:  BTFSS  FD8.0
1224:  BRA    122A
1226:  MOVLB  0
1228:  BRA    123C
122A:  MOVLB  0
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT3); 
122C:  MOVLB  1
122E:  CLRF   x1E
1230:  CLRF   x20
1232:  MOVLW  30
1234:  MOVWF  x1F
1236:  MOVLB  0
1238:  RCALL  0D68
123A:  BRA    124C
....................     else 
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT4); 
123C:  MOVLB  1
123E:  CLRF   x1E
1240:  MOVLW  01
1242:  MOVWF  x20
1244:  MOVLW  E1
1246:  MOVWF  x1F
1248:  MOVLB  0
124A:  RCALL  0D68
....................     } 
124C:  GOTO   385E (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
065C:  MOVLW  48
065E:  IORLW  05
0660:  MOVWF  FBA
0662:  MOVLW  63
0664:  MOVWF  FBB
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0666:  CLRF   FB4
0668:  CLRF   FB1
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
066A:  MOVLW  00
066C:  IORLW  05
066E:  MOVLB  F
0670:  MOVWF  x51
0672:  MOVLW  63
0674:  MOVWF  x52
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0676:  CLRF   x4D
0678:  CLRF   x4E
....................   setup_timer_6(T6_DISABLED,0,1); 
067A:  MOVLW  00
067C:  MOVWF  x4A
067E:  MOVLW  00
0680:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0682:  MOVLB  0
0684:  BRA    0626
....................  
....................   //setup_ccp5(CCP_OFF); 
.................... //				  3p3  RSSI TMP  PWR_IN 28v 
....................   setup_adc_ports(sAN0|sAN5|sAN6|sAN7|sAN8); 
0686:  MOVF   FC1,W
0688:  ANDLW  F0
068A:  MOVWF  FC1
068C:  MOVLW  01
068E:  MOVLB  F
0690:  MOVWF  x38
0692:  MOVLW  07
0694:  MOVWF  x3C
0696:  MOVLW  04
0698:  MOVWF  x39
069A:  MOVLW  00
069C:  MOVWF  x3A
069E:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
06A0:  MOVF   FC0,W
06A2:  ANDLW  C0
06A4:  IORLW  25
06A6:  MOVWF  FC0
06A8:  BSF    FC0.7
06AA:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
06AC:  CLRF   F77
06AE:  MOVLW  04
06B0:  MOVWF  F78
06B2:  MOVWF  F79
....................  
....................   COM1_init(); 
06B4:  MOVLB  0
06B6:  RCALL  064C
....................   disable_interrupts(INT_RDA2);  
06B8:  BCF    FA3.5
....................   enable_interrupts(INT_TIMER2); 
06BA:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
06BC:  MOVLW  C0
06BE:  IORWF  FF2,F
06C0:  GOTO   3776 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq; 
....................   freq = setup.frequency; 
*
0C7A:  MOVFF  AA,156
0C7E:  MOVFF  A9,155
....................   PLL_compute_freq_parameters(freq * 10); 
0C82:  MOVFF  156,158
0C86:  MOVFF  155,157
0C8A:  MOVLB  1
0C8C:  CLRF   x5A
0C8E:  MOVLW  0A
0C90:  MOVWF  x59
0C92:  MOVLB  0
0C94:  BRA    08E2
0C96:  MOVFF  02,158
0C9A:  MOVFF  01,157
0C9E:  MOVFF  02,15A
0CA2:  MOVFF  01,159
0CA6:  RCALL  09F4
....................   PLL_update(); 
0CA8:  RCALL  0B8A
....................   power_control = 1000; 
0CAA:  MOVLW  03
0CAC:  MOVWF  17
0CAE:  MOVLW  E8
0CB0:  MOVWF  16
0CB2:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
....................  
.................... void check_bit_mode(void) 
....................   { 
....................  
.................... 	if(TMR_1Sec_BIT_EN) 
*
1032:  BTFSS  20.3
1034:  BRA    1058
.................... 		{ 
.................... 			TMR_1Sec_BIT_EN = 0; 
1036:  BCF    20.3
.................... 			count_1sec++; 
1038:  INCF   21,F
103A:  BTFSC  FD8.2
103C:  INCF   22,F
.................... 			if(count_1sec >= 6000) 
103E:  MOVF   22,W
1040:  SUBLW  16
1042:  BC    1058
1044:  XORLW  FF
1046:  BNZ   104E
1048:  MOVF   21,W
104A:  SUBLW  6F
104C:  BC    1058
.................... 			{	 
.................... 				count_1sec = 0; 
104E:  CLRF   22
1050:  CLRF   21
.................... 				output_low(BIT_MODE_EN); 
1052:  BCF    F8C.3
....................   				bit_mode = 0; 
1054:  MOVLB  1
1056:  CLRF   x06
1058:  MOVLB  0
.................... 				 
.................... 			} 
.................... 		} 
105A:  GOTO   3856 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void main(void) 
*
36F8:  CLRF   FF8
36FA:  BCF    FD0.7
36FC:  BSF    07.7
36FE:  MOVLW  70
3700:  MOVWF  FD3
3702:  BCF    F9B.6
3704:  BCF    F9B.7
3706:  BCF    FB8.3
3708:  MOVLW  19
370A:  MOVWF  FAF
370C:  MOVLW  A6
370E:  MOVWF  FAC
3710:  MOVLW  90
3712:  MOVWF  FAB
3714:  BCF    F70.3
3716:  MOVLW  19
3718:  MOVWF  F75
371A:  MOVLW  A6
371C:  MOVWF  F72
371E:  MOVLW  90
3720:  MOVWF  F71
3722:  CLRF   22
3724:  CLRF   21
3726:  CLRF   2C
3728:  CLRF   2B
372A:  CLRF   2E
372C:  CLRF   2D
372E:  CLRF   xEE
3730:  CLRF   xED
3732:  MOVFF  A8,104
3736:  MOVLW  01
3738:  MOVLB  1
373A:  MOVWF  x05
373C:  CLRF   x06
373E:  CLRF   x07
3740:  CLRF   x09
3742:  CLRF   x08
3744:  MOVF   FC1,W
3746:  ANDLW  F0
3748:  MOVWF  FC1
374A:  MOVLW  00
374C:  MOVLB  F
374E:  MOVWF  x38
3750:  MOVWF  x3C
3752:  MOVWF  x39
3754:  MOVWF  x3A
3756:  MOVWF  x3B
3758:  MOVLB  1
375A:  CLRF   x88
375C:  CLRF   F77
375E:  CLRF   F78
3760:  CLRF   F79
3762:  MOVLW  03
3764:  MOVWF  x0B
3766:  MOVLW  E8
3768:  MOVWF  x0A
376A:  CLRF   x0D
376C:  MOVLW  01
376E:  MOVWF  x0C
....................   { 
....................   int16 vouta =1000, five = 1; 
....................   init_system(); 
3770:  MOVLB  0
3772:  GOTO   065C
....................    
....................   read_setup(); 
3776:  GOTO   0736
....................  
.................... //  power_level = setup.power_in[setup.power_level]; 
....................   power_control = 10; 
377A:  CLRF   17
377C:  MOVLW  0A
377E:  MOVWF  16
....................  
....................   PLL_initialize(); 
3780:  GOTO   0840
....................  
....................   update_all(); 
3784:  CALL   0C7A
....................  
....................   COM1_send_str("\r\n"); 
3788:  MOVLW  0D
378A:  MOVLB  1
378C:  MOVWF  x0E
378E:  MOVLW  0A
3790:  MOVWF  x0F
3792:  CLRF   x10
3794:  MOVLW  01
3796:  MOVWF  xAE
3798:  MOVLW  0E
379A:  MOVWF  xAD
379C:  MOVLB  0
379E:  CALL   0CD4
....................   COM1_send_str(VERSION); 
37A2:  MOVLW  01
37A4:  MOVWF  FEA
37A6:  MOVLW  0E
37A8:  MOVWF  FE9
37AA:  MOVFF  FF2,11C
37AE:  BCF    FF2.7
37B0:  MOVWF  01
37B2:  CLRF   FF7
37B4:  MOVLW  00
37B6:  CALL   040E
37BA:  TBLRD*-
37BC:  TBLRD*+
37BE:  MOVFF  FF5,FEE
37C2:  DECFSZ 01,F
37C4:  BRA    37BC
37C6:  MOVLB  1
37C8:  BTFSC  x1C.7
37CA:  BSF    FF2.7
37CC:  MOVLW  01
37CE:  MOVWF  xAE
37D0:  MOVLW  0E
37D2:  MOVWF  xAD
37D4:  MOVLB  0
37D6:  CALL   0CD4
....................   COM1_send_str("\r\n"); 
37DA:  MOVLW  0D
37DC:  MOVLB  1
37DE:  MOVWF  x0E
37E0:  MOVLW  0A
37E2:  MOVWF  x0F
37E4:  CLRF   x10
37E6:  MOVLW  01
37E8:  MOVWF  xAE
37EA:  MOVLW  0E
37EC:  MOVWF  xAD
37EE:  MOVLB  0
37F0:  CALL   0CD4
....................  
....................   set_AD5314(DAC_POS_VOLT, vouta); 
37F4:  MOVLB  1
37F6:  CLRF   x1E
37F8:  MOVFF  10B,120
37FC:  MOVFF  10A,11F
3800:  MOVLB  0
3802:  CALL   0D68
....................   delay_ms(10); 
3806:  MOVLW  0A
3808:  MOVLB  1
380A:  MOVWF  x22
380C:  MOVLB  0
380E:  CALL   0810
....................   output_low(BIT_MODE_EN); 
3812:  BCF    F8C.3
....................   bit_mode = 0; 
3814:  MOVLB  1
3816:  CLRF   x06
....................   output_low(VC1); 
3818:  BCF    F8C.0
....................   output_high(VC2); 
381A:  BSF    F8C.1
....................   output_high(LNA_EN); 
381C:  BSF    F8C.2
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     if (TMR_100mS_BLINK) 
381E:  BTFSS  1E.0
3820:  BRA    384C
....................       { 
....................       TMR_100mS_BLINK = 0; 
3822:  BCF    1E.0
.................... 	  if(five) 
3824:  MOVF   x0C,W
3826:  IORWF  x0D,W
3828:  BZ    3836
.................... 	  { 
.................... 	  five = 0; 
382A:  CLRF   x0D
382C:  CLRF   x0C
.................... 	  update_all(); 
382E:  MOVLB  0
3830:  CALL   0C7A
3834:  MOVLB  1
....................       } 
....................       if (setup.power_level)		//$p power mode high 
3836:  MOVLB  0
3838:  MOVF   xAB,W
383A:  IORWF  xAC,W
383C:  BZ    3842
....................         output_high(LED1); 
383E:  BSF    F8A.4
3840:  BRA    3844
....................       else 
....................         output_toggle(LED1);		//$p power mode low 
3842:  BTG    F8A.4
....................       delay_us(1); 
3844:  CLRWDT
3846:  BRA    3848
3848:  NOP   
384A:  MOVLB  1
....................       } 
....................  
.................... 	if(bit_mode == 1) 
384C:  DECFSZ x06,W
384E:  BRA    3858
.................... 		check_bit_mode(); 
3850:  MOVLB  0
3852:  GOTO   1032
3856:  MOVLB  1
....................  
....................     power_output(); 
3858:  MOVLB  0
385A:  GOTO   105E
....................     comm_handler(); 
385E:  BRA    36EE
3860:  MOVLB  1
3862:  BRA    381E
....................     } 
....................  
....................   vouta = 1; 
3864:  CLRF   x0B
3866:  MOVLW  01
3868:  MOVWF  x0A
....................   } 
....................  
386A:  BRA    386A
....................  
....................  

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
