CCS PCH C Compiler, Version 5.008, 5967               10-Jul-18 12:24

               Filename:   C:\BA\Software_projects\PIC\1533\BA_1533\BA1533RXv1_0\BA1533RX.lst

               ROM used:   13892 bytes (42%)
                           Largest free fragment is 18872
               RAM used:   270 (18%) at main() level
                           455 (30%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   34E4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.1
004A:  GOTO   0054
004E:  BTFSC  F9E.1
0050:  GOTO   043C
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   046C
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0472
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0478
0078:  BTFSS  FA3.5
007A:  GOTO   0084
007E:  BTFSC  FA4.5
0080:  GOTO   04A6
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   0436
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <BA1533RX.h> 
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  EC
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSC  0D.7
00E8:  BSF    FF2.7
00EA:  RETURN 0
00EC:  DATA 00,00
00EE:  DATA DC,00
00F0:  DATA 91,81
00F2:  DATA 00,08
00F4:  DATA C2,5E
00F6:  DATA 00,18
00F8:  DATA B3,04
00FA:  DATA 00,00
00FC:  DATA 3C,00
00FE:  DATA 95,00
0100:  DATA 00,00
0102:  DATA 40,00
0104:  MOVFF  FF2,0D
0108:  BCF    FF2.7
010A:  CLRF   FF7
010C:  ADDLW  1E
010E:  MOVWF  FF6
0110:  MOVLW  01
0112:  ADDWFC FF7,F
0114:  TBLRD*+
0116:  MOVF   FF5,W
0118:  BTFSC  0D.7
011A:  BSF    FF2.7
011C:  RETURN 0
011E:  DATA 24,46
0120:  DATA 20,3C
0122:  DATA 66,72
0124:  DATA 65,71
0126:  DATA 75,65
0128:  DATA 6E,63
012A:  DATA 79,3E
012C:  DATA 3C,63
012E:  DATA 72,3E
0130:  DATA 20,20
0132:  DATA 09,53
0134:  DATA 65,74
0136:  DATA 20,66
0138:  DATA 72,65
013A:  DATA 71,75
013C:  DATA 65,6E
013E:  DATA 63,79
0140:  DATA 20,69
0142:  DATA 6E,20
0144:  DATA 31,4D
0146:  DATA 48,7A
0148:  DATA 20,69
014A:  DATA 6E,63
014C:  DATA 72,65
014E:  DATA 6D,65
0150:  DATA 6E,74
0152:  DATA 73,20
0154:  DATA 28,69
0156:  DATA 2E,65
0158:  DATA 2E,35
015A:  DATA 31,37
015C:  DATA 33,20
015E:  DATA 69,73
0160:  DATA 20,35
0162:  DATA 2E,31
0164:  DATA 37,33
0166:  DATA 47,48
0168:  DATA 7A,29
016A:  DATA 0D,0A
016C:  DATA 00,00
016E:  MOVFF  FF2,0D
0172:  BCF    FF2.7
0174:  CLRF   FF7
0176:  ADDLW  88
0178:  MOVWF  FF6
017A:  MOVLW  01
017C:  ADDWFC FF7,F
017E:  TBLRD*+
0180:  MOVF   FF5,W
0182:  BTFSC  0D.7
0184:  BSF    FF2.7
0186:  RETURN 0
0188:  DATA 24,4F
018A:  DATA 4E,20
018C:  DATA 3C,6F
018E:  DATA 6E,6F
0190:  DATA 66,66
0192:  DATA 3E,3C
0194:  DATA 63,72
0196:  DATA 3E,20
0198:  DATA 20,09
019A:  DATA 53,65
019C:  DATA 74,20
019E:  DATA 50,4C
01A0:  DATA 4C,20
01A2:  DATA 52,46
01A4:  DATA 20,4F
01A6:  DATA 55,54
01A8:  DATA 20,6F
01AA:  DATA 6E,28
01AC:  DATA 31,29
01AE:  DATA 20,6F
01B0:  DATA 72,20
01B2:  DATA 6F,66
01B4:  DATA 66,28
01B6:  DATA 30,29
01B8:  DATA 0D,0A
01BA:  DATA 00,00
01BC:  MOVFF  FF2,0D
01C0:  BCF    FF2.7
01C2:  CLRF   FF7
01C4:  ADDLW  D6
01C6:  MOVWF  FF6
01C8:  MOVLW  01
01CA:  ADDWFC FF7,F
01CC:  TBLRD*+
01CE:  MOVF   FF5,W
01D0:  BTFSC  0D.7
01D2:  BSF    FF2.7
01D4:  RETURN 0
01D6:  DATA 24,50
01D8:  DATA 53,20
01DA:  DATA 3C,70
01DC:  DATA 6F,77
01DE:  DATA 65,72
01E0:  DATA 3E,3C
01E2:  DATA 63,72
01E4:  DATA 3E,20
01E6:  DATA 20,09
01E8:  DATA 53,65
01EA:  DATA 74,20
01EC:  DATA 61,6D
01EE:  DATA 70,20
01F0:  DATA 70,6F
01F2:  DATA 77,65
01F4:  DATA 72,20
01F6:  DATA 6F,6E
01F8:  DATA 28,31
01FA:  DATA 29,20
01FC:  DATA 6F,72
01FE:  DATA 20,6F
0200:  DATA 66,66
0202:  DATA 28,30
0204:  DATA 29,0D
0206:  DATA 0A,00
0208:  MOVFF  FF2,0D
020C:  BCF    FF2.7
020E:  CLRF   FF7
0210:  ADDLW  22
0212:  MOVWF  FF6
0214:  MOVLW  02
0216:  ADDWFC FF7,F
0218:  TBLRD*+
021A:  MOVF   FF5,W
021C:  BTFSC  0D.7
021E:  BSF    FF2.7
0220:  RETURN 0
0222:  DATA 24,50
0224:  DATA 20,3C
0226:  DATA 6C,65
0228:  DATA 76,65
022A:  DATA 6C,3E
022C:  DATA 3C,63
022E:  DATA 72,3E
0230:  DATA 20,20
0232:  DATA 09,53
0234:  DATA 65,74
0236:  DATA 20,70
0238:  DATA 6F,77
023A:  DATA 65,72
023C:  DATA 20,6C
023E:  DATA 65,76
0240:  DATA 65,6C
0242:  DATA 20,68
0244:  DATA 69,67
0246:  DATA 68,28
0248:  DATA 31,29
024A:  DATA 20,6F
024C:  DATA 72,20
024E:  DATA 6C,6F
0250:  DATA 77,28
0252:  DATA 30,29
0254:  DATA 0D,0A
0256:  DATA 00,00
0258:  MOVFF  FF2,0D
025C:  BCF    FF2.7
025E:  CLRF   FF7
0260:  ADDLW  72
0262:  MOVWF  FF6
0264:  MOVLW  02
0266:  ADDWFC FF7,F
0268:  TBLRD*+
026A:  MOVF   FF5,W
026C:  BTFSC  0D.7
026E:  BSF    FF2.7
0270:  RETURN 0
0272:  DATA 24,4C
0274:  DATA 44,20
0276:  DATA 3C,66
0278:  DATA 77,64
027A:  DATA 3E,3C
027C:  DATA 63,72
027E:  DATA 3E,20
0280:  DATA 20,09
0282:  DATA 53,65
0284:  DATA 74,20
0286:  DATA 46,77
0288:  DATA 64,20
028A:  DATA 70,6F
028C:  DATA 77,65
028E:  DATA 72,20
0290:  DATA 6D,65
0292:  DATA 61,73
0294:  DATA 75,72
0296:  DATA 65,6D
0298:  DATA 65,6E
029A:  DATA 74,20
029C:  DATA 6F,6E
029E:  DATA 28,31
02A0:  DATA 29,20
02A2:  DATA 6F,72
02A4:  DATA 20,6F
02A6:  DATA 66,66
02A8:  DATA 28,30
02AA:  DATA 29,0D
02AC:  DATA 0A,00
02AE:  MOVFF  FF2,0D
02B2:  BCF    FF2.7
02B4:  CLRF   FF7
02B6:  ADDLW  C8
02B8:  MOVWF  FF6
02BA:  MOVLW  02
02BC:  ADDWFC FF7,F
02BE:  TBLRD*+
02C0:  MOVF   FF5,W
02C2:  BTFSC  0D.7
02C4:  BSF    FF2.7
02C6:  RETURN 0
02C8:  DATA 24,51
02CA:  DATA 3C,63
02CC:  DATA 72,3E
02CE:  DATA 20,20
02D0:  DATA 09,52
02D2:  DATA 65,71
02D4:  DATA 75,65
02D6:  DATA 73,74
02D8:  DATA 20,73
02DA:  DATA 74,61
02DC:  DATA 74,75
02DE:  DATA 73,0D
02E0:  DATA 0A,00
02E2:  MOVFF  FF2,0D
02E6:  BCF    FF2.7
02E8:  CLRF   FF7
02EA:  ADDLW  FC
02EC:  MOVWF  FF6
02EE:  MOVLW  02
02F0:  ADDWFC FF7,F
02F2:  TBLRD*+
02F4:  MOVF   FF5,W
02F6:  BTFSC  0D.7
02F8:  BSF    FF2.7
02FA:  RETURN 0
02FC:  DATA 24,42
02FE:  DATA 4D,3C
0300:  DATA 63,72
0302:  DATA 3E,20
0304:  DATA 20,09
0306:  DATA 42,49
0308:  DATA 54,20
030A:  DATA 4D,6F
030C:  DATA 64,65
030E:  DATA 20,4F
0310:  DATA 4E,28
0312:  DATA 31,29
0314:  DATA 20,4F
0316:  DATA 46,46
0318:  DATA 28,30
031A:  DATA 29,0D
031C:  DATA 0A,00
031E:  MOVFF  FF2,0D
0322:  BCF    FF2.7
0324:  CLRF   FF7
0326:  ADDLW  38
0328:  MOVWF  FF6
032A:  MOVLW  03
032C:  ADDWFC FF7,F
032E:  TBLRD*+
0330:  MOVF   FF5,W
0332:  BTFSC  0D.7
0334:  BSF    FF2.7
0336:  RETURN 0
0338:  DATA 24,54
033A:  DATA 52,3C
033C:  DATA 63,72
033E:  DATA 3E,20
0340:  DATA 20,09
0342:  DATA 54,52
0344:  DATA 41,4E
0346:  DATA 53,49
0348:  DATA 56,45
034A:  DATA 52,28
034C:  DATA 54,29
034E:  DATA 20,52
0350:  DATA 45,43
0352:  DATA 49,56
0354:  DATA 45,52
0356:  DATA 28,52
0358:  DATA 29,00
035A:  MOVFF  FF2,0D
035E:  BCF    FF2.7
0360:  CLRF   FF7
0362:  ADDLW  74
0364:  MOVWF  FF6
0366:  MOVLW  03
0368:  ADDWFC FF7,F
036A:  TBLRD*+
036C:  MOVF   FF5,W
036E:  BTFSC  0D.7
0370:  BSF    FF2.7
0372:  RETURN 0
0374:  DATA 0D,0A
0376:  DATA 24,46
0378:  DATA 41,49
037A:  DATA 4C,0D
037C:  DATA 0A,00
037E:  MOVFF  FF2,0D
0382:  BCF    FF2.7
0384:  CLRF   FF7
0386:  ADDLW  98
0388:  MOVWF  FF6
038A:  MOVLW  03
038C:  ADDWFC FF7,F
038E:  TBLRD*+
0390:  MOVF   FF5,W
0392:  BTFSC  0D.7
0394:  BSF    FF2.7
0396:  RETURN 0
0398:  DATA 0D,0A
039A:  DATA 24,52
039C:  DATA 0D,0A
039E:  DATA 00,00
03A0:  MOVFF  FF2,0D
03A4:  BCF    FF2.7
03A6:  CLRF   FF7
03A8:  ADDLW  BA
03AA:  MOVWF  FF6
03AC:  MOVLW  03
03AE:  ADDWFC FF7,F
03B0:  TBLRD*+
03B2:  MOVF   FF5,W
03B4:  BTFSC  0D.7
03B6:  BSF    FF2.7
03B8:  RETURN 0
03BA:  DATA 0D,0A
03BC:  DATA 24,46
03BE:  DATA 41,55
03C0:  DATA 4C,54
03C2:  DATA 0D,0A
03C4:  DATA 00,00
03C6:  MOVFF  FF2,0D
03CA:  BCF    FF2.7
03CC:  CLRF   FF7
03CE:  ADDLW  E0
03D0:  MOVWF  FF6
03D2:  MOVLW  03
03D4:  ADDWFC FF7,F
03D6:  TBLRD*+
03D8:  MOVF   FF5,W
03DA:  BTFSC  0D.7
03DC:  BSF    FF2.7
03DE:  RETURN 0
03E0:  DATA 0D,0A
03E2:  DATA 24,4F
03E4:  DATA 4B,0D
03E6:  DATA 0A,00
03E8:  MOVFF  FF2,0D
03EC:  BCF    FF2.7
03EE:  CLRF   FF7
03F0:  ADDLW  02
03F2:  MOVWF  FF6
03F4:  MOVLW  04
03F6:  ADDWFC FF7,F
03F8:  TBLRD*+
03FA:  MOVF   FF5,W
03FC:  BTFSC  0D.7
03FE:  BSF    FF2.7
0400:  RETURN 0
0402:  DATA 0D,0A
0404:  DATA 24,42
0406:  DATA 52,45
0408:  DATA 41,4B
040A:  DATA 0D,0A
040C:  DATA 00,00
040E:  MOVFF  FF2,0D
0412:  BCF    FF2.7
0414:  CLRF   FF7
0416:  ADDLW  28
0418:  MOVWF  FF6
041A:  MOVLW  04
041C:  ADDWFC FF7,F
041E:  TBLRD*+
0420:  MOVF   FF5,W
0422:  BTFSC  0D.7
0424:  BSF    FF2.7
0426:  RETURN 0
0428:  DATA 42,41
042A:  DATA 31,35
042C:  DATA 33,33
042E:  DATA 52,58
0430:  DATA 20,56
0432:  DATA 31,2E
0434:  DATA 30,00
*
04C6:  DATA 0D,0A
04C8:  DATA 33,2E
04CA:  DATA 33,76
04CC:  DATA 20,70
04CE:  DATA 6F,77
04D0:  DATA 65,72
04D2:  DATA 20,69
04D4:  DATA 6E,3D
04D6:  DATA 25,32
04D8:  DATA 2E,31
04DA:  DATA 66,28
04DC:  DATA 76,29
04DE:  DATA 20,32
04E0:  DATA 38,76
04E2:  DATA 20,70
04E4:  DATA 6F,77
04E6:  DATA 65,72
04E8:  DATA 20,69
04EA:  DATA 6E,3D
04EC:  DATA 25,32
04EE:  DATA 2E,31
04F0:  DATA 66,28
04F2:  DATA 76,29
04F4:  DATA 00,00
04F6:  DATA 0D,0A
04F8:  DATA 52,53
04FA:  DATA 53,49
04FC:  DATA 3D,25
04FE:  DATA 6C,75
0500:  DATA 00,00
0502:  DATA 0D,0A
0504:  DATA 46,52
0506:  DATA 45,51
0508:  DATA 3D,25
050A:  DATA 6C,75
050C:  DATA 2C,20
050E:  DATA 52,53
0510:  DATA 53,49
0512:  DATA 3D,25
0514:  DATA 30,2E
0516:  DATA 32,66
0518:  DATA 64,42
051A:  DATA 4D,2C
051C:  DATA 20,54
051E:  DATA 45,4D
0520:  DATA 50,3D
0522:  DATA 25,35
0524:  DATA 2E,31
0526:  DATA 66,28
0528:  DATA 63,29
052A:  DATA 2C,20
052C:  DATA 49,44
052E:  DATA 3D,25
0530:  DATA 6C,75
0532:  DATA 2C,20
0534:  DATA 44,43
0536:  DATA 3D,25
0538:  DATA 30,32
053A:  DATA 6C,75
053C:  DATA 25,30
053E:  DATA 32,75
0540:  DATA 2C,20
0542:  DATA 56,45
0544:  DATA 52,20
0546:  DATA 25,6C
0548:  DATA 73,2C
054A:  DATA 20,00
054C:  DATA 56,31
054E:  DATA 2E,30
0550:  DATA 00,00
0552:  DATA 4C,49
0554:  DATA 47,48
0556:  DATA 54,3D
0558:  DATA 4F,4E
055A:  DATA 2C,20
055C:  DATA 00,00
055E:  DATA 4C,49
0560:  DATA 47,48
0562:  DATA 54,3D
0564:  DATA 4F,46
0566:  DATA 46,2C
0568:  DATA 20,00
056A:  DATA 50,41
056C:  DATA 53,53
056E:  DATA 20,42
0570:  DATA 69,74
0572:  DATA 3D,25
0574:  DATA 6C,64
0576:  DATA 2C,20
0578:  DATA 00,00
057A:  DATA 46,41
057C:  DATA 49,4C
057E:  DATA 20,42
0580:  DATA 69,74
0582:  DATA 3D,25
0584:  DATA 6C,64
0586:  DATA 2C,20
0588:  DATA 00,00
058A:  DATA 53,59
058C:  DATA 4E,54
058E:  DATA 48,20
0590:  DATA 4C,4F
0592:  DATA 43,4B
0594:  DATA 3D,4C
0596:  DATA 4F,43
0598:  DATA 4B,2C
059A:  DATA 20,00
059C:  DATA 53,59
059E:  DATA 4E,54
05A0:  DATA 48,20
05A2:  DATA 4C,4F
05A4:  DATA 43,4B
05A6:  DATA 3D,4E
05A8:  DATA 4F,54
05AA:  DATA 20,4C
05AC:  DATA 4F,43
05AE:  DATA 4B,2C
05B0:  DATA 20,00
05B2:  DATA 42,49
05B4:  DATA 54,20
05B6:  DATA 4D,4F
05B8:  DATA 44,45
05BA:  DATA 3D,53
05BC:  DATA 54,41
05BE:  DATA 52,54
05C0:  DATA 2C,20
05C2:  DATA 00,00
05C4:  DATA 42,49
05C6:  DATA 54,20
05C8:  DATA 4D,4F
05CA:  DATA 44,45
05CC:  DATA 3D,53
05CE:  DATA 54,4F
05D0:  DATA 50,2C
05D2:  DATA 20,00
05D4:  DATA 50,4F
05D6:  DATA 57,45
05D8:  DATA 52,20
05DA:  DATA 4D,4F
05DC:  DATA 44,45
05DE:  DATA 3D,48
05E0:  DATA 49,47
05E2:  DATA 48,2C
05E4:  DATA 20,00
05E6:  DATA 50,4F
05E8:  DATA 57,45
05EA:  DATA 52,20
05EC:  DATA 4D,4F
05EE:  DATA 44,45
05F0:  DATA 3D,4C
05F2:  DATA 4F,57
05F4:  DATA 2C,20
05F6:  DATA 00,00
05F8:  DATA 41,55
05FA:  DATA 54,4F
05FC:  DATA 5F,50
05FE:  DATA 4F,57
0600:  DATA 45,52
0602:  DATA 3D,31
0604:  DATA 2C,20
0606:  DATA 00,00
0608:  DATA 41,55
060A:  DATA 54,4F
060C:  DATA 5F,50
060E:  DATA 4F,57
0610:  DATA 45,52
0612:  DATA 3D,30
0614:  DATA 2C,20
0616:  DATA 00,00
0618:  DATA 4D,4F
061A:  DATA 44,55
061C:  DATA 4C,45
061E:  DATA 20,54
0620:  DATA 59,50
0622:  DATA 45,3D
0624:  DATA 52,58
0626:  DATA 2C,20
0628:  DATA 00,00
062A:  DATA 0D,0A
062C:  DATA 24,46
062E:  DATA 41,49
0630:  DATA 4C,0D
0632:  DATA 0A,00
*
0728:  TSTFSZ 01
072A:  BRA    0732
072C:  TSTFSZ 02
072E:  BRA    0734
0730:  BRA    0740
0732:  INCF   02,F
0734:  MOVFF  00,FEE
0738:  DECFSZ 01,F
073A:  BRA    0734
073C:  DECFSZ 02,F
073E:  BRA    0734
0740:  GOTO   0772 (RETURN)
*
08F0:  MOVLB  1
08F2:  MOVF   x53,W
08F4:  MULWF  x55
08F6:  MOVFF  FF3,01
08FA:  MOVFF  FF4,00
08FE:  MULWF  x56
0900:  MOVF   FF3,W
0902:  ADDWF  00,F
0904:  MOVF   x54,W
0906:  MULWF  x55
0908:  MOVF   FF3,W
090A:  ADDWFC 00,W
090C:  MOVWF  02
090E:  MOVLB  0
0910:  GOTO   0CA4 (RETURN)
0914:  MOVLB  1
0916:  CLRF   x6F
0918:  CLRF   x70
091A:  MOVLW  01
091C:  MOVWF  x71
091E:  CLRF   FDA
0920:  CLRF   FD9
0922:  MOVWF  x74
0924:  MOVLW  67
0926:  MOVWF  x73
0928:  MOVLW  01
092A:  MOVWF  FEA
092C:  MOVLW  6B
092E:  MOVWF  FE9
0930:  MOVFF  174,FE2
0934:  MOVFF  173,FE1
0938:  MOVFF  171,172
093C:  BCF    FD8.0
093E:  MOVF   FE5,W
0940:  MULWF  FEE
0942:  MOVF   FF3,W
0944:  ADDWFC x6F,F
0946:  MOVF   FF4,W
0948:  ADDWFC x70,F
094A:  DECFSZ x72,F
094C:  BRA    093C
094E:  MOVFF  16F,FDE
0952:  MOVFF  170,16F
0956:  CLRF   x70
0958:  BTFSC  FD8.0
095A:  INCF   x70,F
095C:  INCF   x73,F
095E:  BTFSC  FD8.2
0960:  INCF   x74,F
0962:  INCF   x71,F
0964:  MOVF   x71,W
0966:  SUBLW  05
0968:  BNZ   0928
096A:  MOVLB  0
096C:  RETURN 0
096E:  BTFSC  FD8.1
0970:  BRA    097A
0972:  MOVLW  01
0974:  MOVWF  FEA
0976:  MOVLW  BF
0978:  MOVWF  FE9
097A:  CLRF   00
097C:  CLRF   01
097E:  CLRF   02
0980:  CLRF   03
0982:  MOVLB  1
0984:  CLRF   xBF
0986:  CLRF   xC0
0988:  CLRF   xC1
098A:  CLRF   xC2
098C:  MOVF   xBE,W
098E:  IORWF  xBD,W
0990:  IORWF  xBC,W
0992:  IORWF  xBB,W
0994:  BZ    09EE
0996:  MOVLW  20
0998:  MOVWF  xC3
099A:  BCF    FD8.0
099C:  RLCF   xB7,F
099E:  RLCF   xB8,F
09A0:  RLCF   xB9,F
09A2:  RLCF   xBA,F
09A4:  RLCF   xBF,F
09A6:  RLCF   xC0,F
09A8:  RLCF   xC1,F
09AA:  RLCF   xC2,F
09AC:  MOVF   xBE,W
09AE:  SUBWF  xC2,W
09B0:  BNZ   09C2
09B2:  MOVF   xBD,W
09B4:  SUBWF  xC1,W
09B6:  BNZ   09C2
09B8:  MOVF   xBC,W
09BA:  SUBWF  xC0,W
09BC:  BNZ   09C2
09BE:  MOVF   xBB,W
09C0:  SUBWF  xBF,W
09C2:  BNC   09E2
09C4:  MOVF   xBB,W
09C6:  SUBWF  xBF,F
09C8:  MOVF   xBC,W
09CA:  BTFSS  FD8.0
09CC:  INCFSZ xBC,W
09CE:  SUBWF  xC0,F
09D0:  MOVF   xBD,W
09D2:  BTFSS  FD8.0
09D4:  INCFSZ xBD,W
09D6:  SUBWF  xC1,F
09D8:  MOVF   xBE,W
09DA:  BTFSS  FD8.0
09DC:  INCFSZ xBE,W
09DE:  SUBWF  xC2,F
09E0:  BSF    FD8.0
09E2:  RLCF   00,F
09E4:  RLCF   01,F
09E6:  RLCF   02,F
09E8:  RLCF   03,F
09EA:  DECFSZ xC3,F
09EC:  BRA    099A
09EE:  MOVFF  1BF,FEF
09F2:  MOVFF  1C0,FEC
09F6:  MOVFF  1C1,FEC
09FA:  MOVFF  1C2,FEC
09FE:  MOVLB  0
0A00:  RETURN 0
*
1368:  MOVLB  1
136A:  MOVF   x58,W
136C:  XORWF  x5A,W
136E:  ANDLW  80
1370:  MOVWF  x5C
1372:  BTFSS  x58.7
1374:  BRA    1380
1376:  COMF   x57,F
1378:  COMF   x58,F
137A:  INCF   x57,F
137C:  BTFSC  FD8.2
137E:  INCF   x58,F
1380:  BTFSS  x5A.7
1382:  BRA    138E
1384:  COMF   x59,F
1386:  COMF   x5A,F
1388:  INCF   x59,F
138A:  BTFSC  FD8.2
138C:  INCF   x5A,F
138E:  MOVF   x57,W
1390:  MULWF  x59
1392:  MOVFF  FF3,01
1396:  MOVFF  FF4,00
139A:  MULWF  x5A
139C:  MOVF   FF3,W
139E:  ADDWF  00,F
13A0:  MOVF   x58,W
13A2:  MULWF  x59
13A4:  MOVF   FF3,W
13A6:  ADDWFC 00,W
13A8:  MOVWF  02
13AA:  BTFSS  x5C.7
13AC:  BRA    13B8
13AE:  COMF   01,F
13B0:  COMF   02,F
13B2:  INCF   01,F
13B4:  BTFSC  FD8.2
13B6:  INCF   02,F
13B8:  MOVLB  0
13BA:  RETURN 0
*
1586:  MOVLW  8E
1588:  MOVWF  00
158A:  MOVFF  1B3,01
158E:  MOVFF  1B2,02
1592:  CLRF   03
1594:  MOVF   01,F
1596:  BNZ   15AA
1598:  MOVFF  02,01
159C:  CLRF   02
159E:  MOVLW  08
15A0:  SUBWF  00,F
15A2:  MOVF   01,F
15A4:  BNZ   15AA
15A6:  CLRF   00
15A8:  BRA    15BA
15AA:  BCF    FD8.0
15AC:  BTFSC  01.7
15AE:  BRA    15B8
15B0:  RLCF   02,F
15B2:  RLCF   01,F
15B4:  DECF   00,F
15B6:  BRA    15AA
15B8:  BCF    01.7
15BA:  RETURN 0
15BC:  MOVLB  1
15BE:  MOVF   xB7,W
15C0:  BTFSC  FD8.2
15C2:  BRA    16A6
15C4:  MOVWF  00
15C6:  MOVF   xBB,W
15C8:  BTFSC  FD8.2
15CA:  BRA    16A6
15CC:  ADDWF  00,F
15CE:  BNC   15D8
15D0:  MOVLW  81
15D2:  ADDWF  00,F
15D4:  BC    16A6
15D6:  BRA    15E0
15D8:  MOVLW  7F
15DA:  SUBWF  00,F
15DC:  BNC   16A6
15DE:  BZ    16A6
15E0:  MOVFF  1B8,1BF
15E4:  MOVF   xBC,W
15E6:  XORWF  xBF,F
15E8:  BSF    xB8.7
15EA:  BSF    xBC.7
15EC:  MOVF   xBA,W
15EE:  MULWF  xBE
15F0:  MOVFF  FF4,1C1
15F4:  MOVF   xB9,W
15F6:  MULWF  xBD
15F8:  MOVFF  FF4,03
15FC:  MOVFF  FF3,1C0
1600:  MULWF  xBE
1602:  MOVF   FF3,W
1604:  ADDWF  xC1,F
1606:  MOVF   FF4,W
1608:  ADDWFC xC0,F
160A:  MOVLW  00
160C:  ADDWFC 03,F
160E:  MOVF   xBA,W
1610:  MULWF  xBD
1612:  MOVF   FF3,W
1614:  ADDWF  xC1,F
1616:  MOVF   FF4,W
1618:  ADDWFC xC0,F
161A:  MOVLW  00
161C:  CLRF   02
161E:  ADDWFC 03,F
1620:  ADDWFC 02,F
1622:  MOVF   xB8,W
1624:  MULWF  xBE
1626:  MOVF   FF3,W
1628:  ADDWF  xC0,F
162A:  MOVF   FF4,W
162C:  ADDWFC 03,F
162E:  MOVLW  00
1630:  ADDWFC 02,F
1632:  MOVF   xB8,W
1634:  MULWF  xBD
1636:  MOVF   FF3,W
1638:  ADDWF  03,F
163A:  MOVF   FF4,W
163C:  ADDWFC 02,F
163E:  MOVLW  00
1640:  CLRF   01
1642:  ADDWFC 01,F
1644:  MOVF   xBA,W
1646:  MULWF  xBC
1648:  MOVF   FF3,W
164A:  ADDWF  xC0,F
164C:  MOVF   FF4,W
164E:  ADDWFC 03,F
1650:  MOVLW  00
1652:  ADDWFC 02,F
1654:  ADDWFC 01,F
1656:  MOVF   xB9,W
1658:  MULWF  xBC
165A:  MOVF   FF3,W
165C:  ADDWF  03,F
165E:  MOVF   FF4,W
1660:  ADDWFC 02,F
1662:  MOVLW  00
1664:  ADDWFC 01,F
1666:  MOVF   xB8,W
1668:  MULWF  xBC
166A:  MOVF   FF3,W
166C:  ADDWF  02,F
166E:  MOVF   FF4,W
1670:  ADDWFC 01,F
1672:  INCF   00,F
1674:  BTFSC  01.7
1676:  BRA    1682
1678:  RLCF   xC0,F
167A:  RLCF   03,F
167C:  RLCF   02,F
167E:  RLCF   01,F
1680:  DECF   00,F
1682:  MOVLW  00
1684:  BTFSS  xC0.7
1686:  BRA    169C
1688:  INCF   03,F
168A:  ADDWFC 02,F
168C:  ADDWFC 01,F
168E:  MOVF   01,W
1690:  BNZ   169C
1692:  MOVF   02,W
1694:  BNZ   169C
1696:  MOVF   03,W
1698:  BNZ   169C
169A:  INCF   00,F
169C:  BTFSC  xBF.7
169E:  BSF    01.7
16A0:  BTFSS  xBF.7
16A2:  BCF    01.7
16A4:  BRA    16AE
16A6:  CLRF   00
16A8:  CLRF   01
16AA:  CLRF   02
16AC:  CLRF   03
16AE:  MOVLB  0
16B0:  RETURN 0
16B2:  MOVLW  8E
16B4:  MOVWF  00
16B6:  MOVLB  1
16B8:  MOVF   x51,W
16BA:  SUBWF  00,F
16BC:  MOVFF  152,02
16C0:  MOVFF  153,01
16C4:  BSF    02.7
16C6:  MOVF   00,F
16C8:  BZ    16DC
16CA:  BCF    FD8.0
16CC:  MOVF   02,F
16CE:  BNZ   16D4
16D0:  MOVF   01,F
16D2:  BZ    16DC
16D4:  RRCF   02,F
16D6:  RRCF   01,F
16D8:  DECFSZ 00,F
16DA:  BRA    16CA
16DC:  BTFSS  x52.7
16DE:  BRA    16EA
16E0:  COMF   01,F
16E2:  COMF   02,F
16E4:  INCF   01,F
16E6:  BTFSC  FD8.2
16E8:  INCF   02,F
16EA:  MOVLB  0
16EC:  RETURN 0
16EE:  MOVLW  80
16F0:  BTFSS  FD8.1
16F2:  BRA    16F8
16F4:  MOVLB  1
16F6:  XORWF  xB9,F
16F8:  MOVLB  1
16FA:  CLRF   xBE
16FC:  CLRF   xBF
16FE:  MOVFF  1B5,1BD
1702:  MOVF   xB9,W
1704:  XORWF  xBD,F
1706:  MOVF   xB4,W
1708:  BTFSC  FD8.2
170A:  BRA    18CA
170C:  MOVWF  xBC
170E:  MOVWF  00
1710:  MOVF   xB8,W
1712:  BTFSC  FD8.2
1714:  BRA    18DC
1716:  SUBWF  xBC,F
1718:  BTFSC  FD8.2
171A:  BRA    1822
171C:  BNC   179A
171E:  MOVFF  1B9,1C2
1722:  BSF    xC2.7
1724:  MOVFF  1BA,1C1
1728:  MOVFF  1BB,1C0
172C:  CLRF   xBF
172E:  BCF    FD8.0
1730:  RRCF   xC2,F
1732:  RRCF   xC1,F
1734:  RRCF   xC0,F
1736:  RRCF   xBF,F
1738:  DECFSZ xBC,F
173A:  BRA    172C
173C:  BTFSS  xBD.7
173E:  BRA    1746
1740:  BSF    xBE.0
1742:  BRA    1904
1744:  BCF    xBE.0
1746:  BCF    xBC.0
1748:  BSF    xBE.4
174A:  MOVLW  01
174C:  MOVWF  FEA
174E:  MOVLW  B7
1750:  MOVWF  FE9
1752:  BRA    192A
1754:  BCF    xBE.4
1756:  BTFSC  xBD.7
1758:  BRA    176E
175A:  BTFSS  xBC.0
175C:  BRA    1784
175E:  RRCF   xC2,F
1760:  RRCF   xC1,F
1762:  RRCF   xC0,F
1764:  RRCF   xBF,F
1766:  INCF   00,F
1768:  BTFSC  FD8.2
176A:  BRA    18FA
176C:  BRA    1784
176E:  BTFSC  xC2.7
1770:  BRA    178A
1772:  BCF    FD8.0
1774:  RLCF   xBF,F
1776:  RLCF   xC0,F
1778:  RLCF   xC1,F
177A:  RLCF   xC2,F
177C:  DECF   00,F
177E:  BTFSC  FD8.2
1780:  BRA    18FA
1782:  BRA    176E
1784:  BSF    xBE.6
1786:  BRA    1862
1788:  BCF    xBE.6
178A:  MOVFF  1B5,1BD
178E:  BTFSS  xB5.7
1790:  BRA    1796
1792:  BSF    xC2.7
1794:  BRA    18EC
1796:  BCF    xC2.7
1798:  BRA    18EC
179A:  MOVFF  1B8,1BC
179E:  MOVFF  1B8,00
17A2:  MOVF   xB4,W
17A4:  SUBWF  xBC,F
17A6:  MOVFF  1B5,1C2
17AA:  BSF    xC2.7
17AC:  MOVFF  1B6,1C1
17B0:  MOVFF  1B7,1C0
17B4:  CLRF   xBF
17B6:  BCF    FD8.0
17B8:  RRCF   xC2,F
17BA:  RRCF   xC1,F
17BC:  RRCF   xC0,F
17BE:  RRCF   xBF,F
17C0:  DECFSZ xBC,F
17C2:  BRA    17B4
17C4:  BTFSS  xBD.7
17C6:  BRA    17CE
17C8:  BSF    xBE.1
17CA:  BRA    1904
17CC:  BCF    xBE.1
17CE:  BCF    xBC.0
17D0:  BSF    xBE.5
17D2:  MOVLW  01
17D4:  MOVWF  FEA
17D6:  MOVLW  BB
17D8:  MOVWF  FE9
17DA:  BRA    192A
17DC:  BCF    xBE.5
17DE:  BTFSC  xBD.7
17E0:  BRA    17F6
17E2:  BTFSS  xBC.0
17E4:  BRA    180C
17E6:  RRCF   xC2,F
17E8:  RRCF   xC1,F
17EA:  RRCF   xC0,F
17EC:  RRCF   xBF,F
17EE:  INCF   00,F
17F0:  BTFSC  FD8.2
17F2:  BRA    18FA
17F4:  BRA    180C
17F6:  BTFSC  xC2.7
17F8:  BRA    1812
17FA:  BCF    FD8.0
17FC:  RLCF   xBF,F
17FE:  RLCF   xC0,F
1800:  RLCF   xC1,F
1802:  RLCF   xC2,F
1804:  DECF   00,F
1806:  BTFSC  FD8.2
1808:  BRA    18FA
180A:  BRA    17F6
180C:  BSF    xBE.7
180E:  BRA    1862
1810:  BCF    xBE.7
1812:  MOVFF  1B9,1BD
1816:  BTFSS  xB9.7
1818:  BRA    181E
181A:  BSF    xC2.7
181C:  BRA    18EC
181E:  BCF    xC2.7
1820:  BRA    18EC
1822:  MOVFF  1B9,1C2
1826:  BSF    xC2.7
1828:  MOVFF  1BA,1C1
182C:  MOVFF  1BB,1C0
1830:  BTFSS  xBD.7
1832:  BRA    183C
1834:  BCF    xC2.7
1836:  BSF    xBE.2
1838:  BRA    1904
183A:  BCF    xBE.2
183C:  CLRF   xBF
183E:  BCF    xBC.0
1840:  MOVLW  01
1842:  MOVWF  FEA
1844:  MOVLW  B7
1846:  MOVWF  FE9
1848:  BRA    192A
184A:  BTFSC  xBD.7
184C:  BRA    1886
184E:  MOVFF  1B5,1BD
1852:  BTFSS  xBC.0
1854:  BRA    1862
1856:  RRCF   xC2,F
1858:  RRCF   xC1,F
185A:  RRCF   xC0,F
185C:  RRCF   xBF,F
185E:  INCF   00,F
1860:  BZ    18FA
1862:  BTFSS  xBF.7
1864:  BRA    187C
1866:  INCF   xC0,F
1868:  BNZ   187C
186A:  INCF   xC1,F
186C:  BNZ   187C
186E:  INCF   xC2,F
1870:  BNZ   187C
1872:  RRCF   xC2,F
1874:  RRCF   xC1,F
1876:  RRCF   xC0,F
1878:  INCF   00,F
187A:  BZ    18FA
187C:  BTFSC  xBE.6
187E:  BRA    1788
1880:  BTFSC  xBE.7
1882:  BRA    1810
1884:  BRA    18BE
1886:  MOVLW  80
1888:  XORWF  xC2,F
188A:  BTFSS  xC2.7
188C:  BRA    1896
188E:  BRA    1904
1890:  MOVFF  1B9,1BD
1894:  BRA    18AA
1896:  MOVFF  1B5,1BD
189A:  MOVF   xC2,F
189C:  BNZ   18AA
189E:  MOVF   xC1,F
18A0:  BNZ   18AA
18A2:  MOVF   xC0,F
18A4:  BNZ   18AA
18A6:  CLRF   00
18A8:  BRA    18EC
18AA:  BTFSC  xC2.7
18AC:  BRA    18BE
18AE:  BCF    FD8.0
18B0:  RLCF   xBF,F
18B2:  RLCF   xC0,F
18B4:  RLCF   xC1,F
18B6:  RLCF   xC2,F
18B8:  DECFSZ 00,F
18BA:  BRA    18AA
18BC:  BRA    18FA
18BE:  BTFSS  xBD.7
18C0:  BRA    18C6
18C2:  BSF    xC2.7
18C4:  BRA    18EC
18C6:  BCF    xC2.7
18C8:  BRA    18EC
18CA:  MOVFF  1B8,00
18CE:  MOVFF  1B9,1C2
18D2:  MOVFF  1BA,1C1
18D6:  MOVFF  1BB,1C0
18DA:  BRA    18EC
18DC:  MOVFF  1B4,00
18E0:  MOVFF  1B5,1C2
18E4:  MOVFF  1B6,1C1
18E8:  MOVFF  1B7,1C0
18EC:  MOVFF  1C2,01
18F0:  MOVFF  1C1,02
18F4:  MOVFF  1C0,03
18F8:  BRA    1962
18FA:  CLRF   00
18FC:  CLRF   01
18FE:  CLRF   02
1900:  CLRF   03
1902:  BRA    1962
1904:  CLRF   xBF
1906:  COMF   xC0,F
1908:  COMF   xC1,F
190A:  COMF   xC2,F
190C:  COMF   xBF,F
190E:  INCF   xBF,F
1910:  BNZ   191C
1912:  INCF   xC0,F
1914:  BNZ   191C
1916:  INCF   xC1,F
1918:  BNZ   191C
191A:  INCF   xC2,F
191C:  BTFSC  xBE.0
191E:  BRA    1744
1920:  BTFSC  xBE.1
1922:  BRA    17CC
1924:  BTFSC  xBE.2
1926:  BRA    183A
1928:  BRA    1890
192A:  MOVF   FEF,W
192C:  ADDWF  xC0,F
192E:  BNC   193A
1930:  INCF   xC1,F
1932:  BNZ   193A
1934:  INCF   xC2,F
1936:  BTFSC  FD8.2
1938:  BSF    xBC.0
193A:  MOVF   FED,F
193C:  MOVF   FEF,W
193E:  ADDWF  xC1,F
1940:  BNC   1948
1942:  INCF   xC2,F
1944:  BTFSC  FD8.2
1946:  BSF    xBC.0
1948:  MOVF   FED,F
194A:  MOVF   FEF,W
194C:  BTFSC  FEF.7
194E:  BRA    1952
1950:  XORLW  80
1952:  ADDWF  xC2,F
1954:  BTFSC  FD8.0
1956:  BSF    xBC.0
1958:  BTFSC  xBE.4
195A:  BRA    1754
195C:  BTFSC  xBE.5
195E:  BRA    17DC
1960:  BRA    184A
1962:  MOVLB  0
1964:  RETURN 0
1966:  MOVLB  1
1968:  MOVF   xAE,W
196A:  BTFSC  FD8.2
196C:  BRA    1AB8
196E:  MOVWF  xBA
1970:  MOVF   xB2,W
1972:  BTFSC  FD8.2
1974:  BRA    1AB8
1976:  SUBWF  xBA,F
1978:  BNC   1984
197A:  MOVLW  7F
197C:  ADDWF  xBA,F
197E:  BTFSC  FD8.0
1980:  BRA    1AB8
1982:  BRA    1990
1984:  MOVLW  81
1986:  SUBWF  xBA,F
1988:  BTFSS  FD8.0
198A:  BRA    1AB8
198C:  BTFSC  FD8.2
198E:  BRA    1AB8
1990:  MOVFF  1BA,00
1994:  CLRF   01
1996:  CLRF   02
1998:  CLRF   03
199A:  CLRF   xB9
199C:  MOVFF  1AF,1B8
19A0:  BSF    xB8.7
19A2:  MOVFF  1B0,1B7
19A6:  MOVFF  1B1,1B6
19AA:  MOVLW  19
19AC:  MOVWF  xBA
19AE:  MOVF   xB5,W
19B0:  SUBWF  xB6,F
19B2:  BC    19CE
19B4:  MOVLW  01
19B6:  SUBWF  xB7,F
19B8:  BC    19CE
19BA:  SUBWF  xB8,F
19BC:  BC    19CE
19BE:  SUBWF  xB9,F
19C0:  BC    19CE
19C2:  INCF   xB9,F
19C4:  INCF   xB8,F
19C6:  INCF   xB7,F
19C8:  MOVF   xB5,W
19CA:  ADDWF  xB6,F
19CC:  BRA    1A1E
19CE:  MOVF   xB4,W
19D0:  SUBWF  xB7,F
19D2:  BC    19F8
19D4:  MOVLW  01
19D6:  SUBWF  xB8,F
19D8:  BC    19F8
19DA:  SUBWF  xB9,F
19DC:  BC    19F8
19DE:  INCF   xB9,F
19E0:  INCF   xB8,F
19E2:  MOVF   xB4,W
19E4:  ADDWF  xB7,F
19E6:  MOVF   xB5,W
19E8:  ADDWF  xB6,F
19EA:  BNC   1A1E
19EC:  INCF   xB7,F
19EE:  BNZ   1A1E
19F0:  INCF   xB8,F
19F2:  BNZ   1A1E
19F4:  INCF   xB9,F
19F6:  BRA    1A1E
19F8:  MOVF   xB3,W
19FA:  IORLW  80
19FC:  SUBWF  xB8,F
19FE:  BC    1A1C
1A00:  MOVLW  01
1A02:  SUBWF  xB9,F
1A04:  BC    1A1C
1A06:  INCF   xB9,F
1A08:  MOVF   xB3,W
1A0A:  IORLW  80
1A0C:  ADDWF  xB8,F
1A0E:  MOVF   xB4,W
1A10:  ADDWF  xB7,F
1A12:  BNC   19E6
1A14:  INCF   xB8,F
1A16:  BNZ   19E6
1A18:  INCF   xB9,F
1A1A:  BRA    19E6
1A1C:  BSF    03.0
1A1E:  DECFSZ xBA,F
1A20:  BRA    1A24
1A22:  BRA    1A3A
1A24:  BCF    FD8.0
1A26:  RLCF   xB6,F
1A28:  RLCF   xB7,F
1A2A:  RLCF   xB8,F
1A2C:  RLCF   xB9,F
1A2E:  BCF    FD8.0
1A30:  RLCF   03,F
1A32:  RLCF   02,F
1A34:  RLCF   01,F
1A36:  RLCF   xBB,F
1A38:  BRA    19AE
1A3A:  BTFSS  xBB.0
1A3C:  BRA    1A4A
1A3E:  BCF    FD8.0
1A40:  RRCF   01,F
1A42:  RRCF   02,F
1A44:  RRCF   03,F
1A46:  RRCF   xBB,F
1A48:  BRA    1A4E
1A4A:  DECF   00,F
1A4C:  BZ    1AB8
1A4E:  BTFSC  xBB.7
1A50:  BRA    1A8E
1A52:  BCF    FD8.0
1A54:  RLCF   xB6,F
1A56:  RLCF   xB7,F
1A58:  RLCF   xB8,F
1A5A:  RLCF   xB9,F
1A5C:  MOVF   xB5,W
1A5E:  SUBWF  xB6,F
1A60:  BC    1A70
1A62:  MOVLW  01
1A64:  SUBWF  xB7,F
1A66:  BC    1A70
1A68:  SUBWF  xB8,F
1A6A:  BC    1A70
1A6C:  SUBWF  xB9,F
1A6E:  BNC   1AA4
1A70:  MOVF   xB4,W
1A72:  SUBWF  xB7,F
1A74:  BC    1A80
1A76:  MOVLW  01
1A78:  SUBWF  xB8,F
1A7A:  BC    1A80
1A7C:  SUBWF  xB9,F
1A7E:  BNC   1AA4
1A80:  MOVF   xB3,W
1A82:  IORLW  80
1A84:  SUBWF  xB8,F
1A86:  BC    1A8E
1A88:  MOVLW  01
1A8A:  SUBWF  xB9,F
1A8C:  BNC   1AA4
1A8E:  INCF   03,F
1A90:  BNZ   1AA4
1A92:  INCF   02,F
1A94:  BNZ   1AA4
1A96:  INCF   01,F
1A98:  BNZ   1AA4
1A9A:  INCF   00,F
1A9C:  BZ    1AB8
1A9E:  RRCF   01,F
1AA0:  RRCF   02,F
1AA2:  RRCF   03,F
1AA4:  MOVFF  1AF,1BA
1AA8:  MOVF   xB3,W
1AAA:  XORWF  xBA,F
1AAC:  BTFSS  xBA.7
1AAE:  BRA    1AB4
1AB0:  BSF    01.7
1AB2:  BRA    1AC0
1AB4:  BCF    01.7
1AB6:  BRA    1AC0
1AB8:  CLRF   00
1ABA:  CLRF   01
1ABC:  CLRF   02
1ABE:  CLRF   03
1AC0:  MOVLB  0
1AC2:  RETURN 0
1AC4:  MOVFF  105,FEA
1AC8:  MOVFF  104,FE9
1ACC:  MOVLB  1
1ACE:  MOVFF  1B7,FEF
1AD2:  INCF   FE9,F
1AD4:  BTFSC  FD8.2
1AD6:  INCF   FEA,F
1AD8:  CLRF   FEF
1ADA:  INCF   x04,F
1ADC:  BTFSC  FD8.2
1ADE:  INCF   x05,F
1AE0:  MOVLB  0
1AE2:  RETURN 0
1AE4:  TBLRD*+
1AE6:  MOVFF  FF6,1AB
1AEA:  MOVFF  FF7,1AC
1AEE:  MOVFF  FF5,1B7
1AF2:  RCALL  1AC4
1AF4:  MOVFF  1AB,FF6
1AF8:  MOVFF  1AC,FF7
1AFC:  MOVLB  1
1AFE:  DECFSZ xAA,F
1B00:  BRA    1B04
1B02:  BRA    1B08
1B04:  MOVLB  0
1B06:  BRA    1AE4
1B08:  MOVLB  0
1B0A:  RETURN 0
1B0C:  MOVFF  FEA,1B2
1B10:  MOVFF  FE9,1B1
1B14:  MOVLB  1
1B16:  SWAPF  xAB,W
1B18:  IORLW  F0
1B1A:  MOVWF  xAD
1B1C:  ADDWF  xAD,F
1B1E:  ADDLW  E2
1B20:  MOVWF  xAE
1B22:  ADDLW  32
1B24:  MOVWF  xB0
1B26:  MOVF   xAB,W
1B28:  ANDLW  0F
1B2A:  ADDWF  xAE,F
1B2C:  ADDWF  xAE,F
1B2E:  ADDWF  xB0,F
1B30:  ADDLW  E9
1B32:  MOVWF  xAF
1B34:  ADDWF  xAF,F
1B36:  ADDWF  xAF,F
1B38:  SWAPF  xAA,W
1B3A:  ANDLW  0F
1B3C:  ADDWF  xAF,F
1B3E:  ADDWF  xB0,F
1B40:  RLCF   xAF,F
1B42:  RLCF   xB0,F
1B44:  COMF   xB0,F
1B46:  RLCF   xB0,F
1B48:  MOVF   xAA,W
1B4A:  ANDLW  0F
1B4C:  ADDWF  xB0,F
1B4E:  RLCF   xAD,F
1B50:  MOVLW  07
1B52:  MOVWF  xAC
1B54:  MOVLW  0A
1B56:  DECF   xAF,F
1B58:  ADDWF  xB0,F
1B5A:  BNC   1B56
1B5C:  DECF   xAE,F
1B5E:  ADDWF  xAF,F
1B60:  BNC   1B5C
1B62:  DECF   xAD,F
1B64:  ADDWF  xAE,F
1B66:  BNC   1B62
1B68:  DECF   xAC,F
1B6A:  ADDWF  xAD,F
1B6C:  BNC   1B68
1B6E:  MOVLW  01
1B70:  MOVWF  FEA
1B72:  MOVLW  AC
1B74:  MOVWF  FE9
1B76:  MOVLW  07
1B78:  ANDWF  xB1,W
1B7A:  BCF    xB1.6
1B7C:  ADDWF  FE9,F
1B7E:  MOVLW  B0
1B80:  SUBWF  FE9,W
1B82:  BTFSC  FD8.2
1B84:  BSF    xB1.6
1B86:  MOVF   FEF,W
1B88:  MOVWF  00
1B8A:  BNZ   1B9C
1B8C:  BTFSC  xB1.6
1B8E:  BRA    1B9C
1B90:  BTFSC  xB1.4
1B92:  BRA    1BBE
1B94:  BTFSC  xB1.3
1B96:  BRA    1B9C
1B98:  MOVLW  20
1B9A:  BRA    1BA2
1B9C:  BSF    xB1.3
1B9E:  BCF    xB1.4
1BA0:  MOVLW  30
1BA2:  ADDWF  00,F
1BA4:  MOVFF  FEA,1AB
1BA8:  MOVFF  FE9,1AA
1BAC:  MOVFF  00,1B7
1BB0:  MOVLB  0
1BB2:  RCALL  1AC4
1BB4:  MOVFF  1AB,FEA
1BB8:  MOVFF  1AA,FE9
1BBC:  MOVLB  1
1BBE:  MOVF   FEE,W
1BC0:  BTFSS  xB1.6
1BC2:  BRA    1B7E
1BC4:  MOVLB  0
1BC6:  RETURN 0
1BC8:  MOVLB  1
1BCA:  MOVF   xB7,W
1BCC:  SUBLW  B6
1BCE:  MOVWF  xB7
1BD0:  CLRF   03
1BD2:  MOVFF  1B8,1BB
1BD6:  BSF    xB8.7
1BD8:  BCF    FD8.0
1BDA:  RRCF   xB8,F
1BDC:  RRCF   xB9,F
1BDE:  RRCF   xBA,F
1BE0:  RRCF   03,F
1BE2:  RRCF   02,F
1BE4:  RRCF   01,F
1BE6:  RRCF   00,F
1BE8:  DECFSZ xB7,F
1BEA:  BRA    1BD8
1BEC:  BTFSS  xBB.7
1BEE:  BRA    1C06
1BF0:  COMF   00,F
1BF2:  COMF   01,F
1BF4:  COMF   02,F
1BF6:  COMF   03,F
1BF8:  INCF   00,F
1BFA:  BTFSC  FD8.2
1BFC:  INCF   01,F
1BFE:  BTFSC  FD8.2
1C00:  INCF   02,F
1C02:  BTFSC  FD8.2
1C04:  INCF   03,F
1C06:  MOVLB  0
1C08:  GOTO   1C62 (RETURN)
1C0C:  MOVF   FE9,W
1C0E:  MOVLB  1
1C10:  MOVWF  xAF
1C12:  MOVF   xAE,W
1C14:  MOVWF  xB1
1C16:  BZ    1C4E
1C18:  MOVFF  1AD,1BA
1C1C:  MOVFF  1AC,1B9
1C20:  MOVFF  1AB,1B8
1C24:  MOVFF  1AA,1B7
1C28:  CLRF   xBE
1C2A:  CLRF   xBD
1C2C:  MOVLW  20
1C2E:  MOVWF  xBC
1C30:  MOVLW  82
1C32:  MOVWF  xBB
1C34:  MOVLB  0
1C36:  RCALL  15BC
1C38:  MOVFF  03,1AD
1C3C:  MOVFF  02,1AC
1C40:  MOVFF  01,1AB
1C44:  MOVFF  00,1AA
1C48:  MOVLB  1
1C4A:  DECFSZ xB1,F
1C4C:  BRA    1C18
1C4E:  MOVFF  1AD,1BA
1C52:  MOVFF  1AC,1B9
1C56:  MOVFF  1AB,1B8
1C5A:  MOVFF  1AA,1B7
1C5E:  MOVLB  0
1C60:  BRA    1BC8
1C62:  MOVFF  03,1AD
1C66:  MOVFF  02,1AC
1C6A:  MOVFF  01,1AB
1C6E:  MOVFF  00,1AA
1C72:  MOVLB  1
1C74:  BTFSS  xAD.7
1C76:  BRA    1C92
1C78:  DECF   xAF,F
1C7A:  BSF    xAF.5
1C7C:  COMF   xAA,F
1C7E:  COMF   xAB,F
1C80:  COMF   xAC,F
1C82:  COMF   xAD,F
1C84:  INCF   xAA,F
1C86:  BTFSC  FD8.2
1C88:  INCF   xAB,F
1C8A:  BTFSC  FD8.2
1C8C:  INCF   xAC,F
1C8E:  BTFSC  FD8.2
1C90:  INCF   xAD,F
1C92:  MOVLW  3B
1C94:  MOVWF  xB6
1C96:  MOVLW  9A
1C98:  MOVWF  xB5
1C9A:  MOVLW  CA
1C9C:  MOVWF  xB4
1C9E:  CLRF   xB3
1CA0:  MOVLW  0A
1CA2:  MOVWF  xB1
1CA4:  MOVF   xAE,W
1CA6:  BTFSC  FD8.2
1CA8:  INCF   xAF,F
1CAA:  BSF    FD8.1
1CAC:  MOVLW  01
1CAE:  MOVWF  FEA
1CB0:  MOVLW  AA
1CB2:  MOVWF  FE9
1CB4:  MOVFF  1AD,1BA
1CB8:  MOVFF  1AC,1B9
1CBC:  MOVFF  1AB,1B8
1CC0:  MOVFF  1AA,1B7
1CC4:  MOVFF  1B6,1BE
1CC8:  MOVFF  1B5,1BD
1CCC:  MOVFF  1B4,1BC
1CD0:  MOVFF  1B3,1BB
1CD4:  MOVLB  0
1CD6:  CALL   096E
1CDA:  MOVF   01,W
1CDC:  MOVF   00,F
1CDE:  BNZ   1D06
1CE0:  MOVLB  1
1CE2:  INCF   xAE,W
1CE4:  SUBWF  xB1,W
1CE6:  BTFSS  FD8.2
1CE8:  BRA    1CEE
1CEA:  MOVLB  0
1CEC:  BRA    1D06
1CEE:  MOVF   xAF,W
1CF0:  BZ    1D0C
1CF2:  ANDLW  0F
1CF4:  SUBWF  xB1,W
1CF6:  BZ    1CFA
1CF8:  BC    1D7A
1CFA:  BTFSC  xAF.7
1CFC:  BRA    1D7A
1CFE:  BTFSC  xAF.6
1D00:  BRA    1D0C
1D02:  MOVLW  20
1D04:  BRA    1D6E
1D06:  MOVLW  20
1D08:  MOVLB  1
1D0A:  ANDWF  xAF,F
1D0C:  BTFSS  xAF.5
1D0E:  BRA    1D2C
1D10:  BCF    xAF.5
1D12:  MOVF   xAE,W
1D14:  BTFSS  FD8.2
1D16:  DECF   xAF,F
1D18:  MOVF   00,W
1D1A:  MOVWF  xAF
1D1C:  MOVLW  2D
1D1E:  MOVWF  xB7
1D20:  MOVLB  0
1D22:  RCALL  1AC4
1D24:  MOVLB  1
1D26:  MOVF   xAF,W
1D28:  MOVWF  00
1D2A:  CLRF   xAF
1D2C:  MOVF   xAE,W
1D2E:  SUBWF  xB1,W
1D30:  BNZ   1D4A
1D32:  MOVF   00,W
1D34:  MOVWF  xAF
1D36:  MOVLW  2E
1D38:  MOVWF  xB7
1D3A:  MOVLB  0
1D3C:  RCALL  1AC4
1D3E:  MOVLB  1
1D40:  MOVF   xAF,W
1D42:  MOVWF  00
1D44:  MOVLW  20
1D46:  ANDWF  xAF,F
1D48:  MOVLW  00
1D4A:  MOVLW  30
1D4C:  BTFSS  xAF.5
1D4E:  BRA    1D6E
1D50:  BCF    xAF.5
1D52:  MOVF   xAE,W
1D54:  BTFSS  FD8.2
1D56:  DECF   xAF,F
1D58:  MOVF   00,W
1D5A:  MOVWF  xAF
1D5C:  MOVLW  2D
1D5E:  MOVWF  xB7
1D60:  MOVLB  0
1D62:  RCALL  1AC4
1D64:  MOVLB  1
1D66:  MOVF   xAF,W
1D68:  MOVWF  00
1D6A:  CLRF   xAF
1D6C:  MOVLW  30
1D6E:  ADDWF  00,F
1D70:  MOVFF  00,1B7
1D74:  MOVLB  0
1D76:  RCALL  1AC4
1D78:  MOVLB  1
1D7A:  BCF    FD8.1
1D7C:  MOVFF  1B6,1BA
1D80:  MOVFF  1B5,1B9
1D84:  MOVFF  1B4,1B8
1D88:  MOVFF  1B3,1B7
1D8C:  CLRF   xBE
1D8E:  CLRF   xBD
1D90:  CLRF   xBC
1D92:  MOVLW  0A
1D94:  MOVWF  xBB
1D96:  MOVLB  0
1D98:  CALL   096E
1D9C:  MOVFF  03,1B6
1DA0:  MOVFF  02,1B5
1DA4:  MOVFF  01,1B4
1DA8:  MOVFF  00,1B3
1DAC:  MOVLB  1
1DAE:  DECFSZ xB1,F
1DB0:  BRA    1CAA
1DB2:  MOVLB  0
1DB4:  RETURN 0
1DB6:  MOVLB  1
1DB8:  MOVF   xAD,W
1DBA:  CLRF   01
1DBC:  SUBWF  xAC,W
1DBE:  BC    1DC6
1DC0:  MOVFF  1AC,00
1DC4:  BRA    1DDE
1DC6:  CLRF   00
1DC8:  MOVLW  08
1DCA:  MOVWF  xAE
1DCC:  RLCF   xAC,F
1DCE:  RLCF   00,F
1DD0:  MOVF   xAD,W
1DD2:  SUBWF  00,W
1DD4:  BTFSC  FD8.0
1DD6:  MOVWF  00
1DD8:  RLCF   01,F
1DDA:  DECFSZ xAE,F
1DDC:  BRA    1DCC
1DDE:  MOVLB  0
1DE0:  RETURN 0
1DE2:  MOVF   01,W
1DE4:  MOVFF  1AA,1AC
1DE8:  MOVLW  64
1DEA:  MOVLB  1
1DEC:  MOVWF  xAD
1DEE:  MOVLB  0
1DF0:  RCALL  1DB6
1DF2:  MOVFF  00,1AA
1DF6:  MOVF   01,W
1DF8:  MOVLW  30
1DFA:  BNZ   1E0C
1DFC:  MOVLB  1
1DFE:  BTFSS  xAB.1
1E00:  BRA    1E20
1E02:  BTFSC  xAB.3
1E04:  BRA    1E20
1E06:  BTFSC  xAB.4
1E08:  MOVLW  20
1E0A:  BRA    1E14
1E0C:  MOVLB  1
1E0E:  BCF    xAB.3
1E10:  BCF    xAB.4
1E12:  BSF    xAB.0
1E14:  ADDWF  01,F
1E16:  MOVFF  01,1B7
1E1A:  MOVLB  0
1E1C:  RCALL  1AC4
1E1E:  MOVLB  1
1E20:  MOVFF  1AA,1AC
1E24:  MOVLW  0A
1E26:  MOVWF  xAD
1E28:  MOVLB  0
1E2A:  RCALL  1DB6
1E2C:  MOVFF  00,1AA
1E30:  MOVF   01,W
1E32:  MOVLW  30
1E34:  BNZ   1E46
1E36:  MOVLB  1
1E38:  BTFSC  xAB.3
1E3A:  BRA    1E50
1E3C:  BTFSS  xAB.0
1E3E:  BRA    1E50
1E40:  BTFSC  xAB.4
1E42:  MOVLW  20
1E44:  MOVLB  0
1E46:  ADDWF  01,F
1E48:  MOVFF  01,1B7
1E4C:  RCALL  1AC4
1E4E:  MOVLB  1
1E50:  MOVLW  30
1E52:  ADDWF  xAA,F
1E54:  MOVFF  1AA,1B7
1E58:  MOVLB  0
1E5A:  RCALL  1AC4
1E5C:  GOTO   24C4 (RETURN)
1E60:  TBLRD*+
1E62:  MOVF   FF5,F
1E64:  BZ    1E7E
1E66:  MOVFF  FF6,1AA
1E6A:  MOVFF  FF7,1AB
1E6E:  MOVFF  FF5,1B7
1E72:  RCALL  1AC4
1E74:  MOVFF  1AA,FF6
1E78:  MOVFF  1AB,FF7
1E7C:  BRA    1E60
1E7E:  RETURN 0
1E80:  MOVFF  FEA,1B2
1E84:  MOVFF  FE9,1B1
1E88:  MOVLB  1
1E8A:  BTFSS  xAB.7
1E8C:  BRA    1E9E
1E8E:  BSF    xB1.7
1E90:  BTFSS  xB1.4
1E92:  INCF   xB1,F
1E94:  COMF   xAA,F
1E96:  COMF   xAB,F
1E98:  INCF   xAA,F
1E9A:  BTFSC  FD8.2
1E9C:  INCF   xAB,F
1E9E:  SWAPF  xAB,W
1EA0:  IORLW  F0
1EA2:  MOVWF  xAD
1EA4:  ADDWF  xAD,F
1EA6:  ADDLW  E2
1EA8:  MOVWF  xAE
1EAA:  ADDLW  32
1EAC:  MOVWF  xB0
1EAE:  MOVF   xAB,W
1EB0:  ANDLW  0F
1EB2:  ADDWF  xAE,F
1EB4:  ADDWF  xAE,F
1EB6:  ADDWF  xB0,F
1EB8:  ADDLW  E9
1EBA:  MOVWF  xAF
1EBC:  ADDWF  xAF,F
1EBE:  ADDWF  xAF,F
1EC0:  SWAPF  xAA,W
1EC2:  ANDLW  0F
1EC4:  ADDWF  xAF,F
1EC6:  ADDWF  xB0,F
1EC8:  RLCF   xAF,F
1ECA:  RLCF   xB0,F
1ECC:  COMF   xB0,F
1ECE:  RLCF   xB0,F
1ED0:  MOVF   xAA,W
1ED2:  ANDLW  0F
1ED4:  ADDWF  xB0,F
1ED6:  RLCF   xAD,F
1ED8:  MOVLW  07
1EDA:  MOVWF  xAC
1EDC:  MOVLW  0A
1EDE:  DECF   xAF,F
1EE0:  ADDWF  xB0,F
1EE2:  BNC   1EDE
1EE4:  DECF   xAE,F
1EE6:  ADDWF  xAF,F
1EE8:  BNC   1EE4
1EEA:  DECF   xAD,F
1EEC:  ADDWF  xAE,F
1EEE:  BNC   1EEA
1EF0:  DECF   xAC,F
1EF2:  ADDWF  xAD,F
1EF4:  BNC   1EF0
1EF6:  MOVLW  01
1EF8:  MOVWF  FEA
1EFA:  MOVLW  AC
1EFC:  MOVWF  FE9
1EFE:  MOVLW  07
1F00:  ANDWF  xB1,W
1F02:  BCF    xB1.6
1F04:  DECF   FE9,F
1F06:  ANDWF  xB1,W
1F08:  BNZ   1F18
1F0A:  BTFSC  xB1.4
1F0C:  INCF   FE9,F
1F0E:  BTFSC  xB1.4
1F10:  BRA    1F18
1F12:  MOVLW  20
1F14:  MOVWF  00
1F16:  BRA    1F50
1F18:  ADDWF  FE9,F
1F1A:  MOVLW  B0
1F1C:  SUBWF  FE9,W
1F1E:  BTFSC  FD8.2
1F20:  BSF    xB1.6
1F22:  MOVF   FEF,W
1F24:  MOVWF  00
1F26:  BNZ   1F38
1F28:  BTFSC  xB1.6
1F2A:  BRA    1F38
1F2C:  BTFSC  xB1.4
1F2E:  BRA    1F6A
1F30:  BTFSC  xB1.3
1F32:  BRA    1F38
1F34:  MOVLW  20
1F36:  BRA    1F4E
1F38:  BTFSS  xB1.7
1F3A:  BRA    1F48
1F3C:  MOVLW  2D
1F3E:  MOVWF  00
1F40:  MOVF   FED,W
1F42:  BCF    xB1.6
1F44:  BCF    xB1.7
1F46:  BRA    1F50
1F48:  BSF    xB1.3
1F4A:  BCF    xB1.4
1F4C:  MOVLW  30
1F4E:  ADDWF  00,F
1F50:  MOVFF  FEA,1AB
1F54:  MOVFF  FE9,1AA
1F58:  MOVFF  00,1B7
1F5C:  MOVLB  0
1F5E:  RCALL  1AC4
1F60:  MOVFF  1AB,FEA
1F64:  MOVFF  1AA,FE9
1F68:  MOVLB  1
1F6A:  MOVF   FEE,W
1F6C:  BTFSS  xB1.6
1F6E:  BRA    1F1A
1F70:  MOVLB  0
1F72:  RETURN 0
*
2986:  TBLRD*+
2988:  MOVF   FF5,F
298A:  BZ    29A6
298C:  MOVFF  FF6,151
2990:  MOVFF  FF7,152
2994:  MOVF   FF5,W
2996:  BTFSS  FA4.4
2998:  BRA    2996
299A:  MOVWF  F73
299C:  MOVFF  151,FF6
29A0:  MOVFF  152,FF7
29A4:  BRA    2986
29A6:  GOTO   3304 (RETURN)
*
34AE:  MOVFF  FF2,0D
34B2:  BCF    FF2.7
34B4:  ADDWF  FE8,W
34B6:  CLRF   FF7
34B8:  RLCF   FF7,F
34BA:  ADDLW  D3
34BC:  MOVWF  FF6
34BE:  MOVLW  34
34C0:  ADDWFC FF7,F
34C2:  TBLRD*-
34C4:  MOVF   FF5,W
34C6:  MOVWF  FFA
34C8:  TBLRD*
34CA:  MOVF   FF5,W
34CC:  BTFSC  0D.7
34CE:  BSF    FF2.7
34D0:  MOVWF  FF9
34D2:  DATA 20,33
34D4:  DATA 26,33
34D6:  DATA 94,33
34D8:  DATA AA,34
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000, restart_wdt) 
*
081E:  MOVLW  01
0820:  MOVWF  FEA
0822:  MOVLW  1E
0824:  MOVWF  FE9
0826:  MOVF   FEF,W
0828:  BZ    084C
082A:  MOVLW  05
082C:  MOVWF  01
082E:  MOVLW  BF
0830:  MOVWF  00
0832:  CLRWDT
0834:  DECFSZ 00,F
0836:  BRA    0832
0838:  DECFSZ 01,F
083A:  BRA    082E
083C:  MOVLW  2E
083E:  MOVWF  00
0840:  DECFSZ 00,F
0842:  BRA    0840
0844:  NOP   
0846:  CLRWDT
0848:  DECFSZ FEF,F
084A:  BRA    082A
084C:  RETURN 0
*
0CC2:  MOVLW  04
0CC4:  MOVLB  1
0CC6:  SUBWF  xB0,F
0CC8:  BNC   0CDE
0CCA:  MOVLW  01
0CCC:  MOVWF  FEA
0CCE:  MOVLW  B0
0CD0:  MOVWF  FE9
0CD2:  MOVF   FEF,W
0CD4:  BZ    0CDE
0CD6:  BRA    0CDA
0CD8:  CLRWDT
0CDA:  DECFSZ FEF,F
0CDC:  BRA    0CD8
0CDE:  MOVLB  0
0CE0:  RETURN 0
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use rs232(baud=38400,parity=N,xmit=PIN_D6,rcv=PIN_D7,bits=8,stream=UART_CPLD)   //Uart to CPLD 
....................  
.................... #define UINT  unsigned int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
.................... #define VERSION "BA1533RX V1.0" 
.................... #define VERSION_V "V1.0" 
....................  
.................... //--------- frequency constants ----------------------------------------------- 
.................... #define FREQ_P_MULT            32L 
.................... #define FREQ_BASE         2095000L       // in KHz 
.................... #define FREQ_STEP              100L       // in KHz 
.................... #define FREQ_OSC            10000L       // in KHz 
.................... #define FREQ_MUL              100L 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP)) 
....................  
.................... #define FRQ_LO_BOT 5150 
.................... #define FRQ_LO_TOP 5250 
.................... #define FRQ_HI_BOT 5650 
.................... #define FRQ_HI_TOP 5850 
....................  
.................... //========== power ============================================================ 
.................... UINT  power_control;	 //power_level = 0,  
....................  
.................... #define A2D_POWER   8    //28v 
.................... #define A2D_PREV    5    //rssi 
.................... #define A2D_TEMP    6 
.................... #define A2D_PWR_IN  7 
.................... #define A2D_Vdd     0 
....................  
.................... #define PWR_IN_TRESHOLD 100 
.................... #define PASS_FAIL_TRESHOLD 96 
....................  
.................... #define DAC_POS_VOLT 2 
.................... #define DAC_NEG_VOLT 6 
.................... #define DAC_MON_CTRL 14 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6 
....................  
....................  
.................... //========== timer ============================================================ 
.................... UCHAR  TMR_1mS_Flags; 
.................... UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... //UCHAR  TMR_1sec_cnt; 
.................... UINT count_1sec = 0; 
....................  
.................... #bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... #bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... #bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... #bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... #bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
.................... #bit TMR_1Sec_BIT_EN    =  TMR_1sec_Flags.3 
....................  
.................... #define sense_28v  PIN_B2 
.................... #define MET_EN     PIN_B3 
.................... #define LED1      PIN_B4 
.................... #define LED2      PIN_B5 
....................  
.................... #define RREV     PIN_A5 // sAN4 
.................... #define FFWR     PIN_E0 // sAN5 rssi 
.................... #define TMP      PIN_E1 // sAN6 temperature 
.................... #define PWR_IN   PIN_E2 // sAN7 
....................  
.................... #define PLL_LD   PIN_C0 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
....................  
.................... #define VC1		 PIN_D0 
.................... #define VC2		 PIN_D1 
....................   
.................... #define LNA_EN   PIN_D2			 
....................  
.................... #define BIT_MODE_EN  PIN_D3 
....................  
.................... #define VGMON_THRESHOLD 650 // 2.1V 
....................  
.................... #define METER_OUTPUT1  1   // 1 
.................... #define METER_OUTPUT2  5   // 11 
.................... #define METER_OUTPUT3  48   // 111  
.................... #define METER_OUTPUT4  481  // 1111 
....................  
.................... UINT power_avg[4], pavgx = 0; 
.................... int16 pass_count = 0; 
.................... UINT fpga_first_val; 
.................... //========== COM1 variables =================================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================================ 
....................  
.................... //----------- setup ----------------------------------------------------------- 
.................... struct { 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        //UINT  negative_voltage[2];  //NOT USED 
....................        //UINT  power_in[2];			//NOT USED 
.................... 	   UINT  monitor_ctrl[2];		//dac port D, monitor control 
....................        UINT  reverse; 
....................        UCHAR meter_backlight; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  rssi_table[11][2]; 
.................... 	   UINT  auto_mode_tresh[2]; 
....................  
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
....................  
.................... //========== function prototypes ============================================== 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
....................  
.................... //========== include source files ============================================= 
.................... #include "AD5314.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5314 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5314(int8 channel, int16 level) 
.................... { 
.................... 	output_low(DA2_SYN); 
*
0DA2:  BCF    F89.2
.................... 	 
.................... //	if (channel) 
.................... //    output_high(DA2_DAT);    // send to VOUTB 
.................... //	else 
.................... //    output_low(DA2_DAT);    // send to VOUTA 
.................... //channel is 4 bit wide  
.................... //bit 3 - address A1 
.................... //bit 2 - address A0 
.................... //bit 1 - if 1 normal operation, if 0 power down (PD) 
.................... //bit 0 - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
.................... 	 
.................... 	#ifdef SW_SPI 
.................... 		if(channel & 0x08)			//send bit 15 - A1 
0DA4:  MOVLB  1
0DA6:  BTFSS  x1A.3
0DA8:  BRA    0DAE
.................... 		output_high(DA2_DAT); 
0DAA:  BSF    F89.4
0DAC:  BRA    0DB0
.................... 		else  
.................... 		output_low(DA2_DAT); 
0DAE:  BCF    F89.4
.................... 		output_high(DA2_CLK);   
0DB0:  BSF    F89.3
.................... 		delay_cycles(15); 
0DB2:  MOVLW  04
0DB4:  MOVWF  00
0DB6:  DECFSZ 00,F
0DB8:  BRA    0DB6
0DBA:  BRA    0DBC
.................... 		output_low(DA2_CLK); 
0DBC:  BCF    F89.3
.................... 		delay_cycles(15); 
0DBE:  MOVLW  04
0DC0:  MOVWF  00
0DC2:  DECFSZ 00,F
0DC4:  BRA    0DC2
0DC6:  BRA    0DC8
.................... 		 
.................... 		if(channel & 0x04)			//send bit 14 - A0 
0DC8:  BTFSS  x1A.2
0DCA:  BRA    0DD0
.................... 		output_high(DA2_DAT); 
0DCC:  BSF    F89.4
0DCE:  BRA    0DD2
.................... 		else  
.................... 		output_low(DA2_DAT); 
0DD0:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
0DD2:  BSF    F89.3
.................... 		delay_cycles(15); 
0DD4:  MOVLW  04
0DD6:  MOVWF  00
0DD8:  DECFSZ 00,F
0DDA:  BRA    0DD8
0DDC:  BRA    0DDE
.................... 		output_low(DA2_CLK); 
0DDE:  BCF    F89.3
.................... 		delay_cycles(15); 
0DE0:  MOVLW  04
0DE2:  MOVWF  00
0DE4:  DECFSZ 00,F
0DE6:  BRA    0DE4
0DE8:  BRA    0DEA
.................... 		 
.................... 		if(channel & 0x02)			//send bit 13 - PD - if 1 normal operation, if 0 power down (PD) 
0DEA:  BTFSS  x1A.1
0DEC:  BRA    0DF2
.................... 		output_high(DA2_DAT); 
0DEE:  BSF    F89.4
0DF0:  BRA    0DF4
.................... 		else  
.................... 		output_low(DA2_DAT); 
0DF2:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
0DF4:  BSF    F89.3
.................... 		delay_cycles(15); 
0DF6:  MOVLW  04
0DF8:  MOVWF  00
0DFA:  DECFSZ 00,F
0DFC:  BRA    0DFA
0DFE:  BRA    0E00
.................... 		output_low(DA2_CLK); 
0E00:  BCF    F89.3
.................... 		delay_cycles(15); 
0E02:  MOVLW  04
0E04:  MOVWF  00
0E06:  DECFSZ 00,F
0E08:  BRA    0E06
0E0A:  BRA    0E0C
.................... 		 
.................... 		if(channel & 0x01)			//send bit 12 - LDAC - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
0E0C:  BTFSS  x1A.0
0E0E:  BRA    0E14
.................... 		output_high(DA2_DAT); 
0E10:  BSF    F89.4
0E12:  BRA    0E16
.................... 		else  
.................... 		output_low(DA2_DAT); 
0E14:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
0E16:  BSF    F89.3
.................... 		delay_cycles(15); 
0E18:  MOVLW  04
0E1A:  MOVWF  00
0E1C:  DECFSZ 00,F
0E1E:  BRA    0E1C
0E20:  BRA    0E22
.................... 		output_low(DA2_CLK); 
0E22:  BCF    F89.3
.................... 		delay_cycles(15); 
0E24:  MOVLW  04
0E26:  MOVWF  00
0E28:  DECFSZ 00,F
0E2A:  BRA    0E28
0E2C:  BRA    0E2E
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);    	//send bit 11 DATA 
0E2E:  BSF    F89.3
.................... 		if (level & 0x0200) 
0E30:  ANDLW  00
0E32:  MOVWF  00
0E34:  MOVF   x1C,W
0E36:  ANDLW  02
0E38:  MOVWF  03
0E3A:  MOVF   00,W
0E3C:  IORWF  03,W
0E3E:  BZ    0E44
.................... 		output_high(DA2_DAT); 
0E40:  BSF    F89.4
0E42:  BRA    0E46
.................... 		else 
.................... 		output_low(DA2_DAT); 
0E44:  BCF    F89.4
.................... 		delay_cycles(15); 
0E46:  MOVLW  04
0E48:  MOVWF  00
0E4A:  DECFSZ 00,F
0E4C:  BRA    0E4A
0E4E:  BRA    0E50
.................... 		output_low(DA2_CLK); 
0E50:  BCF    F89.3
.................... 		delay_cycles(15); 
0E52:  MOVLW  04
0E54:  MOVWF  00
0E56:  DECFSZ 00,F
0E58:  BRA    0E56
0E5A:  BRA    0E5C
.................... 		 
.................... 		output_high(DA2_CLK);  		//send bit 10 DATA 
0E5C:  BSF    F89.3
.................... 		if (level & 0x0100) 
0E5E:  ANDLW  00
0E60:  MOVWF  00
0E62:  MOVF   x1C,W
0E64:  ANDLW  01
0E66:  MOVWF  03
0E68:  MOVF   00,W
0E6A:  IORWF  03,W
0E6C:  BZ    0E72
.................... 		output_high(DA2_DAT); 
0E6E:  BSF    F89.4
0E70:  BRA    0E74
.................... 		else 
.................... 		output_low(DA2_DAT); 
0E72:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
0E74:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 9 DATA 
0E76:  BSF    F89.3
.................... 		if (level & 0x0080) 
0E78:  MOVF   x1B,W
0E7A:  ANDLW  80
0E7C:  MOVWF  00
0E7E:  CLRF   03
0E80:  MOVF   00,W
0E82:  IORWF  03,W
0E84:  BZ    0E8A
.................... 		output_high(DA2_DAT); 
0E86:  BSF    F89.4
0E88:  BRA    0E8C
.................... 		else 
.................... 		output_low(DA2_DAT); 
0E8A:  BCF    F89.4
.................... 		delay_cycles(15); 
0E8C:  MOVLW  04
0E8E:  MOVWF  00
0E90:  DECFSZ 00,F
0E92:  BRA    0E90
0E94:  BRA    0E96
.................... 		output_low(DA2_CLK); 
0E96:  BCF    F89.3
.................... 		delay_cycles(15); 
0E98:  MOVLW  04
0E9A:  MOVWF  00
0E9C:  DECFSZ 00,F
0E9E:  BRA    0E9C
0EA0:  BRA    0EA2
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 8 DATA 
0EA2:  BSF    F89.3
.................... 		if (level & 0x0040) 
0EA4:  MOVF   x1B,W
0EA6:  ANDLW  40
0EA8:  MOVWF  00
0EAA:  CLRF   03
0EAC:  MOVF   00,W
0EAE:  IORWF  03,W
0EB0:  BZ    0EB6
.................... 		output_high(DA2_DAT); 
0EB2:  BSF    F89.4
0EB4:  BRA    0EB8
.................... 		else 
.................... 		output_low(DA2_DAT); 
0EB6:  BCF    F89.4
.................... 		delay_cycles(15); 
0EB8:  MOVLW  04
0EBA:  MOVWF  00
0EBC:  DECFSZ 00,F
0EBE:  BRA    0EBC
0EC0:  BRA    0EC2
.................... 		output_low(DA2_CLK); 
0EC2:  BCF    F89.3
.................... 		delay_cycles(15); 
0EC4:  MOVLW  04
0EC6:  MOVWF  00
0EC8:  DECFSZ 00,F
0ECA:  BRA    0EC8
0ECC:  BRA    0ECE
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 7 DATA 
0ECE:  BSF    F89.3
.................... 		if (level & 0x0020) 
0ED0:  MOVF   x1B,W
0ED2:  ANDLW  20
0ED4:  MOVWF  00
0ED6:  CLRF   03
0ED8:  MOVF   00,W
0EDA:  IORWF  03,W
0EDC:  BZ    0EE2
.................... 		output_high(DA2_DAT); 
0EDE:  BSF    F89.4
0EE0:  BRA    0EE4
.................... 		else 
.................... 		output_low(DA2_DAT); 
0EE2:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
0EE4:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 6 DATA 
0EE6:  BSF    F89.3
.................... 		if (level & 0x0010) 
0EE8:  MOVF   x1B,W
0EEA:  ANDLW  10
0EEC:  MOVWF  00
0EEE:  CLRF   03
0EF0:  MOVF   00,W
0EF2:  IORWF  03,W
0EF4:  BZ    0EFA
.................... 		output_high(DA2_DAT); 
0EF6:  BSF    F89.4
0EF8:  BRA    0EFC
.................... 		else 
.................... 		output_low(DA2_DAT); 
0EFA:  BCF    F89.4
.................... 		delay_cycles(15); 
0EFC:  MOVLW  04
0EFE:  MOVWF  00
0F00:  DECFSZ 00,F
0F02:  BRA    0F00
0F04:  BRA    0F06
.................... 		output_low(DA2_CLK); 
0F06:  BCF    F89.3
.................... 		delay_cycles(15); 
0F08:  MOVLW  04
0F0A:  MOVWF  00
0F0C:  DECFSZ 00,F
0F0E:  BRA    0F0C
0F10:  BRA    0F12
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 5 DATA 
0F12:  BSF    F89.3
.................... 		if (level & 0x0008) 
0F14:  MOVF   x1B,W
0F16:  ANDLW  08
0F18:  MOVWF  00
0F1A:  CLRF   03
0F1C:  MOVF   00,W
0F1E:  IORWF  03,W
0F20:  BZ    0F26
.................... 		output_high(DA2_DAT); 
0F22:  BSF    F89.4
0F24:  BRA    0F28
.................... 		else 
.................... 		output_low(DA2_DAT); 
0F26:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
0F28:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 4 DATA 
0F2A:  BSF    F89.3
.................... 		if (level & 0x0004) 
0F2C:  MOVF   x1B,W
0F2E:  ANDLW  04
0F30:  MOVWF  00
0F32:  CLRF   03
0F34:  MOVF   00,W
0F36:  IORWF  03,W
0F38:  BZ    0F3E
.................... 		output_high(DA2_DAT); 
0F3A:  BSF    F89.4
0F3C:  BRA    0F40
.................... 		else 
.................... 		output_low(DA2_DAT); 
0F3E:  BCF    F89.4
.................... 		delay_cycles(15); 
0F40:  MOVLW  04
0F42:  MOVWF  00
0F44:  DECFSZ 00,F
0F46:  BRA    0F44
0F48:  BRA    0F4A
.................... 		output_low(DA2_CLK); 
0F4A:  BCF    F89.3
.................... 		delay_cycles(15); 
0F4C:  MOVLW  04
0F4E:  MOVWF  00
0F50:  DECFSZ 00,F
0F52:  BRA    0F50
0F54:  BRA    0F56
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 3 DATA 
0F56:  BSF    F89.3
.................... 		if (level & 0x0002) 
0F58:  MOVF   x1B,W
0F5A:  ANDLW  02
0F5C:  MOVWF  00
0F5E:  CLRF   03
0F60:  MOVF   00,W
0F62:  IORWF  03,W
0F64:  BZ    0F6A
.................... 		output_high(DA2_DAT); 
0F66:  BSF    F89.4
0F68:  BRA    0F6C
.................... 		else 
.................... 		output_low(DA2_DAT); 
0F6A:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
0F6C:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 2 DATA 
0F6E:  BSF    F89.3
.................... 		if (level & 0x0001) 
0F70:  MOVF   x1B,W
0F72:  ANDLW  01
0F74:  MOVWF  00
0F76:  CLRF   03
0F78:  MOVF   00,W
0F7A:  IORWF  03,W
0F7C:  BZ    0F82
.................... 		output_high(DA2_DAT); 
0F7E:  BSF    F89.4
0F80:  BRA    0F84
.................... 		else 
.................... 		output_low(DA2_DAT); 
0F82:  BCF    F89.4
.................... 		delay_cycles(15); 
0F84:  MOVLW  04
0F86:  MOVWF  00
0F88:  DECFSZ 00,F
0F8A:  BRA    0F88
0F8C:  BRA    0F8E
.................... 		output_low(DA2_CLK); 
0F8E:  BCF    F89.3
.................... 		delay_cycles(15); 
0F90:  MOVLW  04
0F92:  MOVWF  00
0F94:  DECFSZ 00,F
0F96:  BRA    0F94
0F98:  BRA    0F9A
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 1 X dont care 
0F9A:  BSF    F89.3
.................... 		delay_cycles(15); 
0F9C:  MOVLW  04
0F9E:  MOVWF  00
0FA0:  DECFSZ 00,F
0FA2:  BRA    0FA0
0FA4:  BRA    0FA6
.................... 		output_low(DA2_CLK); 
0FA6:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 0 X dont care 
0FA8:  BSF    F89.3
.................... 		delay_cycles(15); 
0FAA:  MOVLW  04
0FAC:  MOVWF  00
0FAE:  DECFSZ 00,F
0FB0:  BRA    0FAE
0FB2:  BRA    0FB4
.................... 		delay_cycles(15); 
0FB4:  MOVLW  04
0FB6:  MOVWF  00
0FB8:  DECFSZ 00,F
0FBA:  BRA    0FB8
0FBC:  BRA    0FBE
.................... 		output_low(DA2_CLK); 
0FBE:  BCF    F89.3
.................... 		delay_cycles(15); 
0FC0:  MOVLW  04
0FC2:  MOVWF  00
0FC4:  DECFSZ 00,F
0FC6:  BRA    0FC4
0FC8:  BRA    0FCA
.................... 		#else						//this else is for #ifdef SW_SPI above   
.................... 		level = (level << 2) | 0x8000; 
.................... 		SPI2BUF = (AD5314,make8(level,1)); 
.................... 		delay_cycles(15); 
.................... 		SPI2BUF = (AD5314,make8(level,0)); 
.................... 		delay_cycles(15); 
.................... 	#endif 
.................... 	 
.................... 	output_high(DA2_SYN); 
0FCA:  BSF    F89.2
.................... 	delay_cycles(15); 
0FCC:  MOVLW  04
0FCE:  MOVWF  00
0FD0:  DECFSZ 00,F
0FD2:  BRA    0FD0
0FD4:  BRA    0FD6
.................... 	output_low(DA2_LAT); 
0FD6:  BCF    F89.1
.................... 	delay_cycles(15); 
0FD8:  MOVLW  04
0FDA:  MOVWF  00
0FDC:  DECFSZ 00,F
0FDE:  BRA    0FDC
0FE0:  BRA    0FE2
.................... 	output_high(DA2_LAT); 
0FE2:  BSF    F89.1
.................... 	delay_cycles(15); 
0FE4:  MOVLW  04
0FE6:  MOVWF  00
0FE8:  DECFSZ 00,F
0FEA:  BRA    0FE8
0FEC:  BRA    0FEE
0FEE:  MOVLB  0
0FF0:  RETURN 0
.................... } 
....................  
.................... #include "ADF4350.c" 
.................... //--------- ADF4350 handling functions ---------------------------------------- 
....................  
.................... ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... /* 
.................... #define PLL_CLK       PIN_C2 
.................... #define PLL_DAT       PIN_C3 
.................... #define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
....................   { 
....................   UCHAR count; 
....................   for (count = 8; count ; count--, data <<= 1) 
*
0776:  MOVLW  08
0778:  MOVLB  1
077A:  MOVWF  x5D
077C:  MOVF   x5D,F
077E:  BZ    07BC
....................     { 
....................     if (data & 0X80) 
0780:  BTFSS  x5C.7
0782:  BRA    0788
....................       output_high(PLL_DAT); 
0784:  BSF    F8B.3
0786:  BRA    078A
....................     else 
....................       output_low(PLL_DAT); 
0788:  BCF    F8B.3
....................     delay_us(10); 
078A:  CLRWDT
078C:  MOVLW  0C
078E:  MOVWF  00
0790:  DECFSZ 00,F
0792:  BRA    0790
0794:  BRA    0796
....................     output_high(PLL_CLK); 
0796:  BSF    F8B.2
....................     delay_us(10); 
0798:  CLRWDT
079A:  MOVLW  0C
079C:  MOVWF  00
079E:  DECFSZ 00,F
07A0:  BRA    079E
07A2:  BRA    07A4
....................     output_low(PLL_CLK); 
07A4:  BCF    F8B.2
....................  
....................     delay_us(25); 
07A6:  CLRWDT
07A8:  MOVLW  20
07AA:  MOVWF  00
07AC:  DECFSZ 00,F
07AE:  BRA    07AC
07B0:  BRA    07B2
07B2:  MOVF   x5D,W
07B4:  DECF   x5D,F
07B6:  BCF    FD8.0
07B8:  RLCF   x5C,F
07BA:  BRA    077C
....................     } 
....................   output_low(PLL_DAT); 
07BC:  BCF    F8B.3
....................   output_low(PLL_CLK); 
07BE:  BCF    F8B.2
07C0:  MOVLB  0
07C2:  RETURN 0
....................   } 
....................  
.................... void PLL_send_word(ULONG prog) 
....................   { 
....................   restart_wdt(); 
07C4:  CLRWDT
....................   disable_interrupts(GLOBAL); 
07C6:  BCF    FF2.6
07C8:  BCF    FF2.7
07CA:  BTFSC  FF2.7
07CC:  BRA    07C8
....................   PLL_send_bits(make8(prog, 3));               // send LSB 
07CE:  MOVFF  15A,15B
07D2:  MOVFF  15A,15C
07D6:  RCALL  0776
....................   PLL_send_bits(make8(prog, 2));               // send LSB 
07D8:  MOVFF  159,15B
07DC:  MOVFF  159,15C
07E0:  RCALL  0776
....................   PLL_send_bits(make8(prog, 1));               // send middle byte 
07E2:  MOVFF  158,15B
07E6:  MOVFF  158,15C
07EA:  RCALL  0776
....................   PLL_send_bits(make8(prog, 0));               // send MSB 
07EC:  MOVFF  157,15B
07F0:  MOVFF  157,15C
07F4:  RCALL  0776
....................   delay_us(40); 
07F6:  CLRWDT
07F8:  MOVLW  34
07FA:  MOVWF  00
07FC:  DECFSZ 00,F
07FE:  BRA    07FC
0800:  BRA    0802
....................   output_high(PLL_LAT);                 // latch 24 bits into register 
0802:  BSF    F8B.1
....................   delay_us(5); 
0804:  CLRWDT
0806:  MOVLW  05
0808:  MOVWF  00
080A:  DECFSZ 00,F
080C:  BRA    080A
080E:  BRA    0810
0810:  NOP   
....................   output_low(PLL_LAT);                 // latch 24 bits into register 
0812:  BCF    F8B.1
....................   output_low(PLL_DAT);                 // latch 24 bits into register 
0814:  BCF    F8B.3
....................   enable_interrupts(GLOBAL); 
0816:  MOVLW  C0
0818:  IORWF  FF2,F
....................   restart_wdt(); 
081A:  CLRWDT
081C:  RETURN 0
....................   } 
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
....................  
.................... void PLL_initialize(void) 
....................   { 
....................   ULONG prog; 
....................   UCHAR idx, count; 
....................    
....................   for (count = 0, idx = 5; count < 6; count++, idx--) 
*
084E:  MOVLB  1
0850:  CLRF   x1D
0852:  MOVLW  05
0854:  MOVWF  x1C
0856:  MOVF   x1D,W
0858:  SUBLW  05
085A:  BNC   08C8
....................     { 
....................     prog = PLL_REGISTERS[idx]; 
085C:  MOVF   x1C,W
085E:  MULLW  04
0860:  MOVF   FF3,W
0862:  CLRF   03
0864:  MOVFF  FF2,11E
0868:  BCF    FF2.7
086A:  MOVLB  0
086C:  RCALL  00D2
086E:  TBLRD*+
0870:  MOVFF  FF5,01
0874:  TBLRD*+
0876:  MOVFF  FF5,02
087A:  TBLRD*+
087C:  MOVFF  FF5,03
0880:  MOVLB  1
0882:  BTFSC  x1E.7
0884:  BSF    FF2.7
0886:  MOVFF  03,11B
088A:  MOVFF  02,11A
088E:  MOVFF  01,119
0892:  MOVWF  x18
....................     prog |= (ULONG)idx; 
0894:  CLRF   01
0896:  CLRF   02
0898:  CLRF   03
089A:  MOVF   x1C,W
089C:  IORWF  x18,F
089E:  MOVF   01,W
08A0:  IORWF  x19,F
08A2:  MOVF   02,W
08A4:  IORWF  x1A,F
08A6:  MOVF   03,W
08A8:  IORWF  x1B,F
....................     PLL_send_word(prog); 
08AA:  MOVFF  11B,15A
08AE:  MOVFF  11A,159
08B2:  MOVFF  119,158
08B6:  MOVFF  118,157
08BA:  MOVLB  0
08BC:  RCALL  07C4
08BE:  MOVLB  1
08C0:  MOVF   x1D,W
08C2:  INCF   x1D,F
08C4:  DECF   x1C,F
08C6:  BRA    0856
....................     } 
....................   delay_ms(200); 
08C8:  MOVLW  C8
08CA:  MOVWF  x1E
08CC:  MOVLB  0
08CE:  RCALL  081E
....................   PLL_send_word(prog); 
08D0:  MOVFF  11B,15A
08D4:  MOVFF  11A,159
08D8:  MOVFF  119,158
08DC:  MOVFF  118,157
08E0:  RCALL  07C4
....................   delay_ms(200); 
08E2:  MOVLW  C8
08E4:  MOVLB  1
08E6:  MOVWF  x1E
08E8:  MOVLB  0
08EA:  RCALL  081E
08EC:  GOTO   3570 (RETURN)
....................   } 
....................  
.................... //--------- frequency computation functions ----------------------------------- 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
*
0A02:  MOVLB  1
0A04:  CLRF   x62
0A06:  CLRF   x61
0A08:  CLRF   x60
0A0A:  MOVLW  01
0A0C:  MOVWF  x5F
....................   { 
....................   ULONG Fvco, D, RFdiv = 1; 
....................   restart_wdt(); 
0A0E:  CLRWDT
....................   D = Frequest-4800; 
0A10:  MOVLW  C0
0A12:  SUBWF  x55,W
0A14:  MOVWF  x5B
0A16:  MOVLW  12
0A18:  SUBWFB x56,W
0A1A:  MOVWF  x5C
0A1C:  CLRF   x5D
0A1E:  CLRF   x5E
.................... D/=2; 
0A20:  BCF    FD8.0
0A22:  RRCF   x5E,F
0A24:  RRCF   x5D,F
0A26:  RRCF   x5C,F
0A28:  RRCF   x5B,F
....................   PLL_RFdiv = 0x0085003CL; 
0A2A:  MOVLB  0
0A2C:  CLRF   xFE
0A2E:  MOVLW  85
0A30:  MOVWF  xFD
0A32:  CLRF   xFC
0A34:  MOVLW  3C
0A36:  MOVWF  xFB
....................  // if (Frequest >= 22000) 
....................  //   { 
....................  //   RFdiv = 1; 
....................  //   PLL_RFdiv = 0x0085003CL; 
....................  //   } 
....................   restart_wdt(); 
0A38:  CLRWDT
....................   D = D * RFdiv * FREQ_STEP; 
0A3A:  MOVFF  15E,16A
0A3E:  MOVFF  15D,169
0A42:  MOVFF  15C,168
0A46:  MOVFF  15B,167
0A4A:  MOVFF  162,16E
0A4E:  MOVFF  161,16D
0A52:  MOVFF  160,16C
0A56:  MOVFF  15F,16B
0A5A:  RCALL  0914
0A5C:  MOVFF  03,166
0A60:  MOVFF  02,165
0A64:  MOVFF  01,164
0A68:  MOVFF  00,163
0A6C:  MOVFF  03,16A
0A70:  MOVFF  02,169
0A74:  MOVFF  01,168
0A78:  MOVFF  00,167
0A7C:  MOVLB  1
0A7E:  CLRF   x6E
0A80:  CLRF   x6D
0A82:  CLRF   x6C
0A84:  MOVLW  64
0A86:  MOVWF  x6B
0A88:  MOVLB  0
0A8A:  RCALL  0914
0A8C:  MOVFF  03,15E
0A90:  MOVFF  02,15D
0A94:  MOVFF  01,15C
0A98:  MOVFF  00,15B
....................   restart_wdt(); 
0A9C:  CLRWDT
....................   PLL_int = D / FREQ_OSC; 
0A9E:  BCF    FD8.1
0AA0:  MOVFF  15E,1BA
0AA4:  MOVFF  15D,1B9
0AA8:  MOVFF  15C,1B8
0AAC:  MOVFF  15B,1B7
0AB0:  MOVLB  1
0AB2:  CLRF   xBE
0AB4:  CLRF   xBD
0AB6:  MOVLW  27
0AB8:  MOVWF  xBC
0ABA:  MOVLW  10
0ABC:  MOVWF  xBB
0ABE:  MOVLB  0
0AC0:  RCALL  096E
0AC2:  MOVFF  03,EE
0AC6:  MOVFF  02,ED
0ACA:  MOVFF  01,EC
0ACE:  MOVFF  00,EB
....................   restart_wdt(); 
0AD2:  CLRWDT
....................   PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
0AD4:  MOVFF  EE,16A
0AD8:  MOVFF  ED,169
0ADC:  MOVFF  EC,168
0AE0:  MOVFF  EB,167
0AE4:  MOVLB  1
0AE6:  CLRF   x6E
0AE8:  CLRF   x6D
0AEA:  MOVLW  27
0AEC:  MOVWF  x6C
0AEE:  MOVLW  10
0AF0:  MOVWF  x6B
0AF2:  MOVLB  0
0AF4:  RCALL  0914
0AF6:  MOVF   00,W
0AF8:  MOVLB  1
0AFA:  SUBWF  x5B,W
0AFC:  MOVWF  x63
0AFE:  MOVF   01,W
0B00:  SUBWFB x5C,W
0B02:  MOVWF  x64
0B04:  MOVF   02,W
0B06:  SUBWFB x5D,W
0B08:  MOVWF  x65
0B0A:  MOVF   03,W
0B0C:  SUBWFB x5E,W
0B0E:  MOVWF  x66
0B10:  CLRF   x6A
0B12:  CLRF   x69
0B14:  CLRF   x68
0B16:  MOVLW  64
0B18:  MOVWF  x67
0B1A:  MOVFF  162,16E
0B1E:  MOVFF  161,16D
0B22:  MOVFF  160,16C
0B26:  MOVFF  15F,16B
0B2A:  MOVLB  0
0B2C:  RCALL  0914
0B2E:  MOVFF  03,16A
0B32:  MOVFF  02,169
0B36:  MOVFF  01,168
0B3A:  MOVFF  00,167
0B3E:  BCF    FD8.1
0B40:  MOVFF  166,1BA
0B44:  MOVFF  165,1B9
0B48:  MOVFF  164,1B8
0B4C:  MOVFF  163,1B7
0B50:  MOVFF  03,1BE
0B54:  MOVFF  02,1BD
0B58:  MOVFF  01,1BC
0B5C:  MOVFF  00,1BB
0B60:  RCALL  096E
0B62:  MOVFF  03,F2
0B66:  MOVFF  02,F1
0B6A:  MOVFF  01,F0
0B6E:  MOVFF  00,EF
....................   PLL_mod = 0x08000000L + (FREQ_MOD << 3) + 1L; 
0B72:  MOVLW  08
0B74:  MOVWF  xF6
0B76:  CLRF   xF5
0B78:  MOVLW  03
0B7A:  MOVWF  xF4
0B7C:  MOVLW  21
0B7E:  MOVWF  xF3
....................   restart_wdt(); 
0B80:  CLRWDT
....................   Fvco++; 
0B82:  MOVLW  01
0B84:  MOVLB  1
0B86:  ADDWF  x57,F
0B88:  BTFSC  FD8.0
0B8A:  INCF   x58,F
0B8C:  BTFSC  FD8.2
0B8E:  INCF   x59,F
0B90:  BTFSC  FD8.2
0B92:  INCF   x5A,F
0B94:  MOVLB  0
0B96:  RETURN 0
....................   } 
....................  
....................  
.................... void PLL_update(void) 
....................   { 
....................   ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
0B98:  MOVLB  1
0B9A:  CLRF   x58
0B9C:  MOVLB  0
0B9E:  RLCF   xEB,W
0BA0:  MOVLB  1
0BA2:  MOVWF  x59
0BA4:  MOVLB  0
0BA6:  RLCF   xEC,W
0BA8:  MOVLB  1
0BAA:  MOVWF  x5A
0BAC:  MOVLB  0
0BAE:  RLCF   xED,W
0BB0:  MOVLB  1
0BB2:  MOVWF  x5B
0BB4:  RLCF   x59,F
0BB6:  RLCF   x5A,F
0BB8:  RLCF   x5B,F
0BBA:  RLCF   x59,F
0BBC:  RLCF   x5A,F
0BBE:  RLCF   x5B,F
0BC0:  RLCF   x59,F
0BC2:  RLCF   x5A,F
0BC4:  RLCF   x5B,F
0BC6:  RLCF   x59,F
0BC8:  RLCF   x5A,F
0BCA:  RLCF   x5B,F
0BCC:  RLCF   x59,F
0BCE:  RLCF   x5A,F
0BD0:  RLCF   x5B,F
0BD2:  RLCF   x59,F
0BD4:  RLCF   x5A,F
0BD6:  RLCF   x5B,F
0BD8:  MOVLW  80
0BDA:  ANDWF  x59,F
0BDC:  MOVLB  0
0BDE:  RLCF   xEF,W
0BE0:  MOVWF  00
0BE2:  RLCF   xF0,W
0BE4:  MOVWF  01
0BE6:  RLCF   xF1,W
0BE8:  MOVWF  02
0BEA:  RLCF   xF2,W
0BEC:  MOVWF  03
0BEE:  RLCF   00,F
0BF0:  RLCF   01,F
0BF2:  RLCF   02,F
0BF4:  RLCF   03,F
0BF6:  RLCF   00,F
0BF8:  RLCF   01,F
0BFA:  RLCF   02,F
0BFC:  RLCF   03,F
0BFE:  MOVLW  F8
0C00:  ANDWF  00,F
0C02:  MOVF   00,W
0C04:  MOVLB  1
0C06:  ADDWF  x58,W
0C08:  MOVWF  x53
0C0A:  MOVF   01,W
0C0C:  ADDWFC x59,W
0C0E:  MOVWF  x54
0C10:  MOVF   02,W
0C12:  ADDWFC x5A,W
0C14:  MOVWF  x55
0C16:  MOVF   03,W
0C18:  ADDWFC x5B,W
0C1A:  MOVWF  x56
....................   PLL_frequency = prog; 
0C1C:  MOVFF  156,FA
0C20:  MOVFF  155,F9
0C24:  MOVFF  154,F8
0C28:  MOVFF  153,F7
....................   restart_wdt(); 
0C2C:  CLRWDT
....................   PLL_send_word(prog); 
0C2E:  MOVFF  156,15A
0C32:  MOVFF  155,159
0C36:  MOVFF  154,158
0C3A:  MOVFF  153,157
0C3E:  MOVLB  0
0C40:  RCALL  07C4
....................   delay_us(20); 
0C42:  CLRWDT
0C44:  MOVLW  19
0C46:  MOVWF  00
0C48:  DECFSZ 00,F
0C4A:  BRA    0C48
0C4C:  BRA    0C4E
0C4E:  NOP   
....................   restart_wdt(); 
0C50:  CLRWDT
....................   PLL_send_word(PLL_mod); 
0C52:  MOVFF  F6,15A
0C56:  MOVFF  F5,159
0C5A:  MOVFF  F4,158
0C5E:  MOVFF  F3,157
0C62:  RCALL  07C4
....................   delay_us(20); 
0C64:  CLRWDT
0C66:  MOVLW  19
0C68:  MOVWF  00
0C6A:  DECFSZ 00,F
0C6C:  BRA    0C6A
0C6E:  BRA    0C70
0C70:  NOP   
....................   restart_wdt(); 
0C72:  CLRWDT
....................   PLL_send_word(PLL_RFdiv); 
0C74:  MOVFF  FE,15A
0C78:  MOVFF  FD,159
0C7C:  MOVFF  FC,158
0C80:  MOVFF  FB,157
0C84:  RCALL  07C4
0C86:  RETURN 0
....................  
....................   } 
....................  
.................... void PLL_mute(void) 
.................... { 
....................   ULONG prog; 
....................     
....................     prog = 0x0095001CL;			//register 4 MTLD is '1' to mute the PLL 
*
1530:  MOVLB  1
1532:  CLRF   x54
1534:  MOVLW  95
1536:  MOVWF  x53
1538:  CLRF   x52
153A:  MOVLW  1C
153C:  MOVWF  x51
....................     PLL_send_word(prog); 
153E:  MOVFF  154,15A
1542:  MOVFF  153,159
1546:  MOVFF  152,158
154A:  MOVFF  151,157
154E:  MOVLB  0
1550:  CALL   07C4
1554:  GOTO   2B7C (RETURN)
.................... } 
....................  
.................... /* 
.................... void PLL_unmute(void) 
.................... { 
.................... //  ULONG prog; 
....................     
.................... //    prog = 0x0095003CL;			//register 4 MTLD is '1' to mute the PLL 
.................... //    PLL_send_word(prog); 
.................... 	  ULONG prog; 
....................   prog = (PLL_int << 15) + (PLL_frac << 3); // N counter latch 
....................   PLL_frequency = prog; 
....................   restart_wdt(); 
....................   PLL_send_word(prog); 
....................   delay_us(20); 
....................   restart_wdt(); 
....................   PLL_send_word(PLL_mod); 
....................   delay_us(20); 
....................   restart_wdt(); 
....................   PLL_send_word(PLL_RFdiv); 
....................  
.................... } 
.................... */ 
....................  
.................... #separate 
.................... void PLL_reset(void) 
....................   { 
....................   output_low(PLL_DAT); 
....................   output_low(PLL_CLK); 
....................   delay_us(250); 
....................   PLL_initialize(); 
....................   } 
....................  
....................  
....................  
.................... #include "BA1533RX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0436:  BCF    F7E.0
0438:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
....................   { 
....................   TMR_1mS_Flags = 0xFF; 
043C:  SETF   18
....................   TMR_1mS_Count++; 
043E:  INCF   19,F
....................   if (++TMR_1mS_Cnt >= 10) 
0440:  INCF   1A,F
0442:  MOVF   1A,W
0444:  SUBLW  09
0446:  BC    0466
....................     { 
....................     TMR_1mS_Cnt = 0; 
0448:  CLRF   1A
....................     TMR_10mS_Count++; 
044A:  INCF   1B,F
....................     TMR_10mS_Flags = 0xFF; 
044C:  SETF   1C
....................     if (++TMR_10mS_Cnt >= 10) 
044E:  INCF   1D,F
0450:  MOVF   1D,W
0452:  SUBLW  09
0454:  BC    0466
....................       { 
....................       TMR_10mS_Cnt = 0; 
0456:  CLRF   1D
....................       TMR_100mS_Flags = 0xFF; 
0458:  SETF   1E
....................       if (++TMR_100mS_Cnt >= 10) 
045A:  INCF   1F,F
045C:  MOVF   1F,W
045E:  SUBLW  09
0460:  BC    0466
....................         { 
....................         TMR_100mS_Cnt = 0; 
0462:  CLRF   1F
....................         TMR_1sec_Flags = 0xFF; 
0464:  SETF   20
....................         } 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0466:  BCF    F9E.1
0468:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
....................     { 
....................  
....................     } 
....................  
.................... //-------------------------------------------------------------------------- 
046C:  BCF    FF2.1
046E:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
....................   { 
....................  
....................   } 
....................  
.................... //-------------------------------------------------------------- 
0472:  BCF    FF0.0
0474:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
....................   { 
....................   int8 x; 
....................   x = RCREG1; 
0478:  MOVFF  FAE,1C4
....................   COM1_rbuf[COM1_rxi] = x; 
047C:  CLRF   03
047E:  MOVF   32,W
0480:  ADDLW  34
0482:  MOVWF  FE9
0484:  MOVLW  00
0486:  ADDWFC 03,W
0488:  MOVWF  FEA
048A:  MOVFF  1C4,FEF
....................   if (++COM1_rxi >= COM1_RX_LEN) 
048E:  INCF   32,F
0490:  MOVF   32,W
0492:  SUBLW  1F
0494:  BC    0498
....................     COM1_rxi = 0; 
0496:  CLRF   32
....................   if (COM1_rcnt < COM1_RX_LEN) 
0498:  MOVF   31,W
049A:  SUBLW  1F
049C:  BNC   04A0
....................     COM1_rcnt++; 
049E:  INCF   31,F
....................   } 
....................  
04A0:  BCF    F9E.5
04A2:  GOTO   0090
.................... #int_RDA2 
.................... void  RDA2_isr(void) 
....................   { 
....................   if(fpga_first_val == 1) 
04A6:  DECFSZ 2F,W
04A8:  BRA    04B6
04AA:  MOVF   30,F
04AC:  BNZ   04B6
.................... 	{ 
.................... 	count_1sec = 0; 
04AE:  CLRF   22
04B0:  CLRF   21
.................... 	fpga_first_val = 0; 
04B2:  CLRF   30
04B4:  CLRF   2F
.................... 	} 
....................   if(RCREG2 > 0) 
04B6:  MOVF   F74,F
04B8:  BZ    04C0
....................     pass_count = RCREG2;   
04BA:  CLRF   2E
04BC:  MOVFF  F74,2D
....................   } 
....................  
04C0:  BCF    FA4.5
04C2:  GOTO   0090
.................... #include "BA1533RX_serial.c" 
....................  
.................... UCHAR comm_ptr;  
.................... UCHAR  pa_command = setup.power_amp, on_command = 1, bit_mode = 0, auto_power = 0; 
.................... //UINT count_1sec = 0; 
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
....................   { 
....................   UCHAR x; 
....................   x = COM1_rbuf[COM1_rxo]; 
*
10E8:  CLRF   03
10EA:  MOVF   33,W
10EC:  ADDLW  34
10EE:  MOVWF  FE9
10F0:  MOVLW  00
10F2:  ADDWFC 03,W
10F4:  MOVWF  FEA
10F6:  MOVFF  FEF,13A
....................   if (++COM1_rxo >= COM1_RX_LEN) 
10FA:  INCF   33,F
10FC:  MOVF   33,W
10FE:  SUBLW  1F
1100:  BC    1104
....................     COM1_rxo = 0; 
1102:  CLRF   33
....................   if (COM1_rcnt) 
1104:  MOVF   31,F
1106:  BZ    110A
....................     COM1_rcnt--; 
1108:  DECF   31,F
....................   return x; 
110A:  MOVLB  1
110C:  MOVFF  13A,01
1110:  MOVLB  0
1112:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
....................   { 
....................   UCHAR x, pos, tab_stop; 
....................   disable_interrupts(int_RDA); 
*
0CE2:  BCF    F9D.5
....................   pos = 0; 
0CE4:  MOVLB  1
0CE6:  CLRF   xAD
....................   while (*str) 
0CE8:  MOVFF  1AB,03
0CEC:  MOVFF  1AA,FE9
0CF0:  MOVFF  1AB,FEA
0CF4:  MOVF   FEF,F
0CF6:  BZ    0D6C
....................     { 
....................     x = *str++; 
0CF8:  MOVFF  1AB,03
0CFC:  MOVF   xAA,W
0CFE:  INCF   xAA,F
0D00:  BTFSC  FD8.2
0D02:  INCF   xAB,F
0D04:  MOVWF  FE9
0D06:  MOVFF  03,FEA
0D0A:  MOVFF  FEF,1AC
....................     if (x != '\t') 
0D0E:  MOVF   xAC,W
0D10:  SUBLW  09
0D12:  BZ    0D34
....................       { 
....................       TXREG1 = x; 
0D14:  MOVFF  1AC,FAD
....................       pos++; 
0D18:  INCF   xAD,F
....................       delay_us(300); 
0D1A:  CLRWDT
0D1C:  MOVLW  0D
0D1E:  MOVWF  xAF
0D20:  MOVLW  16
0D22:  MOVWF  xB0
0D24:  MOVLB  0
0D26:  RCALL  0CC2
0D28:  MOVLB  1
0D2A:  DECFSZ xAF,F
0D2C:  BRA    0D20
....................       x = RCREG1; 
0D2E:  MOVFF  FAE,1AC
....................       } 
0D32:  BRA    0D6A
....................     else 
....................       { 
....................       tab_stop = 32; 
0D34:  MOVLW  20
0D36:  MOVWF  xAE
....................       if (pos >= tab_stop) 
0D38:  MOVF   xAE,W
0D3A:  SUBWF  xAD,W
0D3C:  BNC   0D44
....................         tab_stop = pos + 2; 
0D3E:  MOVLW  02
0D40:  ADDWF  xAD,W
0D42:  MOVWF  xAE
....................       while (pos < tab_stop) 
0D44:  MOVF   xAE,W
0D46:  SUBWF  xAD,W
0D48:  BC    0D6A
....................         { 
....................         TXREG1 = ' '; 
0D4A:  MOVLW  20
0D4C:  MOVWF  FAD
....................         pos++; 
0D4E:  INCF   xAD,F
....................         delay_us(300); 
0D50:  CLRWDT
0D52:  MOVLW  0D
0D54:  MOVWF  xAF
0D56:  MOVLW  16
0D58:  MOVWF  xB0
0D5A:  MOVLB  0
0D5C:  RCALL  0CC2
0D5E:  MOVLB  1
0D60:  DECFSZ xAF,F
0D62:  BRA    0D56
....................         x = RCREG1; 
0D64:  MOVFF  FAE,1AC
0D68:  BRA    0D44
....................         } 
....................       } 
0D6A:  BRA    0CE8
....................     } 
....................   x = RCREG1; 
0D6C:  MOVFF  FAE,1AC
....................   enable_interrupts(int_RDA); 
0D70:  BSF    F9D.5
0D72:  MOVLB  0
0D74:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
....................   { 
....................   COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
*
065A:  CLRF   31
065C:  MOVFF  31,33
0660:  MOVFF  33,32
....................   comm_state = COMM_INIT; 
0664:  CLRF   54
....................   enable_interrupts(int_RDA); 
0666:  BSF    F9D.5
0668:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
....................   { 
....................   return comm_buf[comm_ptr++]; 
*
1114:  MOVF   xFF,W
1116:  INCF   xFF,F
1118:  CLRF   03
111A:  ADDLW  56
111C:  MOVWF  FE9
111E:  MOVLW  00
1120:  ADDWFC 03,W
1122:  MOVWF  FEA
1124:  CLRF   03
1126:  MOVFF  FEF,01
112A:  MOVFF  03,02
112E:  RETURN 0
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
....................   { 
....................   while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
*
130C:  CLRF   03
130E:  MOVF   xFF,W
1310:  ADDLW  56
1312:  MOVWF  FE9
1314:  MOVLW  00
1316:  ADDWFC 03,W
1318:  MOVWF  FEA
131A:  MOVF   FEF,F
131C:  BZ    134A
131E:  CLRF   03
1320:  MOVF   xFF,W
1322:  ADDLW  56
1324:  MOVWF  FE9
1326:  MOVLW  00
1328:  ADDWFC 03,W
132A:  MOVWF  FEA
132C:  MOVF   FEF,W
132E:  SUBLW  2C
1330:  BZ    1346
1332:  CLRF   03
1334:  MOVF   xFF,W
1336:  ADDLW  56
1338:  MOVWF  FE9
133A:  MOVLW  00
133C:  ADDWFC 03,W
133E:  MOVWF  FEA
1340:  MOVF   FEF,W
1342:  SUBLW  20
1344:  BNZ   134A
....................     comm_ptr++; 
1346:  INCF   xFF,F
1348:  BRA    130C
134A:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
....................   { 
....................   skip_spc(); 
134C:  RCALL  130C
....................   return comm_buf[comm_ptr]; 
134E:  CLRF   03
1350:  MOVF   xFF,W
1352:  ADDLW  56
1354:  MOVWF  FE9
1356:  MOVLW  00
1358:  ADDWFC 03,W
135A:  MOVWF  FEA
135C:  CLRF   03
135E:  MOVFF  FEF,01
1362:  MOVFF  03,02
1366:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  
.................... #separate 
.................... SINT get_int(void) 
*
13BC:  MOVLB  1
13BE:  CLRF   x56
13C0:  MOVLW  01
13C2:  MOVWF  x55
....................   { 
....................   SINT num, sign = 1; 
....................   skip_spc(); 
13C4:  MOVLB  0
13C6:  RCALL  130C
....................   if (comm_buf[comm_ptr]) 
13C8:  CLRF   03
13CA:  MOVF   xFF,W
13CC:  ADDLW  56
13CE:  MOVWF  FE9
13D0:  MOVLW  00
13D2:  ADDWFC 03,W
13D4:  MOVWF  FEA
13D6:  MOVF   FEF,F
13D8:  BZ    1462
....................     { 
....................     num = 0; 
13DA:  MOVLB  1
13DC:  CLRF   x54
13DE:  CLRF   x53
....................     if (peek_char() == '-') 
13E0:  MOVLB  0
13E2:  RCALL  134C
13E4:  MOVFF  02,158
13E8:  MOVFF  01,157
13EC:  MOVLB  1
13EE:  MOVF   01,W
13F0:  SUBLW  2D
13F2:  BNZ   1402
13F4:  MOVF   x58,F
13F6:  BNZ   1402
....................       { 
....................       sign = -1; 
13F8:  SETF   x56
13FA:  SETF   x55
....................       get_char(); 
13FC:  MOVLB  0
13FE:  RCALL  1114
1400:  MOVLB  1
....................       } 
....................     while (isdigit(comm_buf[comm_ptr])) 
1402:  CLRF   03
1404:  MOVLB  0
1406:  MOVF   xFF,W
1408:  ADDLW  56
140A:  MOVWF  FE9
140C:  MOVLW  00
140E:  ADDWFC 03,W
1410:  MOVWF  FEA
1412:  MOVFF  FEF,157
1416:  MOVLB  1
1418:  MOVF   x57,W
141A:  SUBLW  2F
141C:  BC    1460
141E:  MOVF   x57,W
1420:  SUBLW  39
1422:  BNC   1460
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
1424:  MOVFF  154,158
1428:  MOVFF  153,157
142C:  CLRF   x5A
142E:  MOVLW  0A
1430:  MOVWF  x59
1432:  MOVLB  0
1434:  RCALL  1368
1436:  MOVFF  02,158
143A:  MOVFF  01,157
143E:  MOVF   xFF,W
1440:  INCF   xFF,F
1442:  CLRF   03
1444:  ADDLW  56
1446:  MOVWF  FE9
1448:  MOVLW  00
144A:  ADDWFC 03,W
144C:  MOVWF  FEA
144E:  MOVLW  30
1450:  SUBWF  FEF,W
1452:  MOVLB  1
1454:  ADDWF  01,W
1456:  MOVWF  x53
1458:  MOVLW  00
145A:  ADDWFC 02,W
145C:  MOVWF  x54
145E:  BRA    1402
1460:  MOVLB  0
....................     } 
.................... //  skip_spc(); 
....................   return num * sign; 
1462:  MOVFF  154,158
1466:  MOVFF  153,157
146A:  MOVFF  156,15A
146E:  MOVFF  155,159
1472:  RCALL  1368
1474:  MOVFF  02,03
1478:  MOVFF  02,02
147C:  RETURN 0
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
....................   { 
....................   ULONG num; 
....................   skip_spc(); 
....................   if (comm_buf[comm_ptr]) 
....................     { 
....................     num = 0; 
....................     while (isdigit(comm_buf[comm_ptr])) 
....................       num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
....................     } 
....................   skip_spc(); 
....................   return num; 
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
....................   { 
....................   ULONG num; 
....................   UCHAR chr; 
....................   skip_spc(); 
....................   if (peek_char()) 
....................     { 
....................     num = 0; 
....................     while (isxdigit(peek_char())) 
....................       { 
....................       chr = get_char(); 
....................       chr = toupper(chr); 
....................       if (chr <= '9') 
....................         chr -= '0'; 
....................       else 
....................         chr = chr - ('A' - 10); 
....................       num = num * 16 + (ULONG)chr; 
....................       } 
....................     } 
....................   return num; 
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
....................   { 
....................   UINT freq; 
....................   freq = get_int(); 
147E:  RCALL  13BC
1480:  MOVFF  02,152
1484:  MOVFF  01,151
....................   return freq; 
1488:  MOVLB  1
148A:  MOVFF  151,01
148E:  MOVFF  152,02
1492:  MOVLB  0
1494:  GOTO   2A52 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void list_help(void) 
....................   { 
....................   COM1_send_str("\r\n"); 
*
1130:  MOVLW  0D
1132:  MOVLB  1
1134:  MOVWF  x51
1136:  MOVLW  0A
1138:  MOVWF  x52
113A:  CLRF   x53
113C:  MOVLW  01
113E:  MOVWF  xAB
1140:  MOVLW  51
1142:  MOVWF  xAA
1144:  MOVLB  0
1146:  RCALL  0CE2
....................   COM1_send_str("$F <frequency><cr>  \tSet frequency in 1MHz increments (i.e.5173 is 5.173GHz)\r\n"); 
1148:  MOVLW  01
114A:  MOVWF  FEA
114C:  MOVLW  51
114E:  MOVWF  FE9
1150:  MOVFF  FF2,1A0
1154:  BCF    FF2.7
1156:  MOVLW  4F
1158:  MOVWF  01
115A:  CLRF   FF7
115C:  MOVLW  00
115E:  CALL   0104
1162:  TBLRD*-
1164:  TBLRD*+
1166:  MOVFF  FF5,FEE
116A:  DECFSZ 01,F
116C:  BRA    1164
116E:  MOVLB  1
1170:  BTFSC  xA0.7
1172:  BSF    FF2.7
1174:  MOVLW  01
1176:  MOVWF  xAB
1178:  MOVLW  51
117A:  MOVWF  xAA
117C:  MOVLB  0
117E:  RCALL  0CE2
....................   COM1_send_str("$ON <onoff><cr>  \tSet PLL RF OUT on(1) or off(0)\r\n"); 
1180:  MOVLW  01
1182:  MOVWF  FEA
1184:  MOVLW  51
1186:  MOVWF  FE9
1188:  MOVFF  FF2,1A0
118C:  BCF    FF2.7
118E:  MOVLW  33
1190:  MOVWF  01
1192:  CLRF   FF7
1194:  MOVLW  00
1196:  CALL   016E
119A:  TBLRD*-
119C:  TBLRD*+
119E:  MOVFF  FF5,FEE
11A2:  DECFSZ 01,F
11A4:  BRA    119C
11A6:  MOVLB  1
11A8:  BTFSC  xA0.7
11AA:  BSF    FF2.7
11AC:  MOVLW  01
11AE:  MOVWF  xAB
11B0:  MOVLW  51
11B2:  MOVWF  xAA
11B4:  MOVLB  0
11B6:  RCALL  0CE2
....................   COM1_send_str("$PS <power><cr>  \tSet amp power on(1) or off(0)\r\n"); 
11B8:  MOVLW  01
11BA:  MOVWF  FEA
11BC:  MOVLW  51
11BE:  MOVWF  FE9
11C0:  MOVFF  FF2,1A0
11C4:  BCF    FF2.7
11C6:  MOVLW  32
11C8:  MOVWF  01
11CA:  CLRF   FF7
11CC:  MOVLW  00
11CE:  CALL   01BC
11D2:  TBLRD*-
11D4:  TBLRD*+
11D6:  MOVFF  FF5,FEE
11DA:  DECFSZ 01,F
11DC:  BRA    11D4
11DE:  MOVLB  1
11E0:  BTFSC  xA0.7
11E2:  BSF    FF2.7
11E4:  MOVLW  01
11E6:  MOVWF  xAB
11E8:  MOVLW  51
11EA:  MOVWF  xAA
11EC:  MOVLB  0
11EE:  RCALL  0CE2
....................   COM1_send_str("$P <level><cr>  \tSet power level high(1) or low(0)\r\n"); 
11F0:  MOVLW  01
11F2:  MOVWF  FEA
11F4:  MOVLW  51
11F6:  MOVWF  FE9
11F8:  MOVFF  FF2,1A0
11FC:  BCF    FF2.7
11FE:  MOVLW  35
1200:  MOVWF  01
1202:  CLRF   FF7
1204:  MOVLW  00
1206:  CALL   0208
120A:  TBLRD*-
120C:  TBLRD*+
120E:  MOVFF  FF5,FEE
1212:  DECFSZ 01,F
1214:  BRA    120C
1216:  MOVLB  1
1218:  BTFSC  xA0.7
121A:  BSF    FF2.7
121C:  MOVLW  01
121E:  MOVWF  xAB
1220:  MOVLW  51
1222:  MOVWF  xAA
1224:  MOVLB  0
1226:  RCALL  0CE2
....................   COM1_send_str("$LD <fwd><cr>  \tSet Fwd power measurement on(1) or off(0)\r\n"); 
1228:  MOVLW  01
122A:  MOVWF  FEA
122C:  MOVLW  51
122E:  MOVWF  FE9
1230:  MOVFF  FF2,1A0
1234:  BCF    FF2.7
1236:  MOVLW  3C
1238:  MOVWF  01
123A:  CLRF   FF7
123C:  MOVLW  00
123E:  CALL   0258
1242:  TBLRD*-
1244:  TBLRD*+
1246:  MOVFF  FF5,FEE
124A:  DECFSZ 01,F
124C:  BRA    1244
124E:  MOVLB  1
1250:  BTFSC  xA0.7
1252:  BSF    FF2.7
1254:  MOVLW  01
1256:  MOVWF  xAB
1258:  MOVLW  51
125A:  MOVWF  xAA
125C:  MOVLB  0
125E:  RCALL  0CE2
....................   COM1_send_str("$Q<cr>  \tRequest status\r\n"); 
1260:  MOVLW  01
1262:  MOVWF  FEA
1264:  MOVLW  51
1266:  MOVWF  FE9
1268:  MOVFF  FF2,1A0
126C:  BCF    FF2.7
126E:  MOVLW  1A
1270:  MOVWF  01
1272:  CLRF   FF7
1274:  MOVLW  00
1276:  CALL   02AE
127A:  TBLRD*-
127C:  TBLRD*+
127E:  MOVFF  FF5,FEE
1282:  DECFSZ 01,F
1284:  BRA    127C
1286:  MOVLB  1
1288:  BTFSC  xA0.7
128A:  BSF    FF2.7
128C:  MOVLW  01
128E:  MOVWF  xAB
1290:  MOVLW  51
1292:  MOVWF  xAA
1294:  MOVLB  0
1296:  RCALL  0CE2
....................   COM1_send_str("$BM<cr>  \tBIT Mode ON(1) OFF(0)\r\n"); 
1298:  MOVLW  01
129A:  MOVWF  FEA
129C:  MOVLW  51
129E:  MOVWF  FE9
12A0:  MOVFF  FF2,1A0
12A4:  BCF    FF2.7
12A6:  MOVLW  22
12A8:  MOVWF  01
12AA:  CLRF   FF7
12AC:  MOVLW  00
12AE:  CALL   02E2
12B2:  TBLRD*-
12B4:  TBLRD*+
12B6:  MOVFF  FF5,FEE
12BA:  DECFSZ 01,F
12BC:  BRA    12B4
12BE:  MOVLB  1
12C0:  BTFSC  xA0.7
12C2:  BSF    FF2.7
12C4:  MOVLW  01
12C6:  MOVWF  xAB
12C8:  MOVLW  51
12CA:  MOVWF  xAA
12CC:  MOVLB  0
12CE:  RCALL  0CE2
....................   COM1_send_str("$TR<cr>  \tTRANSIVER(T) RECIVER(R)"); 
12D0:  MOVLW  01
12D2:  MOVWF  FEA
12D4:  MOVLW  51
12D6:  MOVWF  FE9
12D8:  MOVFF  FF2,1A0
12DC:  BCF    FF2.7
12DE:  MOVLW  22
12E0:  MOVWF  01
12E2:  CLRF   FF7
12E4:  MOVLW  00
12E6:  CALL   031E
12EA:  TBLRD*-
12EC:  TBLRD*+
12EE:  MOVFF  FF5,FEE
12F2:  DECFSZ 01,F
12F4:  BRA    12EC
12F6:  MOVLB  1
12F8:  BTFSC  xA0.7
12FA:  BSF    FF2.7
12FC:  MOVLW  01
12FE:  MOVWF  xAB
1300:  MOVLW  51
1302:  MOVWF  xAA
1304:  MOVLB  0
1306:  RCALL  0CE2
1308:  GOTO   2A46 (RETURN)
....................   //COM1_send_str("\r\n"); 
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... void send_raw_status(void) 
....................   { 
.................... 	UCHAR buf[64] ; 
.................... 	UINT iv3p3, iv28; 
.................... 	float v3p3, v28; 
.................... 	set_adc_channel(A2D_Vdd); // select 3.3v power input 
*
2732:  MOVLW  00
2734:  MOVWF  01
2736:  MOVF   FC2,W
2738:  ANDLW  83
273A:  IORWF  01,W
273C:  MOVWF  FC2
....................   	delay_us(20); 
273E:  CLRWDT
2740:  MOVLW  19
2742:  MOVWF  00
2744:  DECFSZ 00,F
2746:  BRA    2744
2748:  BRA    274A
274A:  NOP   
....................   	iv3p3 = read_adc(); 
274C:  BSF    FC2.1
274E:  BTFSC  FC2.1
2750:  BRA    274E
2752:  MOVFF  FC4,192
2756:  MOVLB  1
2758:  MOVFF  FC3,191
....................  
.................... 	set_adc_channel(A2D_POWER); // select 28v power input 
275C:  MOVLW  20
275E:  MOVWF  01
2760:  MOVF   FC2,W
2762:  ANDLW  83
2764:  IORWF  01,W
2766:  MOVWF  FC2
....................   	delay_us(20); 
2768:  CLRWDT
276A:  MOVLW  19
276C:  MOVWF  00
276E:  DECFSZ 00,F
2770:  BRA    276E
2772:  BRA    2774
2774:  NOP   
....................   	iv28 = read_adc(); 
2776:  BSF    FC2.1
2778:  BTFSC  FC2.1
277A:  BRA    2778
277C:  MOVFF  FC3,193
2780:  MOVFF  FC4,194
....................  
.................... 	v3p3 = (float)iv3p3 / 1024.0 * 3.3; 
2784:  MOVFF  192,1B3
2788:  MOVFF  191,1B2
278C:  MOVLB  0
278E:  CALL   1586
2792:  MOVFF  03,1A0
2796:  MOVFF  02,19F
279A:  MOVFF  01,19E
279E:  MOVFF  00,19D
27A2:  MOVFF  03,1B1
27A6:  MOVFF  02,1B0
27AA:  MOVFF  01,1AF
27AE:  MOVFF  00,1AE
27B2:  MOVLB  1
27B4:  CLRF   xB5
27B6:  CLRF   xB4
27B8:  CLRF   xB3
27BA:  MOVLW  89
27BC:  MOVWF  xB2
27BE:  MOVLB  0
27C0:  CALL   1966
27C4:  MOVFF  03,1A0
27C8:  MOVFF  02,19F
27CC:  MOVFF  01,19E
27D0:  MOVFF  00,19D
27D4:  MOVFF  03,1BA
27D8:  MOVFF  02,1B9
27DC:  MOVFF  01,1B8
27E0:  MOVFF  00,1B7
27E4:  MOVLW  33
27E6:  MOVLB  1
27E8:  MOVWF  xBE
27EA:  MOVWF  xBD
27EC:  MOVLW  53
27EE:  MOVWF  xBC
27F0:  MOVLW  80
27F2:  MOVWF  xBB
27F4:  MOVLB  0
27F6:  CALL   15BC
27FA:  MOVFF  03,198
27FE:  MOVFF  02,197
2802:  MOVFF  01,196
2806:  MOVFF  00,195
.................... 	v28 = (float)iv28 / 1024.0 * 36.3;  //36.3 = 3.3 * 11  
280A:  MOVFF  194,1B3
280E:  MOVFF  193,1B2
2812:  CALL   1586
2816:  MOVFF  03,1A0
281A:  MOVFF  02,19F
281E:  MOVFF  01,19E
2822:  MOVFF  00,19D
2826:  MOVFF  03,1B1
282A:  MOVFF  02,1B0
282E:  MOVFF  01,1AF
2832:  MOVFF  00,1AE
2836:  MOVLB  1
2838:  CLRF   xB5
283A:  CLRF   xB4
283C:  CLRF   xB3
283E:  MOVLW  89
2840:  MOVWF  xB2
2842:  MOVLB  0
2844:  CALL   1966
2848:  MOVFF  03,1A0
284C:  MOVFF  02,19F
2850:  MOVFF  01,19E
2854:  MOVFF  00,19D
2858:  MOVFF  03,1BA
285C:  MOVFF  02,1B9
2860:  MOVFF  01,1B8
2864:  MOVFF  00,1B7
2868:  MOVLW  33
286A:  MOVLB  1
286C:  MOVWF  xBE
286E:  MOVWF  xBD
2870:  MOVLW  11
2872:  MOVWF  xBC
2874:  MOVLW  84
2876:  MOVWF  xBB
2878:  MOVLB  0
287A:  CALL   15BC
287E:  MOVFF  03,19C
2882:  MOVFF  02,19B
2886:  MOVFF  01,19A
288A:  MOVFF  00,199
.................... 	sprintf(buf, "\r\n3.3v power in=%2.1f(v) 28v power in=%2.1f(v)",v3p3, v28); 
288E:  MOVLW  01
2890:  MOVLB  1
2892:  MOVWF  x05
2894:  MOVLW  51
2896:  MOVWF  x04
2898:  MOVLW  C6
289A:  MOVWF  FF6
289C:  MOVLW  04
289E:  MOVWF  FF7
28A0:  MOVLW  10
28A2:  MOVWF  xAA
28A4:  MOVLB  0
28A6:  CALL   1AE4
28AA:  MOVLW  01
28AC:  MOVWF  FE9
28AE:  MOVFF  198,1AD
28B2:  MOVFF  197,1AC
28B6:  MOVFF  196,1AB
28BA:  MOVFF  195,1AA
28BE:  MOVLB  1
28C0:  MOVWF  xAE
28C2:  MOVLB  0
28C4:  CALL   1C0C
28C8:  MOVLW  DB
28CA:  MOVWF  FF6
28CC:  MOVLW  04
28CE:  MOVWF  FF7
28D0:  MOVLW  11
28D2:  MOVLB  1
28D4:  MOVWF  xAA
28D6:  MOVLB  0
28D8:  CALL   1AE4
28DC:  MOVLW  01
28DE:  MOVWF  FE9
28E0:  MOVFF  19C,1AD
28E4:  MOVFF  19B,1AC
28E8:  MOVFF  19A,1AB
28EC:  MOVFF  199,1AA
28F0:  MOVLB  1
28F2:  MOVWF  xAE
28F4:  MOVLB  0
28F6:  CALL   1C0C
28FA:  MOVLW  F1
28FC:  MOVWF  FF6
28FE:  MOVLW  04
2900:  MOVWF  FF7
2902:  MOVLW  03
2904:  MOVLB  1
2906:  MOVWF  xAA
2908:  MOVLB  0
290A:  CALL   1AE4
.................... 	COM1_send_str(buf); 
290E:  MOVLW  01
2910:  MOVLB  1
2912:  MOVWF  xAB
2914:  MOVLW  51
2916:  MOVWF  xAA
2918:  MOVLB  0
291A:  CALL   0CE2
....................  
.................... 	set_adc_channel(A2D_PREV); // select RSSI power input 
291E:  MOVLW  14
2920:  MOVWF  01
2922:  MOVF   FC2,W
2924:  ANDLW  83
2926:  IORWF  01,W
2928:  MOVWF  FC2
....................     delay_us(20); 
292A:  CLRWDT
292C:  MOVLW  19
292E:  MOVWF  00
2930:  DECFSZ 00,F
2932:  BRA    2930
2934:  BRA    2936
2936:  NOP   
....................      
.................... 	sprintf(buf, "\r\nRSSI=%lu", read_adc()); 
2938:  BSF    FC2.1
293A:  BTFSC  FC2.1
293C:  BRA    293A
293E:  MOVFF  FC4,19E
2942:  MOVLB  1
2944:  MOVFF  FC3,19D
2948:  MOVLW  01
294A:  MOVWF  x05
294C:  MOVLW  51
294E:  MOVWF  x04
2950:  MOVLW  F6
2952:  MOVWF  FF6
2954:  MOVLW  04
2956:  MOVWF  FF7
2958:  MOVLW  07
295A:  MOVWF  xAA
295C:  MOVLB  0
295E:  CALL   1AE4
2962:  MOVLW  10
2964:  MOVWF  FE9
2966:  MOVFF  19E,1AB
296A:  MOVFF  19D,1AA
296E:  CALL   1B0C
.................... 	COM1_send_str(buf); 
2972:  MOVLW  01
2974:  MOVLB  1
2976:  MOVWF  xAB
2978:  MOVLW  51
297A:  MOVWF  xAA
297C:  MOVLB  0
297E:  CALL   0CE2
2982:  GOTO   330A (RETURN)
....................   } 
....................  
....................  
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... void send_status(void) 
....................   { 
....................   UINT  itemp, idx, rssi; 
....................   UCHAR buf[64] ; 
....................   float temp ; 
....................   
.................... //  UINT fwdp, revp, muxout; 
....................  
....................   set_adc_channel(A2D_PREV); // select RSSI power input 
*
1F74:  MOVLW  14
1F76:  MOVWF  01
1F78:  MOVF   FC2,W
1F7A:  ANDLW  83
1F7C:  IORWF  01,W
1F7E:  MOVWF  FC2
....................   delay_us(20); 
1F80:  CLRWDT
1F82:  MOVLW  19
1F84:  MOVWF  00
1F86:  DECFSZ 00,F
1F88:  BRA    1F86
1F8A:  BRA    1F8C
1F8C:  NOP   
....................   rssi = read_adc(); 
1F8E:  BSF    FC2.1
1F90:  BTFSC  FC2.1
1F92:  BRA    1F90
1F94:  MOVFF  FC4,156
1F98:  MOVLB  1
1F9A:  MOVFF  FC3,155
....................   
....................   float32 numerator=1,denumerator=1,k_rssi=0; 
....................     int n = 11,i,j; 
1F9E:  CLRF   x9E
1FA0:  CLRF   x9D
1FA2:  CLRF   x9C
1FA4:  MOVLW  7F
1FA6:  MOVWF  x9B
1FA8:  CLRF   xA2
1FAA:  CLRF   xA1
1FAC:  CLRF   xA0
1FAE:  MOVWF  x9F
1FB0:  CLRF   xA6
1FB2:  CLRF   xA5
1FB4:  CLRF   xA4
1FB6:  CLRF   xA3
1FB8:  MOVLW  0B
1FBA:  MOVWF  xA7
....................  
....................  
.................... 	for(i=0; i<n; i++) 
1FBC:  CLRF   xA8
1FBE:  MOVF   xA7,W
1FC0:  SUBWF  xA8,W
1FC2:  BTFSC  FD8.0
1FC4:  BRA    224C
....................         { 
....................             numerator=1; 
1FC6:  CLRF   x9E
1FC8:  CLRF   x9D
1FCA:  CLRF   x9C
1FCC:  MOVLW  7F
1FCE:  MOVWF  x9B
....................             denumerator=1; 
1FD0:  CLRF   xA2
1FD2:  CLRF   xA1
1FD4:  CLRF   xA0
1FD6:  MOVWF  x9F
....................             for(j=0; j<n; j++) 
1FD8:  CLRF   xA9
1FDA:  MOVF   xA7,W
1FDC:  SUBWF  xA9,W
1FDE:  BTFSC  FD8.0
1FE0:  BRA    2166
....................             { 
....................                 if(j!=i) 
1FE2:  MOVF   xA8,W
1FE4:  SUBWF  xA9,W
1FE6:  BTFSC  FD8.2
1FE8:  BRA    2162
....................                 { 
....................  					numerator = numerator * (rssi - (float32)setup.rssi_table[j][0]); 
1FEA:  MOVF   xA9,W
1FEC:  MULLW  04
1FEE:  MOVF   FF3,W
1FF0:  CLRF   03
1FF2:  ADDLW  B9
1FF4:  MOVWF  FE9
1FF6:  MOVLW  00
1FF8:  ADDWFC 03,W
1FFA:  MOVWF  FEA
1FFC:  MOVFF  FEC,03
2000:  MOVF   FED,F
2002:  MOVFF  FEF,1B2
2006:  MOVFF  03,1B3
200A:  MOVLB  0
200C:  CALL   1586
2010:  MOVFF  03,1AF
2014:  MOVFF  02,1AE
2018:  MOVFF  01,1AD
201C:  MOVFF  00,1AC
2020:  MOVFF  156,1B3
2024:  MOVFF  155,1B2
2028:  CALL   1586
202C:  MOVFF  FEA,1B1
2030:  MOVFF  FE9,1B0
2034:  BSF    FD8.1
2036:  MOVFF  03,1B7
203A:  MOVFF  02,1B6
203E:  MOVFF  01,1B5
2042:  MOVFF  00,1B4
2046:  MOVFF  1AF,1BB
204A:  MOVFF  1AE,1BA
204E:  MOVFF  1AD,1B9
2052:  MOVFF  1AC,1B8
2056:  CALL   16EE
205A:  MOVFF  1B1,FEA
205E:  MOVFF  1B0,FE9
2062:  MOVFF  19E,1BA
2066:  MOVFF  19D,1B9
206A:  MOVFF  19C,1B8
206E:  MOVFF  19B,1B7
2072:  MOVFF  03,1BE
2076:  MOVFF  02,1BD
207A:  MOVFF  01,1BC
207E:  MOVFF  00,1BB
2082:  CALL   15BC
2086:  MOVFF  03,19E
208A:  MOVFF  02,19D
208E:  MOVFF  01,19C
2092:  MOVFF  00,19B
....................                     denumerator = denumerator * ((float32)setup.rssi_table[i][0] - (float32)setup.rssi_table[j][0]); 
2096:  MOVLB  1
2098:  MOVF   xA8,W
209A:  MULLW  04
209C:  MOVF   FF3,W
209E:  CLRF   03
20A0:  ADDLW  B9
20A2:  MOVWF  FE9
20A4:  MOVLW  00
20A6:  ADDWFC 03,W
20A8:  MOVWF  FEA
20AA:  MOVFF  FEC,03
20AE:  MOVF   FED,F
20B0:  MOVFF  FEF,1B2
20B4:  MOVFF  03,1B3
20B8:  MOVLB  0
20BA:  CALL   1586
20BE:  MOVFF  03,1AF
20C2:  MOVFF  02,1AE
20C6:  MOVFF  01,1AD
20CA:  MOVFF  00,1AC
20CE:  MOVLB  1
20D0:  MOVF   xA9,W
20D2:  MULLW  04
20D4:  MOVF   FF3,W
20D6:  CLRF   03
20D8:  ADDLW  B9
20DA:  MOVWF  FE9
20DC:  MOVLW  00
20DE:  ADDWFC 03,W
20E0:  MOVWF  FEA
20E2:  MOVFF  FEC,03
20E6:  MOVF   FED,F
20E8:  MOVFF  FEF,1B2
20EC:  MOVFF  03,1B3
20F0:  MOVLB  0
20F2:  CALL   1586
20F6:  MOVFF  FEA,1B3
20FA:  MOVFF  FE9,1B2
20FE:  BSF    FD8.1
2100:  MOVFF  1AF,1B7
2104:  MOVFF  1AE,1B6
2108:  MOVFF  1AD,1B5
210C:  MOVFF  1AC,1B4
2110:  MOVFF  03,1BB
2114:  MOVFF  02,1BA
2118:  MOVFF  01,1B9
211C:  MOVFF  00,1B8
2120:  CALL   16EE
2124:  MOVFF  1B3,FEA
2128:  MOVFF  1B2,FE9
212C:  MOVFF  1A2,1BA
2130:  MOVFF  1A1,1B9
2134:  MOVFF  1A0,1B8
2138:  MOVFF  19F,1B7
213C:  MOVFF  03,1BE
2140:  MOVFF  02,1BD
2144:  MOVFF  01,1BC
2148:  MOVFF  00,1BB
214C:  CALL   15BC
2150:  MOVFF  03,1A2
2154:  MOVFF  02,1A1
2158:  MOVFF  01,1A0
215C:  MOVFF  00,19F
2160:  MOVLB  1
....................                 } 
2162:  INCF   xA9,F
2164:  BRA    1FDA
....................             } 
....................             k_rssi=k_rssi+((numerator / denumerator) * (float32)setup.rssi_table[i][1]); 
2166:  MOVFF  19E,1B1
216A:  MOVFF  19D,1B0
216E:  MOVFF  19C,1AF
2172:  MOVFF  19B,1AE
2176:  MOVFF  1A2,1B5
217A:  MOVFF  1A1,1B4
217E:  MOVFF  1A0,1B3
2182:  MOVFF  19F,1B2
2186:  MOVLB  0
2188:  CALL   1966
218C:  MOVFF  03,1AD
2190:  MOVFF  02,1AC
2194:  MOVFF  01,1AB
2198:  MOVFF  00,1AA
219C:  MOVLB  1
219E:  MOVF   xA8,W
21A0:  MULLW  04
21A2:  MOVF   FF3,W
21A4:  CLRF   03
21A6:  ADDLW  11
21A8:  MOVWF  xAE
21AA:  MOVLW  00
21AC:  ADDWFC 03,W
21AE:  MOVWF  xAF
21B0:  MOVLW  02
21B2:  ADDWF  xAE,W
21B4:  MOVWF  01
21B6:  MOVLW  00
21B8:  ADDWFC xAF,W
21BA:  MOVWF  03
21BC:  MOVF   01,W
21BE:  ADDLW  A8
21C0:  MOVWF  FE9
21C2:  MOVLW  00
21C4:  ADDWFC 03,W
21C6:  MOVWF  FEA
21C8:  MOVFF  FEC,03
21CC:  MOVF   FED,F
21CE:  MOVFF  FEF,1B2
21D2:  MOVFF  03,1B3
21D6:  MOVLB  0
21D8:  CALL   1586
21DC:  MOVFF  1AD,1BA
21E0:  MOVFF  1AC,1B9
21E4:  MOVFF  1AB,1B8
21E8:  MOVFF  1AA,1B7
21EC:  MOVFF  03,1BE
21F0:  MOVFF  02,1BD
21F4:  MOVFF  01,1BC
21F8:  MOVFF  00,1BB
21FC:  CALL   15BC
2200:  MOVFF  FEA,1AB
2204:  MOVFF  FE9,1AA
2208:  BCF    FD8.1
220A:  MOVFF  1A6,1B7
220E:  MOVFF  1A5,1B6
2212:  MOVFF  1A4,1B5
2216:  MOVFF  1A3,1B4
221A:  MOVFF  03,1BB
221E:  MOVFF  02,1BA
2222:  MOVFF  01,1B9
2226:  MOVFF  00,1B8
222A:  CALL   16EE
222E:  MOVFF  1AB,FEA
2232:  MOVFF  1AA,FE9
2236:  MOVFF  03,1A6
223A:  MOVFF  02,1A5
223E:  MOVFF  01,1A4
2242:  MOVFF  00,1A3
2246:  MOVLB  1
2248:  INCF   xA8,F
224A:  BRA    1FBE
....................         } 
....................   if(setup.power_level) 
224C:  MOVLB  0
224E:  MOVF   xAB,W
2250:  IORWF  xAC,W
2252:  BZ    228A
.................... 	k_rssi+=10; 
2254:  BCF    FD8.1
2256:  MOVFF  1A6,1B7
225A:  MOVFF  1A5,1B6
225E:  MOVFF  1A4,1B5
2262:  MOVFF  1A3,1B4
2266:  MOVLB  1
2268:  CLRF   xBB
226A:  CLRF   xBA
226C:  MOVLW  20
226E:  MOVWF  xB9
2270:  MOVLW  82
2272:  MOVWF  xB8
2274:  MOVLB  0
2276:  CALL   16EE
227A:  MOVFF  03,1A6
227E:  MOVFF  02,1A5
2282:  MOVFF  01,1A4
2286:  MOVFF  00,1A3
....................   	 
....................    
....................   set_adc_channel(A2D_TEMP); // select tmperature  input 
228A:  MOVLW  18
228C:  MOVWF  01
228E:  MOVF   FC2,W
2290:  ANDLW  83
2292:  IORWF  01,W
2294:  MOVWF  FC2
....................   delay_us(20); 
2296:  CLRWDT
2298:  MOVLW  19
229A:  MOVWF  00
229C:  DECFSZ 00,F
229E:  BRA    229C
22A0:  BRA    22A2
22A2:  NOP   
....................   itemp = read_adc(); 
22A4:  BSF    FC2.1
22A6:  BTFSC  FC2.1
22A8:  BRA    22A6
22AA:  MOVFF  FC4,152
22AE:  MOVLB  1
22B0:  MOVFF  FC3,151
....................  
....................   temp = (float)itemp / 1024.0 * 3.3; 
22B4:  MOVFF  152,1B3
22B8:  MOVFF  151,1B2
22BC:  MOVLB  0
22BE:  CALL   1586
22C2:  MOVFF  03,1AD
22C6:  MOVFF  02,1AC
22CA:  MOVFF  01,1AB
22CE:  MOVFF  00,1AA
22D2:  MOVFF  03,1B1
22D6:  MOVFF  02,1B0
22DA:  MOVFF  01,1AF
22DE:  MOVFF  00,1AE
22E2:  MOVLB  1
22E4:  CLRF   xB5
22E6:  CLRF   xB4
22E8:  CLRF   xB3
22EA:  MOVLW  89
22EC:  MOVWF  xB2
22EE:  MOVLB  0
22F0:  CALL   1966
22F4:  MOVFF  03,1AD
22F8:  MOVFF  02,1AC
22FC:  MOVFF  01,1AB
2300:  MOVFF  00,1AA
2304:  MOVFF  03,1BA
2308:  MOVFF  02,1B9
230C:  MOVFF  01,1B8
2310:  MOVFF  00,1B7
2314:  MOVLW  33
2316:  MOVLB  1
2318:  MOVWF  xBE
231A:  MOVWF  xBD
231C:  MOVLW  53
231E:  MOVWF  xBC
2320:  MOVLW  80
2322:  MOVWF  xBB
2324:  MOVLB  0
2326:  CALL   15BC
232A:  MOVFF  03,19A
232E:  MOVFF  02,199
2332:  MOVFF  01,198
2336:  MOVFF  00,197
....................   temp -= 0.75; 
233A:  BSF    FD8.1
233C:  MOVFF  19A,1B7
2340:  MOVFF  199,1B6
2344:  MOVFF  198,1B5
2348:  MOVFF  197,1B4
234C:  MOVLB  1
234E:  CLRF   xBB
2350:  CLRF   xBA
2352:  MOVLW  40
2354:  MOVWF  xB9
2356:  MOVLW  7E
2358:  MOVWF  xB8
235A:  MOVLB  0
235C:  CALL   16EE
2360:  MOVFF  03,19A
2364:  MOVFF  02,199
2368:  MOVFF  01,198
236C:  MOVFF  00,197
....................   temp *= 100; 
2370:  MOVFF  19A,1BA
2374:  MOVFF  199,1B9
2378:  MOVFF  198,1B8
237C:  MOVFF  197,1B7
2380:  MOVLB  1
2382:  CLRF   xBE
2384:  CLRF   xBD
2386:  MOVLW  48
2388:  MOVWF  xBC
238A:  MOVLW  85
238C:  MOVWF  xBB
238E:  MOVLB  0
2390:  CALL   15BC
2394:  MOVFF  03,19A
2398:  MOVFF  02,199
239C:  MOVFF  01,198
23A0:  MOVFF  00,197
....................   temp += 25.0; 
23A4:  BCF    FD8.1
23A6:  MOVFF  19A,1B7
23AA:  MOVFF  199,1B6
23AE:  MOVFF  198,1B5
23B2:  MOVFF  197,1B4
23B6:  MOVLB  1
23B8:  CLRF   xBB
23BA:  CLRF   xBA
23BC:  MOVLW  48
23BE:  MOVWF  xB9
23C0:  MOVLW  83
23C2:  MOVWF  xB8
23C4:  MOVLB  0
23C6:  CALL   16EE
23CA:  MOVFF  03,19A
23CE:  MOVFF  02,199
23D2:  MOVFF  01,198
23D6:  MOVFF  00,197
....................  
....................   sprintf(buf, "\r\nFREQ=%lu, RSSI=%0.2fdBM, TEMP=%5.1f(c), ID=%lu, DC=%02lu%02u, VER %ls, ", 
.................... 		  setup.frequency, k_rssi, temp, setup.unit_ID, setup.year, setup.week, VERSION_V); 
23DA:  MOVLW  01
23DC:  MOVLB  1
23DE:  MOVWF  x05
23E0:  MOVLW  57
23E2:  MOVWF  x04
23E4:  MOVLW  02
23E6:  MOVWF  FF6
23E8:  MOVLW  05
23EA:  MOVWF  FF7
23EC:  MOVLW  07
23EE:  MOVWF  xAA
23F0:  MOVLB  0
23F2:  CALL   1AE4
23F6:  MOVLW  10
23F8:  MOVWF  FE9
23FA:  MOVFF  AA,1AB
23FE:  MOVFF  A9,1AA
2402:  CALL   1B0C
2406:  MOVLW  0C
2408:  MOVWF  FF6
240A:  MOVLW  05
240C:  MOVWF  FF7
240E:  MOVLW  07
2410:  MOVLB  1
2412:  MOVWF  xAA
2414:  MOVLB  0
2416:  CALL   1AE4
241A:  MOVLW  C9
241C:  MOVWF  FE9
241E:  MOVFF  1A6,1AD
2422:  MOVFF  1A5,1AC
2426:  MOVFF  1A4,1AB
242A:  MOVFF  1A3,1AA
242E:  MOVLW  02
2430:  MOVLB  1
2432:  MOVWF  xAE
2434:  MOVLB  0
2436:  CALL   1C0C
243A:  MOVLW  18
243C:  MOVWF  FF6
243E:  MOVLW  05
2440:  MOVWF  FF7
2442:  MOVLW  0A
2444:  MOVLB  1
2446:  MOVWF  xAA
2448:  MOVLB  0
244A:  CALL   1AE4
244E:  MOVLW  04
2450:  MOVWF  FE9
2452:  MOVFF  19A,1AD
2456:  MOVFF  199,1AC
245A:  MOVFF  198,1AB
245E:  MOVFF  197,1AA
2462:  MOVLW  01
2464:  MOVLB  1
2466:  MOVWF  xAE
2468:  MOVLB  0
246A:  CALL   1C0C
246E:  MOVLW  27
2470:  MOVWF  FF6
2472:  MOVLW  05
2474:  MOVWF  FF7
2476:  MOVLW  08
2478:  MOVLB  1
247A:  MOVWF  xAA
247C:  MOVLB  0
247E:  CALL   1AE4
2482:  MOVLW  10
2484:  MOVWF  FE9
2486:  MOVFF  B8,1AB
248A:  MOVFF  B7,1AA
248E:  CALL   1B0C
2492:  MOVLW  32
2494:  MOVWF  FF6
2496:  MOVLW  05
2498:  MOVWF  FF7
249A:  MOVLW  05
249C:  MOVLB  1
249E:  MOVWF  xAA
24A0:  MOVLB  0
24A2:  CALL   1AE4
24A6:  MOVLW  0B
24A8:  MOVWF  FE9
24AA:  MOVFF  B5,1AB
24AE:  MOVFF  B4,1AA
24B2:  CALL   1B0C
24B6:  MOVFF  B6,1AA
24BA:  MOVLW  01
24BC:  MOVLB  1
24BE:  MOVWF  xAB
24C0:  MOVLB  0
24C2:  BRA    1DE2
24C4:  MOVLW  40
24C6:  MOVWF  FF6
24C8:  MOVLW  05
24CA:  MOVWF  FF7
24CC:  MOVLW  06
24CE:  MOVLB  1
24D0:  MOVWF  xAA
24D2:  MOVLB  0
24D4:  CALL   1AE4
24D8:  MOVLW  4C
24DA:  MOVWF  FF6
24DC:  MOVLW  05
24DE:  MOVWF  FF7
24E0:  RCALL  1E60
24E2:  MOVLW  2C
24E4:  MOVLB  1
24E6:  MOVWF  xB7
24E8:  MOVLB  0
24EA:  CALL   1AC4
24EE:  MOVLW  20
24F0:  MOVLB  1
24F2:  MOVWF  xB7
24F4:  MOVLB  0
24F6:  CALL   1AC4
....................   COM1_send_str(buf); 
24FA:  MOVLW  01
24FC:  MOVLB  1
24FE:  MOVWF  xAB
2500:  MOVLW  57
2502:  MOVWF  xAA
2504:  MOVLB  0
2506:  CALL   0CE2
....................  
....................   if(setup.meter_backlight == 1) 
250A:  DECFSZ xB3,W
250C:  BRA    2526
....................   sprintf(buf, "LIGHT=ON, "); 
250E:  MOVLW  01
2510:  MOVLB  1
2512:  MOVWF  x05
2514:  MOVLW  57
2516:  MOVWF  x04
2518:  MOVLW  52
251A:  MOVWF  FF6
251C:  MOVLW  05
251E:  MOVWF  FF7
2520:  MOVLB  0
2522:  RCALL  1E60
2524:  BRA    253C
....................   else  
....................   sprintf(buf, "LIGHT=OFF, "); 
2526:  MOVLW  01
2528:  MOVLB  1
252A:  MOVWF  x05
252C:  MOVLW  57
252E:  MOVWF  x04
2530:  MOVLW  5E
2532:  MOVWF  FF6
2534:  MOVLW  05
2536:  MOVWF  FF7
2538:  MOVLB  0
253A:  RCALL  1E60
....................   COM1_send_str(buf); 
253C:  MOVLW  01
253E:  MOVLB  1
2540:  MOVWF  xAB
2542:  MOVLW  57
2544:  MOVWF  xAA
2546:  MOVLB  0
2548:  CALL   0CE2
....................   
....................   if(pass_count > PASS_FAIL_TRESHOLD) 
254C:  MOVF   2E,F
254E:  BNZ   2556
2550:  MOVF   2D,W
2552:  SUBLW  60
2554:  BC    259A
....................   	sprintf(buf, "PASS Bit=%ld, ",pass_count); 
2556:  MOVLW  01
2558:  MOVLB  1
255A:  MOVWF  x05
255C:  MOVLW  57
255E:  MOVWF  x04
2560:  MOVLW  6A
2562:  MOVWF  FF6
2564:  MOVLW  05
2566:  MOVWF  FF7
2568:  MOVLW  09
256A:  MOVWF  xAA
256C:  MOVLB  0
256E:  CALL   1AE4
2572:  MOVLW  10
2574:  MOVWF  FE9
2576:  MOVFF  2E,1AB
257A:  MOVFF  2D,1AA
257E:  RCALL  1E80
2580:  MOVLW  2C
2582:  MOVLB  1
2584:  MOVWF  xB7
2586:  MOVLB  0
2588:  CALL   1AC4
258C:  MOVLW  20
258E:  MOVLB  1
2590:  MOVWF  xB7
2592:  MOVLB  0
2594:  CALL   1AC4
2598:  BRA    25DC
....................   else  
....................   	sprintf(buf, "FAIL Bit=%ld, ",pass_count); 
259A:  MOVLW  01
259C:  MOVLB  1
259E:  MOVWF  x05
25A0:  MOVLW  57
25A2:  MOVWF  x04
25A4:  MOVLW  7A
25A6:  MOVWF  FF6
25A8:  MOVLW  05
25AA:  MOVWF  FF7
25AC:  MOVLW  09
25AE:  MOVWF  xAA
25B0:  MOVLB  0
25B2:  CALL   1AE4
25B6:  MOVLW  10
25B8:  MOVWF  FE9
25BA:  MOVFF  2E,1AB
25BE:  MOVFF  2D,1AA
25C2:  RCALL  1E80
25C4:  MOVLW  2C
25C6:  MOVLB  1
25C8:  MOVWF  xB7
25CA:  MOVLB  0
25CC:  CALL   1AC4
25D0:  MOVLW  20
25D2:  MOVLB  1
25D4:  MOVWF  xB7
25D6:  MOVLB  0
25D8:  CALL   1AC4
....................   COM1_send_str(buf); 
25DC:  MOVLW  01
25DE:  MOVLB  1
25E0:  MOVWF  xAB
25E2:  MOVLW  57
25E4:  MOVWF  xAA
25E6:  MOVLB  0
25E8:  CALL   0CE2
....................  
....................  
....................   if(input(PLL_LD)) 
25EC:  BTFSS  F82.0
25EE:  BRA    2608
.................... 	sprintf(buf, "SYNTH LOCK=LOCK, "); 
25F0:  MOVLW  01
25F2:  MOVLB  1
25F4:  MOVWF  x05
25F6:  MOVLW  57
25F8:  MOVWF  x04
25FA:  MOVLW  8A
25FC:  MOVWF  FF6
25FE:  MOVLW  05
2600:  MOVWF  FF7
2602:  MOVLB  0
2604:  RCALL  1E60
2606:  BRA    261E
....................   else 
....................     sprintf(buf, "SYNTH LOCK=NOT LOCK, "); 
2608:  MOVLW  01
260A:  MOVLB  1
260C:  MOVWF  x05
260E:  MOVLW  57
2610:  MOVWF  x04
2612:  MOVLW  9C
2614:  MOVWF  FF6
2616:  MOVLW  05
2618:  MOVWF  FF7
261A:  MOVLB  0
261C:  RCALL  1E60
....................   COM1_send_str(buf); 
261E:  MOVLW  01
2620:  MOVLB  1
2622:  MOVWF  xAB
2624:  MOVLW  57
2626:  MOVWF  xAA
2628:  MOVLB  0
262A:  CALL   0CE2
....................  
....................   if(bit_mode == 1) 
262E:  MOVLB  1
2630:  DECFSZ x02,W
2632:  BRA    264C
....................   	sprintf(buf, "BIT MODE=START, "); 
2634:  MOVLW  01
2636:  MOVWF  x05
2638:  MOVLW  57
263A:  MOVWF  x04
263C:  MOVLW  B2
263E:  MOVWF  FF6
2640:  MOVLW  05
2642:  MOVWF  FF7
2644:  MOVLB  0
2646:  RCALL  1E60
2648:  BRA    2666
264A:  MOVLB  1
....................   else if(bit_mode == 0) 
264C:  MOVF   x02,F
264E:  BNZ   2668
....................   	sprintf(buf, "BIT MODE=STOP, "); 
2650:  MOVLW  01
2652:  MOVWF  x05
2654:  MOVLW  57
2656:  MOVWF  x04
2658:  MOVLW  C4
265A:  MOVWF  FF6
265C:  MOVLW  05
265E:  MOVWF  FF7
2660:  MOVLB  0
2662:  CALL   1E60
2666:  MOVLB  1
....................   COM1_send_str(buf); 
2668:  MOVLW  01
266A:  MOVWF  xAB
266C:  MOVLW  57
266E:  MOVWF  xAA
2670:  MOVLB  0
2672:  CALL   0CE2
....................  
....................   if(setup.power_level == 1) 
2676:  DECFSZ xAB,W
2678:  BRA    2698
267A:  MOVF   xAC,F
267C:  BNZ   2698
.................... 	sprintf(buf, "POWER MODE=HIGH, "); 
267E:  MOVLW  01
2680:  MOVLB  1
2682:  MOVWF  x05
2684:  MOVLW  57
2686:  MOVWF  x04
2688:  MOVLW  D4
268A:  MOVWF  FF6
268C:  MOVLW  05
268E:  MOVWF  FF7
2690:  MOVLB  0
2692:  CALL   1E60
2696:  BRA    26B0
....................   else 
....................     sprintf(buf, "POWER MODE=LOW, "); 
2698:  MOVLW  01
269A:  MOVLB  1
269C:  MOVWF  x05
269E:  MOVLW  57
26A0:  MOVWF  x04
26A2:  MOVLW  E6
26A4:  MOVWF  FF6
26A6:  MOVLW  05
26A8:  MOVWF  FF7
26AA:  MOVLB  0
26AC:  CALL   1E60
....................   COM1_send_str(buf); 
26B0:  MOVLW  01
26B2:  MOVLB  1
26B4:  MOVWF  xAB
26B6:  MOVLW  57
26B8:  MOVWF  xAA
26BA:  MOVLB  0
26BC:  CALL   0CE2
....................  
....................   if(auto_power)						//sample power_in and compare to PWR_IN_TRESHOLD, change setup.power_level ($P) 
26C0:  MOVLB  1
26C2:  MOVF   x03,F
26C4:  BZ    26E0
.................... 	sprintf(buf, "AUTO_POWER=1, "); 
26C6:  MOVLW  01
26C8:  MOVWF  x05
26CA:  MOVLW  57
26CC:  MOVWF  x04
26CE:  MOVLW  F8
26D0:  MOVWF  FF6
26D2:  MOVLW  05
26D4:  MOVWF  FF7
26D6:  MOVLB  0
26D8:  CALL   1E60
26DC:  BRA    26F6
26DE:  MOVLB  1
....................   else 
.................... 	sprintf(buf, "AUTO_POWER=0, "); 
26E0:  MOVLW  01
26E2:  MOVWF  x05
26E4:  MOVLW  57
26E6:  MOVWF  x04
26E8:  MOVLW  08
26EA:  MOVWF  FF6
26EC:  MOVLW  06
26EE:  MOVWF  FF7
26F0:  MOVLB  0
26F2:  CALL   1E60
....................   COM1_send_str(buf); 
26F6:  MOVLW  01
26F8:  MOVLB  1
26FA:  MOVWF  xAB
26FC:  MOVLW  57
26FE:  MOVWF  xAA
2700:  MOVLB  0
2702:  CALL   0CE2
....................  
.................... 	sprintf(buf, "MODULE TYPE=RX, "); 
2706:  MOVLW  01
2708:  MOVLB  1
270A:  MOVWF  x05
270C:  MOVLW  57
270E:  MOVWF  x04
2710:  MOVLW  18
2712:  MOVWF  FF6
2714:  MOVLW  06
2716:  MOVWF  FF7
2718:  MOVLB  0
271A:  CALL   1E60
....................   COM1_send_str(buf); 
271E:  MOVLW  01
2720:  MOVLB  1
2722:  MOVWF  xAB
2724:  MOVLW  57
2726:  MOVWF  xAA
2728:  MOVLB  0
272A:  CALL   0CE2
272E:  GOTO   330A (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
....................  bit set_power_level(void) 
....................   { 
....................   UINT idx; 
....................   idx = get_int(); 
*
1558:  RCALL  13BC
155A:  MOVFF  02,152
155E:  MOVFF  01,151
....................   if (idx < 2) 
1562:  MOVLB  1
1564:  MOVF   x52,F
1566:  BNZ   157C
1568:  MOVF   x51,W
156A:  SUBLW  01
156C:  BNC   157C
....................     { 
....................     setup.power_level = idx; 
156E:  MOVFF  152,AC
1572:  MOVFF  151,AB
....................     return 1; 
1576:  MOVLW  01
1578:  MOVWF  01
157A:  BRA    1580
....................     } 
....................   return 0; 
157C:  MOVLW  00
157E:  MOVWF  01
1580:  MOVLB  0
1582:  GOTO   2E38 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
....................   { 
....................   UCHAR chr, idx, addr; 
....................   ULONG freq; 
....................   UINT  value; 
....................   chr = 2; 
*
29AA:  MOVLW  02
29AC:  MOVLB  1
29AE:  MOVWF  x3A
....................   comm_ptr = 0; 
29B0:  MOVLB  0
29B2:  CLRF   xFF
....................   UINT year, week; 
....................   switch (toupper(get_char())) 
29B4:  CALL   1114
29B8:  MOVFF  02,152
29BC:  MOVFF  01,151
29C0:  MOVLB  1
29C2:  MOVF   x52,F
29C4:  BNZ   29CC
29C6:  MOVF   x51,W
29C8:  SUBLW  60
29CA:  BC    29DC
29CC:  MOVF   x52,F
29CE:  BNZ   29DC
29D0:  MOVF   x51,W
29D2:  SUBLW  7A
29D4:  BNC   29DC
29D6:  MOVF   x51,W
29D8:  ANDLW  DF
29DA:  BRA    29DE
29DC:  MOVF   x51,W
29DE:  XORLW  48
29E0:  MOVLB  0
29E2:  BZ    2A42
29E4:  XORLW  77
29E6:  BZ    2A42
29E8:  XORLW  79
29EA:  BZ    2A4E
29EC:  XORLW  09
29EE:  BTFSC  FD8.2
29F0:  BRA    2B22
29F2:  XORLW  1B
29F4:  BTFSC  FD8.2
29F6:  BRA    2C00
29F8:  XORLW  16
29FA:  BTFSC  FD8.2
29FC:  BRA    2CAC
29FE:  XORLW  12
2A00:  BTFSC  FD8.2
2A02:  BRA    2D8C
2A04:  XORLW  1C
2A06:  BTFSC  FD8.2
2A08:  BRA    2E46
2A0A:  XORLW  0D
2A0C:  BTFSC  FD8.2
2A0E:  BRA    2F2A
2A10:  XORLW  12
2A12:  BTFSC  FD8.2
2A14:  BRA    2F8A
2A16:  XORLW  62
2A18:  BTFSC  FD8.2
2A1A:  GOTO   320A
2A1E:  XORLW  03
2A20:  BTFSC  FD8.2
2A22:  GOTO   3276
2A26:  XORLW  01
2A28:  BTFSC  FD8.2
2A2A:  GOTO   32DE
2A2E:  XORLW  62
2A30:  BTFSC  FD8.2
2A32:  GOTO   32EC
2A36:  XORLW  03
2A38:  BTFSC  FD8.2
2A3A:  GOTO   32F2
2A3E:  GOTO   32F8
....................     { 
....................     case 'H':  
....................     case '?': 
....................       list_help(); 
2A42:  GOTO   1130
....................       return 0; 
2A46:  MOVLW  00
2A48:  MOVWF  01
2A4A:  GOTO   330E
....................  // break; 
....................  
....................     case 'F': 
....................       freq = get_frequency(); 
2A4E:  GOTO   147E
2A52:  MOVLB  1
2A54:  CLRF   x40
2A56:  CLRF   x3F
2A58:  MOVFF  02,13E
2A5C:  MOVFF  01,13D
.................... 		if (freq >= FRQ_HI_BOT && freq <= FRQ_HI_TOP) 
2A60:  MOVF   x40,F
2A62:  BNZ   2A78
2A64:  MOVF   x3F,F
2A66:  BNZ   2A78
2A68:  MOVF   x3E,W
2A6A:  SUBLW  15
2A6C:  BC    2AE2
2A6E:  XORLW  FF
2A70:  BNZ   2A78
2A72:  MOVF   x3D,W
2A74:  SUBLW  11
2A76:  BC    2AE2
2A78:  MOVF   x40,F
2A7A:  BNZ   2AE2
2A7C:  MOVF   x3F,F
2A7E:  BNZ   2AE2
2A80:  MOVF   x3E,W
2A82:  SUBLW  16
2A84:  BNC   2AE2
2A86:  BNZ   2A8E
2A88:  MOVF   x3D,W
2A8A:  SUBLW  DA
2A8C:  BNC   2AE2
....................                { 
....................          		setup.frequency = freq; 
2A8E:  MOVFF  13E,AA
2A92:  MOVFF  13D,A9
....................         	 	PLL_compute_freq_parameters(freq * 10); 
2A96:  MOVFF  140,16A
2A9A:  MOVFF  13F,169
2A9E:  MOVFF  13E,168
2AA2:  MOVFF  13D,167
2AA6:  CLRF   x6E
2AA8:  CLRF   x6D
2AAA:  CLRF   x6C
2AAC:  MOVLW  0A
2AAE:  MOVWF  x6B
2AB0:  MOVLB  0
2AB2:  CALL   0914
2AB6:  MOVFF  01,152
2ABA:  MOVFF  00,151
2ABE:  MOVFF  01,156
2AC2:  MOVFF  00,155
2AC6:  CALL   0A02
....................          		PLL_update();              
2ACA:  CALL   0B98
....................          		allow_write = 2975; 
2ACE:  MOVLW  0B
2AD0:  MOVWF  xEA
2AD2:  MOVLW  9F
2AD4:  MOVWF  xE9
....................          		write_setup(); 
2AD6:  CALL   1508
....................          		update_all(); 
2ADA:  CALL   0C88
....................          		} 
2ADE:  BRA    2B1E
2AE0:  MOVLB  1
.................... 		else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
2AE2:  MOVLW  01
2AE4:  MOVWF  FEA
2AE6:  MOVLW  47
2AE8:  MOVWF  FE9
2AEA:  MOVFF  FF2,151
2AEE:  BCF    FF2.7
2AF0:  MOVLW  0A
2AF2:  MOVWF  01
2AF4:  CLRF   FF7
2AF6:  MOVLW  00
2AF8:  MOVLB  0
2AFA:  CALL   035A
2AFE:  TBLRD*-
2B00:  TBLRD*+
2B02:  MOVFF  FF5,FEE
2B06:  DECFSZ 01,F
2B08:  BRA    2B00
2B0A:  MOVLB  1
2B0C:  BTFSC  x51.7
2B0E:  BSF    FF2.7
2B10:  MOVLW  01
2B12:  MOVWF  xAB
2B14:  MOVLW  47
2B16:  MOVWF  xAA
2B18:  MOVLB  0
2B1A:  CALL   0CE2
.................... 		break; 
2B1E:  GOTO   330A
.................... /*///////////////////in case of one software version for high and low frequence 
.................... 		if(setup.power_level) 
.................... 		{ 
....................       		if (freq >= FRQ_HI_BOT && freq <= FRQ_HI_TOP) 
....................                { 
....................          		setup.frequency = freq; 
....................         	 	PLL_compute_freq_parameters(freq * 10); 
....................          		PLL_update();              
....................          		allow_write = 2975; 
....................          		write_setup(); 
....................          		update_all(); 
....................          		} 
....................       			else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
....................   		} 
.................... 		else 
.................... 		{ 
.................... 			    if (freq >= FRQ_LO_BOT && freq <= FRQ_LO_TOP) 
....................                { 
....................          		setup.frequency = freq; 
....................         	 	PLL_compute_freq_parameters(freq * 10); 
....................          		PLL_update();              
....................          		allow_write = 2975; 
....................          		write_setup(); 
....................          		update_all(); 
....................          		} 
....................       			else 
....................          		COM1_send_str("\r\n$FAIL\r\n"); 
.................... 		} 
....................  
....................       break; 
.................... */ 
....................  
....................     case 'O': 
....................       if (toupper(get_char()) == 'N') 
2B22:  CALL   1114
2B26:  MOVFF  02,152
2B2A:  MOVFF  01,151
2B2E:  MOVLB  1
2B30:  MOVF   x52,F
2B32:  BNZ   2B3A
2B34:  MOVF   x51,W
2B36:  SUBLW  60
2B38:  BC    2B4A
2B3A:  MOVF   x52,F
2B3C:  BNZ   2B4A
2B3E:  MOVF   x51,W
2B40:  SUBLW  7A
2B42:  BNC   2B4A
2B44:  MOVF   x51,W
2B46:  ANDLW  DF
2B48:  BRA    2B4C
2B4A:  MOVF   x51,W
2B4C:  SUBLW  4E
2B4E:  BNZ   2BC0
....................         { 
....................         idx = get_int(); 
2B50:  MOVLB  0
2B52:  CALL   13BC
2B56:  MOVFF  01,13B
....................         if (idx <2) 
2B5A:  MOVLB  1
2B5C:  MOVF   x3B,W
2B5E:  SUBLW  01
2B60:  BNC   2B80
....................           { 
....................           if (idx) 
2B62:  MOVF   x3B,F
2B64:  BZ    2B74
....................             { 
.................... 			on_command = 1; 
2B66:  MOVLW  01
2B68:  MOVWF  x01
.................... 			PLL_update(); 
2B6A:  MOVLB  0
2B6C:  CALL   0B98
....................             } 
2B70:  BRA    2B7C
2B72:  MOVLB  1
....................           else 
....................             { 
....................   			on_command = 0; 
2B74:  CLRF   x01
.................... 			PLL_mute(); 
2B76:  MOVLB  0
2B78:  GOTO   1530
....................             } 
....................           } 
2B7C:  BRA    2BBC
2B7E:  MOVLB  1
....................       else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2B80:  MOVLW  01
2B82:  MOVWF  FEA
2B84:  MOVLW  47
2B86:  MOVWF  FE9
2B88:  MOVFF  FF2,151
2B8C:  BCF    FF2.7
2B8E:  MOVLW  0A
2B90:  MOVWF  01
2B92:  CLRF   FF7
2B94:  MOVLW  00
2B96:  MOVLB  0
2B98:  CALL   035A
2B9C:  TBLRD*-
2B9E:  TBLRD*+
2BA0:  MOVFF  FF5,FEE
2BA4:  DECFSZ 01,F
2BA6:  BRA    2B9E
2BA8:  MOVLB  1
2BAA:  BTFSC  x51.7
2BAC:  BSF    FF2.7
2BAE:  MOVLW  01
2BB0:  MOVWF  xAB
2BB2:  MOVLW  47
2BB4:  MOVWF  xAA
2BB6:  MOVLB  0
2BB8:  CALL   0CE2
....................       } 
2BBC:  BRA    2BFC
2BBE:  MOVLB  1
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n");          
2BC0:  MOVLW  01
2BC2:  MOVWF  FEA
2BC4:  MOVLW  47
2BC6:  MOVWF  FE9
2BC8:  MOVFF  FF2,151
2BCC:  BCF    FF2.7
2BCE:  MOVLW  0A
2BD0:  MOVWF  01
2BD2:  CLRF   FF7
2BD4:  MOVLW  00
2BD6:  MOVLB  0
2BD8:  CALL   035A
2BDC:  TBLRD*-
2BDE:  TBLRD*+
2BE0:  MOVFF  FF5,FEE
2BE4:  DECFSZ 01,F
2BE6:  BRA    2BDE
2BE8:  MOVLB  1
2BEA:  BTFSC  x51.7
2BEC:  BSF    FF2.7
2BEE:  MOVLW  01
2BF0:  MOVWF  xAB
2BF2:  MOVLW  47
2BF4:  MOVWF  xAA
2BF6:  MOVLB  0
2BF8:  CALL   0CE2
....................       break; 
2BFC:  GOTO   330A
....................  
.................... 	case 'T':							//command TR - return T in case of TX, return R in case of RX 
.................... 	  if (toupper(get_char()) == 'R') 
2C00:  CALL   1114
2C04:  MOVFF  02,152
2C08:  MOVFF  01,151
2C0C:  MOVLB  1
2C0E:  MOVF   x52,F
2C10:  BNZ   2C18
2C12:  MOVF   x51,W
2C14:  SUBLW  60
2C16:  BC    2C28
2C18:  MOVF   x52,F
2C1A:  BNZ   2C28
2C1C:  MOVF   x51,W
2C1E:  SUBLW  7A
2C20:  BNC   2C28
2C22:  MOVF   x51,W
2C24:  ANDLW  DF
2C26:  BRA    2C2A
2C28:  MOVF   x51,W
2C2A:  SUBLW  52
2C2C:  BNZ   2C6E
.................... 		{ 
.................... 		COM1_send_str("\r\n$R\r\n"); 
2C2E:  MOVLW  01
2C30:  MOVWF  FEA
2C32:  MOVLW  47
2C34:  MOVWF  FE9
2C36:  MOVFF  FF2,151
2C3A:  BCF    FF2.7
2C3C:  MOVLW  07
2C3E:  MOVWF  01
2C40:  CLRF   FF7
2C42:  MOVLW  00
2C44:  MOVLB  0
2C46:  CALL   037E
2C4A:  TBLRD*-
2C4C:  TBLRD*+
2C4E:  MOVFF  FF5,FEE
2C52:  DECFSZ 01,F
2C54:  BRA    2C4C
2C56:  MOVLB  1
2C58:  BTFSC  x51.7
2C5A:  BSF    FF2.7
2C5C:  MOVLW  01
2C5E:  MOVWF  xAB
2C60:  MOVLW  47
2C62:  MOVWF  xAA
2C64:  MOVLB  0
2C66:  CALL   0CE2
.................... 		}    
2C6A:  BRA    2CAA
2C6C:  MOVLB  1
.................... 	  else 
.................... 		COM1_send_str("\r\n$FAIL\r\n"); 
2C6E:  MOVLW  01
2C70:  MOVWF  FEA
2C72:  MOVLW  47
2C74:  MOVWF  FE9
2C76:  MOVFF  FF2,151
2C7A:  BCF    FF2.7
2C7C:  MOVLW  0A
2C7E:  MOVWF  01
2C80:  CLRF   FF7
2C82:  MOVLW  00
2C84:  MOVLB  0
2C86:  CALL   035A
2C8A:  TBLRD*-
2C8C:  TBLRD*+
2C8E:  MOVFF  FF5,FEE
2C92:  DECFSZ 01,F
2C94:  BRA    2C8C
2C96:  MOVLB  1
2C98:  BTFSC  x51.7
2C9A:  BSF    FF2.7
2C9C:  MOVLW  01
2C9E:  MOVWF  xAB
2CA0:  MOVLW  47
2CA2:  MOVWF  xAA
2CA4:  MOVLB  0
2CA6:  CALL   0CE2
.................... 		break; 
2CAA:  BRA    330A
....................  
....................  
....................  
.................... 	case 'B': 
....................       if (toupper(get_char()) == 'M') 
2CAC:  CALL   1114
2CB0:  MOVFF  02,152
2CB4:  MOVFF  01,151
2CB8:  MOVLB  1
2CBA:  MOVF   x52,F
2CBC:  BNZ   2CC4
2CBE:  MOVF   x51,W
2CC0:  SUBLW  60
2CC2:  BC    2CD4
2CC4:  MOVF   x52,F
2CC6:  BNZ   2CD4
2CC8:  MOVF   x51,W
2CCA:  SUBLW  7A
2CCC:  BNC   2CD4
2CCE:  MOVF   x51,W
2CD0:  ANDLW  DF
2CD2:  BRA    2CD6
2CD4:  MOVF   x51,W
2CD6:  SUBLW  4D
2CD8:  BNZ   2D4A
....................         { 
....................         idx = get_int(); 
2CDA:  MOVLB  0
2CDC:  CALL   13BC
2CE0:  MOVFF  01,13B
....................         if (idx <2) 
2CE4:  MOVLB  1
2CE6:  MOVF   x3B,W
2CE8:  SUBLW  01
2CEA:  BNC   2D0A
....................           { 
....................           if (idx) 
2CEC:  MOVF   x3B,F
2CEE:  BZ    2D02
....................             { 
....................             fpga_first_val = 1; 
2CF0:  CLRF   30
2CF2:  MOVLW  01
2CF4:  MOVWF  2F
.................... 			pass_count = 0; 
2CF6:  CLRF   2E
2CF8:  CLRF   2D
.................... 			bit_mode = 1; 
2CFA:  MOVWF  x02
.................... 			output_high(BIT_MODE_EN); 
2CFC:  BSF    F8C.3
.................... 			enable_interrupts(INT_RDA2);  
2CFE:  BSF    FA3.5
....................             } 
2D00:  BRA    2D08
....................           else 
....................             { 
....................             bit_mode = 0; 
2D02:  CLRF   x02
.................... 			output_low(BIT_MODE_EN); 
2D04:  BCF    F8C.3
.................... 			disable_interrupts(INT_RDA2);  
2D06:  BCF    FA3.5
....................             } 
....................           } 
2D08:  BRA    2D48
....................       else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2D0A:  MOVLW  01
2D0C:  MOVWF  FEA
2D0E:  MOVLW  47
2D10:  MOVWF  FE9
2D12:  MOVFF  FF2,151
2D16:  BCF    FF2.7
2D18:  MOVLW  0A
2D1A:  MOVWF  01
2D1C:  CLRF   FF7
2D1E:  MOVLW  00
2D20:  MOVLB  0
2D22:  CALL   035A
2D26:  TBLRD*-
2D28:  TBLRD*+
2D2A:  MOVFF  FF5,FEE
2D2E:  DECFSZ 01,F
2D30:  BRA    2D28
2D32:  MOVLB  1
2D34:  BTFSC  x51.7
2D36:  BSF    FF2.7
2D38:  MOVLW  01
2D3A:  MOVWF  xAB
2D3C:  MOVLW  47
2D3E:  MOVWF  xAA
2D40:  MOVLB  0
2D42:  CALL   0CE2
2D46:  MOVLB  1
....................       } 
2D48:  BRA    2D88
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n");          
2D4A:  MOVLW  01
2D4C:  MOVWF  FEA
2D4E:  MOVLW  47
2D50:  MOVWF  FE9
2D52:  MOVFF  FF2,151
2D56:  BCF    FF2.7
2D58:  MOVLW  0A
2D5A:  MOVWF  01
2D5C:  CLRF   FF7
2D5E:  MOVLW  00
2D60:  MOVLB  0
2D62:  CALL   035A
2D66:  TBLRD*-
2D68:  TBLRD*+
2D6A:  MOVFF  FF5,FEE
2D6E:  DECFSZ 01,F
2D70:  BRA    2D68
2D72:  MOVLB  1
2D74:  BTFSC  x51.7
2D76:  BSF    FF2.7
2D78:  MOVLW  01
2D7A:  MOVWF  xAB
2D7C:  MOVLW  47
2D7E:  MOVWF  xAA
2D80:  MOVLB  0
2D82:  CALL   0CE2
2D86:  MOVLB  1
....................       break; 
2D88:  MOVLB  0
2D8A:  BRA    330A
....................  
....................  
....................     case 'P': 
....................       if (toupper(peek_char()) == 'S') // $PS command 
2D8C:  CALL   134C
2D90:  MOVFF  02,152
2D94:  MOVFF  01,151
2D98:  MOVLB  1
2D9A:  MOVF   x52,F
2D9C:  BNZ   2DA4
2D9E:  MOVF   x51,W
2DA0:  SUBLW  60
2DA2:  BC    2DB4
2DA4:  MOVF   x52,F
2DA6:  BNZ   2DB4
2DA8:  MOVF   x51,W
2DAA:  SUBLW  7A
2DAC:  BNC   2DB4
2DAE:  MOVF   x51,W
2DB0:  ANDLW  DF
2DB2:  BRA    2DB6
2DB4:  MOVF   x51,W
2DB6:  SUBLW  53
2DB8:  BNZ   2E32
....................         { 
....................         get_char(); 				// get rid of 'S' 
2DBA:  MOVLB  0
2DBC:  CALL   1114
....................         idx = get_int(); 
2DC0:  CALL   13BC
2DC4:  MOVFF  01,13B
....................               if (idx <2) 
2DC8:  MOVLB  1
2DCA:  MOVF   x3B,W
2DCC:  SUBLW  01
2DCE:  BNC   2DF2
....................                { 
....................                 if (idx) 
2DD0:  MOVF   x3B,F
2DD2:  BZ    2DDA
....................                  pa_command  = 1; 
2DD4:  MOVLW  01
2DD6:  MOVWF  x00
2DD8:  BRA    2DDC
....................                 else 
....................                  pa_command  = 0; 
2DDA:  CLRF   x00
....................  
....................                  setup.power_amp = pa_command;   
2DDC:  MOVFF  100,A8
.................... 	    		 allow_write = 2975;           
2DE0:  MOVLW  0B
2DE2:  MOVLB  0
2DE4:  MOVWF  xEA
2DE6:  MOVLW  9F
2DE8:  MOVWF  xE9
....................          		 write_setup(); 
2DEA:  CALL   1508
....................                } 
2DEE:  BRA    2E2E
2DF0:  MOVLB  1
....................          else   
....................             COM1_send_str("\r\n$FAIL\r\n");                
2DF2:  MOVLW  01
2DF4:  MOVWF  FEA
2DF6:  MOVLW  47
2DF8:  MOVWF  FE9
2DFA:  MOVFF  FF2,151
2DFE:  BCF    FF2.7
2E00:  MOVLW  0A
2E02:  MOVWF  01
2E04:  CLRF   FF7
2E06:  MOVLW  00
2E08:  MOVLB  0
2E0A:  CALL   035A
2E0E:  TBLRD*-
2E10:  TBLRD*+
2E12:  MOVFF  FF5,FEE
2E16:  DECFSZ 01,F
2E18:  BRA    2E10
2E1A:  MOVLB  1
2E1C:  BTFSC  x51.7
2E1E:  BSF    FF2.7
2E20:  MOVLW  01
2E22:  MOVWF  xAB
2E24:  MOVLW  47
2E26:  MOVWF  xAA
2E28:  MOVLB  0
2E2A:  CALL   0CE2
....................          } 
2E2E:  BRA    2E38
2E30:  MOVLB  1
....................          else 							  // $P command 
....................            set_power_level(); 
2E32:  MOVLB  0
2E34:  GOTO   1558
.................... 		   	allow_write = 2975;           
2E38:  MOVLW  0B
2E3A:  MOVWF  xEA
2E3C:  MOVLW  9F
2E3E:  MOVWF  xE9
....................          	write_setup(); 
2E40:  CALL   1508
....................          break; 
2E44:  BRA    330A
....................  
....................     case 'L': 
....................       if (toupper(get_char()) == 'D') 
2E46:  CALL   1114
2E4A:  MOVFF  02,152
2E4E:  MOVFF  01,151
2E52:  MOVLB  1
2E54:  MOVF   x52,F
2E56:  BNZ   2E5E
2E58:  MOVF   x51,W
2E5A:  SUBLW  60
2E5C:  BC    2E6E
2E5E:  MOVF   x52,F
2E60:  BNZ   2E6E
2E62:  MOVF   x51,W
2E64:  SUBLW  7A
2E66:  BNC   2E6E
2E68:  MOVF   x51,W
2E6A:  ANDLW  DF
2E6C:  BRA    2E70
2E6E:  MOVF   x51,W
2E70:  SUBLW  44
2E72:  BNZ   2EEC
....................         { 
....................         idx = get_int(); 
2E74:  MOVLB  0
2E76:  CALL   13BC
2E7A:  MOVFF  01,13B
....................         if (idx <2) 
2E7E:  MOVLB  1
2E80:  MOVF   x3B,W
2E82:  SUBLW  01
2E84:  BNC   2EAC
....................         { 
....................           if (idx) 
2E86:  MOVF   x3B,F
2E88:  BZ    2E96
....................             { 
....................             setup.meter_backlight = 1; 
2E8A:  MOVLW  01
2E8C:  MOVLB  0
2E8E:  MOVWF  xB3
....................             output_high(MET_EN); 
2E90:  BSF    F8A.3
....................             } 
2E92:  BRA    2E9C
2E94:  MOVLB  1
....................           else 
....................             { 
....................             setup.meter_backlight = 0; 
2E96:  MOVLB  0
2E98:  CLRF   xB3
....................             output_low(MET_EN); 
2E9A:  BCF    F8A.3
....................             } 
.................... 			allow_write = 2975;           
2E9C:  MOVLW  0B
2E9E:  MOVWF  xEA
2EA0:  MOVLW  9F
2EA2:  MOVWF  xE9
....................          	write_setup(); 
2EA4:  CALL   1508
....................          } 
2EA8:  BRA    2EE8
2EAA:  MOVLB  1
....................    else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2EAC:  MOVLW  01
2EAE:  MOVWF  FEA
2EB0:  MOVLW  47
2EB2:  MOVWF  FE9
2EB4:  MOVFF  FF2,151
2EB8:  BCF    FF2.7
2EBA:  MOVLW  0A
2EBC:  MOVWF  01
2EBE:  CLRF   FF7
2EC0:  MOVLW  00
2EC2:  MOVLB  0
2EC4:  CALL   035A
2EC8:  TBLRD*-
2ECA:  TBLRD*+
2ECC:  MOVFF  FF5,FEE
2ED0:  DECFSZ 01,F
2ED2:  BRA    2ECA
2ED4:  MOVLB  1
2ED6:  BTFSC  x51.7
2ED8:  BSF    FF2.7
2EDA:  MOVLW  01
2EDC:  MOVWF  xAB
2EDE:  MOVLW  47
2EE0:  MOVWF  xAA
2EE2:  MOVLB  0
2EE4:  CALL   0CE2
....................         } 
2EE8:  BRA    2F28
2EEA:  MOVLB  1
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
2EEC:  MOVLW  01
2EEE:  MOVWF  FEA
2EF0:  MOVLW  47
2EF2:  MOVWF  FE9
2EF4:  MOVFF  FF2,151
2EF8:  BCF    FF2.7
2EFA:  MOVLW  0A
2EFC:  MOVWF  01
2EFE:  CLRF   FF7
2F00:  MOVLW  00
2F02:  MOVLB  0
2F04:  CALL   035A
2F08:  TBLRD*-
2F0A:  TBLRD*+
2F0C:  MOVFF  FF5,FEE
2F10:  DECFSZ 01,F
2F12:  BRA    2F0A
2F14:  MOVLB  1
2F16:  BTFSC  x51.7
2F18:  BSF    FF2.7
2F1A:  MOVLW  01
2F1C:  MOVWF  xAB
2F1E:  MOVLW  47
2F20:  MOVWF  xAA
2F22:  MOVLB  0
2F24:  CALL   0CE2
....................       break; 
2F28:  BRA    330A
....................  
.................... 	case 'A':							//command to choose automatic or manual power_level 
.................... 		idx = get_int(); 
2F2A:  CALL   13BC
2F2E:  MOVFF  01,13B
.................... 		if (idx <2) 
2F32:  MOVLB  1
2F34:  MOVF   x3B,W
2F36:  SUBLW  01
2F38:  BNC   2F48
....................         { 
....................           if (idx) 
2F3A:  MOVF   x3B,F
2F3C:  BZ    2F44
.................... 			auto_power = 1; 
2F3E:  MOVLW  01
2F40:  MOVWF  x03
2F42:  BRA    2F46
.................... 		  else 
.................... 		  	auto_power = 0; 
2F44:  CLRF   x03
.................... 		} 
2F46:  BRA    2F86
.................... 		else 
....................          COM1_send_str("\r\n$FAIL\r\n"); 
2F48:  MOVLW  01
2F4A:  MOVWF  FEA
2F4C:  MOVLW  47
2F4E:  MOVWF  FE9
2F50:  MOVFF  FF2,151
2F54:  BCF    FF2.7
2F56:  MOVLW  0A
2F58:  MOVWF  01
2F5A:  CLRF   FF7
2F5C:  MOVLW  00
2F5E:  MOVLB  0
2F60:  CALL   035A
2F64:  TBLRD*-
2F66:  TBLRD*+
2F68:  MOVFF  FF5,FEE
2F6C:  DECFSZ 01,F
2F6E:  BRA    2F66
2F70:  MOVLB  1
2F72:  BTFSC  x51.7
2F74:  BSF    FF2.7
2F76:  MOVLW  01
2F78:  MOVWF  xAB
2F7A:  MOVLW  47
2F7C:  MOVWF  xAA
2F7E:  MOVLB  0
2F80:  CALL   0CE2
2F84:  MOVLB  1
.................... 		break; 
2F86:  MOVLB  0
2F88:  BRA    330A
....................  
.................... 	 
....................     case 'S': 			// set tables 
....................       skip_spc(); 
2F8A:  CALL   130C
....................       idx = get_char(); // get table designator 
2F8E:  CALL   1114
2F92:  MOVFF  01,13B
....................       addr = get_int(); // get table index 
2F96:  CALL   13BC
2F9A:  MOVFF  01,13C
....................       value = get_int(); // get value to put into table 
2F9E:  CALL   13BC
2FA2:  MOVFF  02,142
2FA6:  MOVFF  01,141
....................       switch (toupper(idx)) 
2FAA:  MOVLB  1
2FAC:  MOVF   x3B,W
2FAE:  SUBLW  60
2FB0:  BC    2FBE
2FB2:  MOVF   x3B,W
2FB4:  SUBLW  7A
2FB6:  BNC   2FBE
2FB8:  MOVF   x3B,W
2FBA:  ANDLW  DF
2FBC:  BRA    2FC0
2FBE:  MOVF   x3B,W
2FC0:  XORLW  4D
2FC2:  MOVLB  0
2FC4:  BZ    2FD8
2FC6:  XORLW  0B
2FC8:  BZ    3092
2FCA:  XORLW  07
2FCC:  BTFSC  FD8.2
2FCE:  BRA    313E
2FD0:  XORLW  17
2FD2:  BTFSC  FD8.2
2FD4:  BRA    31F8
2FD6:  BRA    3208
....................         { 
.................... /*		10/7/18 not used 
....................         case 'N': // negative voltage 
....................                 if (addr <2 ) 
....................                     { 
....................                     value = value * 0.2048;					//read DAC values in mv 
.................... 					setup.negative_voltage[addr] = value; 
....................                   	} 
....................                else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
....................  
....................           break; 
.................... */ 
.................... /*		10/7/18 not used 
....................         case 'P': // positive voltage 
....................              if (addr <2) 
....................               { 
....................               	value = value * 0.2048;					//read DAC values in mv 
.................... 				setup.power_in[addr] = value; 
....................               } 
....................            else 
....................               COM1_send_str("\r\n$FAIL\r\n"); 
....................           break; 
.................... */ 
.................... 		case 'M': //  
....................           if (addr < 2) 
2FD8:  MOVLB  1
2FDA:  MOVF   x3C,W
2FDC:  SUBLW  01
2FDE:  BNC   3050
....................          { 
.................... 			 
.................... 			value = value * 0.2048;				//(dacval*5v)/1024 => 1mv = 0.2048 
2FE0:  MOVFF  142,1B3
2FE4:  MOVFF  141,1B2
2FE8:  MOVLB  0
2FEA:  CALL   1586
2FEE:  MOVFF  03,1BA
2FF2:  MOVFF  02,1B9
2FF6:  MOVFF  01,1B8
2FFA:  MOVFF  00,1B7
2FFE:  MOVLW  17
3000:  MOVLB  1
3002:  MOVWF  xBE
3004:  MOVLW  B7
3006:  MOVWF  xBD
3008:  MOVLW  51
300A:  MOVWF  xBC
300C:  MOVLW  7C
300E:  MOVWF  xBB
3010:  MOVLB  0
3012:  CALL   15BC
3016:  MOVFF  03,154
301A:  MOVFF  02,153
301E:  MOVFF  01,152
3022:  MOVFF  00,151
3026:  CALL   16B2
302A:  MOVFF  02,142
302E:  MOVFF  01,141
....................             setup.monitor_ctrl[addr] = value; 
3032:  BCF    FD8.0
3034:  MOVLB  1
3036:  RLCF   x3C,W
3038:  CLRF   03
303A:  ADDLW  AD
303C:  MOVWF  FE9
303E:  MOVLW  00
3040:  ADDWFC 03,W
3042:  MOVWF  FEA
3044:  MOVFF  142,FEC
3048:  MOVF   FED,F
304A:  MOVFF  141,FEF
....................          } 
304E:  BRA    308E
....................             else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
3050:  MOVLW  01
3052:  MOVWF  FEA
3054:  MOVLW  47
3056:  MOVWF  FE9
3058:  MOVFF  FF2,151
305C:  BCF    FF2.7
305E:  MOVLW  0A
3060:  MOVWF  01
3062:  CLRF   FF7
3064:  MOVLW  00
3066:  MOVLB  0
3068:  CALL   035A
306C:  TBLRD*-
306E:  TBLRD*+
3070:  MOVFF  FF5,FEE
3074:  DECFSZ 01,F
3076:  BRA    306E
3078:  MOVLB  1
307A:  BTFSC  x51.7
307C:  BSF    FF2.7
307E:  MOVLW  01
3080:  MOVWF  xAB
3082:  MOVLW  47
3084:  MOVWF  xAA
3086:  MOVLB  0
3088:  CALL   0CE2
308C:  MOVLB  1
....................           break; 
308E:  MOVLB  0
3090:  BRA    3208
....................  
.................... /*			10/7/18 not used 
....................         case 'R': // rev table 
....................          if (toupper(get_char()) == 'R') 
....................          { 
....................             setup.reverse = value; 
....................          } 
....................          else 
....................             COM1_send_str("\r\n$FAIL\r\n"); 
....................           break; 
.................... */ 
....................         case 'F': // rssi table 
....................                if (addr < 12) 
3092:  MOVLB  1
3094:  MOVF   x3C,W
3096:  SUBLW  0B
3098:  BNC   30FC
....................                  { 
....................                  setup.rssi_table[addr][0] = value; 
309A:  MOVF   x3C,W
309C:  MULLW  04
309E:  MOVF   FF3,W
30A0:  CLRF   03
30A2:  ADDLW  B9
30A4:  MOVWF  FE9
30A6:  MOVLW  00
30A8:  ADDWFC 03,W
30AA:  MOVWF  FEA
30AC:  MOVFF  142,FEC
30B0:  MOVF   FED,F
30B2:  MOVFF  141,FEF
....................                  value = get_int(); 
30B6:  MOVLB  0
30B8:  CALL   13BC
30BC:  MOVFF  02,142
30C0:  MOVFF  01,141
....................                  setup.rssi_table[addr][1] = value; 
30C4:  MOVLB  1
30C6:  MOVF   x3C,W
30C8:  MULLW  04
30CA:  MOVF   FF3,W
30CC:  CLRF   03
30CE:  ADDLW  11
30D0:  MOVWF  x51
30D2:  MOVLW  00
30D4:  ADDWFC 03,W
30D6:  MOVWF  x52
30D8:  MOVLW  02
30DA:  ADDWF  x51,W
30DC:  MOVWF  01
30DE:  MOVLW  00
30E0:  ADDWFC x52,W
30E2:  MOVWF  03
30E4:  MOVF   01,W
30E6:  ADDLW  A8
30E8:  MOVWF  FE9
30EA:  MOVLW  00
30EC:  ADDWFC 03,W
30EE:  MOVWF  FEA
30F0:  MOVFF  142,FEC
30F4:  MOVF   FED,F
30F6:  MOVFF  141,FEF
....................                  } 
30FA:  BRA    313A
....................              else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
30FC:  MOVLW  01
30FE:  MOVWF  FEA
3100:  MOVLW  47
3102:  MOVWF  FE9
3104:  MOVFF  FF2,151
3108:  BCF    FF2.7
310A:  MOVLW  0A
310C:  MOVWF  01
310E:  CLRF   FF7
3110:  MOVLW  00
3112:  MOVLB  0
3114:  CALL   035A
3118:  TBLRD*-
311A:  TBLRD*+
311C:  MOVFF  FF5,FEE
3120:  DECFSZ 01,F
3122:  BRA    311A
3124:  MOVLB  1
3126:  BTFSC  x51.7
3128:  BSF    FF2.7
312A:  MOVLW  01
312C:  MOVWF  xAB
312E:  MOVLW  47
3130:  MOVWF  xAA
3132:  MOVLB  0
3134:  CALL   0CE2
3138:  MOVLB  1
....................             break; 
313A:  MOVLB  0
313C:  BRA    3208
....................  
....................  
....................         case 'A': // automatic mode address 0 - high treshold, 1 - low treshold table 
....................                if (addr < 2) 
313E:  MOVLB  1
3140:  MOVF   x3C,W
3142:  SUBLW  01
3144:  BNC   31B6
....................                  { 
....................                  	value = value * 0.3103; 
3146:  MOVFF  142,1B3
314A:  MOVFF  141,1B2
314E:  MOVLB  0
3150:  CALL   1586
3154:  MOVFF  03,1BA
3158:  MOVFF  02,1B9
315C:  MOVFF  01,1B8
3160:  MOVFF  00,1B7
3164:  MOVLW  A4
3166:  MOVLB  1
3168:  MOVWF  xBE
316A:  MOVLW  DF
316C:  MOVWF  xBD
316E:  MOVLW  1E
3170:  MOVWF  xBC
3172:  MOVLW  7D
3174:  MOVWF  xBB
3176:  MOVLB  0
3178:  CALL   15BC
317C:  MOVFF  03,154
3180:  MOVFF  02,153
3184:  MOVFF  01,152
3188:  MOVFF  00,151
318C:  CALL   16B2
3190:  MOVFF  02,142
3194:  MOVFF  01,141
.................... 					setup.auto_mode_tresh[addr] = value; 
3198:  BCF    FD8.0
319A:  MOVLB  1
319C:  RLCF   x3C,W
319E:  CLRF   03
31A0:  ADDLW  E5
31A2:  MOVWF  FE9
31A4:  MOVLW  00
31A6:  ADDWFC 03,W
31A8:  MOVWF  FEA
31AA:  MOVFF  142,FEC
31AE:  MOVF   FED,F
31B0:  MOVFF  141,FEF
....................                  } 
31B4:  BRA    31F4
....................              else 
....................                  COM1_send_str("\r\n$FAIL\r\n"); 
31B6:  MOVLW  01
31B8:  MOVWF  FEA
31BA:  MOVLW  47
31BC:  MOVWF  FE9
31BE:  MOVFF  FF2,151
31C2:  BCF    FF2.7
31C4:  MOVLW  0A
31C6:  MOVWF  01
31C8:  CLRF   FF7
31CA:  MOVLW  00
31CC:  MOVLB  0
31CE:  CALL   035A
31D2:  TBLRD*-
31D4:  TBLRD*+
31D6:  MOVFF  FF5,FEE
31DA:  DECFSZ 01,F
31DC:  BRA    31D4
31DE:  MOVLB  1
31E0:  BTFSC  x51.7
31E2:  BSF    FF2.7
31E4:  MOVLW  01
31E6:  MOVWF  xAB
31E8:  MOVLW  47
31EA:  MOVWF  xAA
31EC:  MOVLB  0
31EE:  CALL   0CE2
31F2:  MOVLB  1
....................             break; 
31F4:  MOVLB  0
31F6:  BRA    3208
....................  
....................         case 'V': // save parameters 
....................  
....................           allow_write = 2975; 
31F8:  MOVLW  0B
31FA:  MOVWF  xEA
31FC:  MOVLW  9F
31FE:  MOVWF  xE9
....................           write_setup(); 
3200:  CALL   1508
....................           update_all(); 
3204:  CALL   0C88
....................  
....................           break; 
....................         } 
....................       break; 
3208:  BRA    330A
....................  
....................     case '1': // year    
....................       year = get_int(); 
320A:  CALL   13BC
320E:  MOVFF  02,144
3212:  MOVFF  01,143
....................        if(year > 0 && year < 100)  
3216:  MOVLB  1
3218:  MOVF   x43,F
321A:  BNZ   3220
321C:  MOVF   x44,F
321E:  BZ    3234
3220:  MOVF   x44,F
3222:  BNZ   3234
3224:  MOVF   x43,W
3226:  SUBLW  63
3228:  BNC   3234
....................          { 
....................       setup.year = year; 
322A:  MOVFF  144,B5
322E:  MOVFF  143,B4
....................       } 
3232:  BRA    3272
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
3234:  MOVLW  01
3236:  MOVWF  FEA
3238:  MOVLW  47
323A:  MOVWF  FE9
323C:  MOVFF  FF2,151
3240:  BCF    FF2.7
3242:  MOVLW  0A
3244:  MOVWF  01
3246:  CLRF   FF7
3248:  MOVLW  00
324A:  MOVLB  0
324C:  CALL   035A
3250:  TBLRD*-
3252:  TBLRD*+
3254:  MOVFF  FF5,FEE
3258:  DECFSZ 01,F
325A:  BRA    3252
325C:  MOVLB  1
325E:  BTFSC  x51.7
3260:  BSF    FF2.7
3262:  MOVLW  01
3264:  MOVWF  xAB
3266:  MOVLW  47
3268:  MOVWF  xAA
326A:  MOVLB  0
326C:  CALL   0CE2
3270:  MOVLB  1
....................     break; 
3272:  MOVLB  0
3274:  BRA    330A
....................  
....................     case '2': // week 
....................       week = get_int(); 
3276:  CALL   13BC
327A:  MOVFF  02,146
327E:  MOVFF  01,145
....................       if(week > 0 && week < 58)  
3282:  MOVLB  1
3284:  MOVF   x45,F
3286:  BNZ   328C
3288:  MOVF   x46,F
328A:  BZ    329C
328C:  MOVF   x46,F
328E:  BNZ   329C
3290:  MOVF   x45,W
3292:  SUBLW  39
3294:  BNC   329C
....................       { 
....................       setup.week = week; 
3296:  MOVFF  145,B6
....................       }   
329A:  BRA    32DA
....................    else 
....................       COM1_send_str("\r\n$FAIL\r\n"); 
329C:  MOVLW  01
329E:  MOVWF  FEA
32A0:  MOVLW  47
32A2:  MOVWF  FE9
32A4:  MOVFF  FF2,151
32A8:  BCF    FF2.7
32AA:  MOVLW  0A
32AC:  MOVWF  01
32AE:  CLRF   FF7
32B0:  MOVLW  00
32B2:  MOVLB  0
32B4:  CALL   035A
32B8:  TBLRD*-
32BA:  TBLRD*+
32BC:  MOVFF  FF5,FEE
32C0:  DECFSZ 01,F
32C2:  BRA    32BA
32C4:  MOVLB  1
32C6:  BTFSC  x51.7
32C8:  BSF    FF2.7
32CA:  MOVLW  01
32CC:  MOVWF  xAB
32CE:  MOVLW  47
32D0:  MOVWF  xAA
32D2:  MOVLB  0
32D4:  CALL   0CE2
32D8:  MOVLB  1
....................    break; 
32DA:  MOVLB  0
32DC:  BRA    330A
....................     case '3': // unit ID 
....................       setup.unit_ID = get_int(); 
32DE:  CALL   13BC
32E2:  MOVFF  02,B8
32E6:  MOVFF  01,B7
....................       break; 
32EA:  BRA    330A
....................     case 'Q': 
....................       send_status(); 
32EC:  GOTO   1F74
....................       break; 
32F0:  BRA    330A
.................... 	case 'R': 
....................       send_raw_status(); 
32F2:  GOTO   2732
....................       break; 
32F6:  BRA    330A
....................     default: 
....................       printf("\r\n$FAIL\r\n"); 
32F8:  MOVLW  2A
32FA:  MOVWF  FF6
32FC:  MOVLW  06
32FE:  MOVWF  FF7
3300:  GOTO   2986
....................  
....................       return 0; 
3304:  MOVLW  00
3306:  MOVWF  01
3308:  BRA    330E
....................     } 
....................   return 0;      
330A:  MOVLW  00
330C:  MOVWF  01
330E:  GOTO   33DC (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void dollar_handler(void) 
....................   { 
....................   UINT chr, ret; 
....................  
....................   switch (comm_state) 
3312:  MOVF   54,W
3314:  ADDLW  FC
3316:  BTFSC  FD8.0
3318:  BRA    34AA
331A:  ADDLW  04
331C:  GOTO   34AE
....................     { 
....................     case COMM_INIT: 
....................       comm_ridx = 0; 
3320:  CLRF   55
....................       comm_state++; 
3322:  INCF   54,F
....................       break; 
3324:  BRA    34AA
....................     case COMM_WAIT_DLR: 
.................... #ignore_warnings 201 
....................     if (COM1_rcnt) 
3326:  MOVF   31,F
3328:  BZ    338E
....................       { 
....................       chr = COM1_get_chr(); 
332A:  CALL   10E8
332E:  MOVLB  1
3330:  CLRF   x19
3332:  MOVFF  01,118
....................       if (chr) 
3336:  MOVF   x18,W
3338:  IORWF  x19,W
333A:  BZ    3390
....................           if (chr == '$') 
333C:  MOVF   x18,W
333E:  SUBLW  24
3340:  BNZ   3352
3342:  MOVF   x19,F
3344:  BNZ   3352
....................              { 
....................              comm_state++; 
3346:  INCF   54,F
....................              comm_timeout = 0; 
3348:  MOVLB  0
334A:  CLRF   xA7
334C:  CLRF   xA6
....................              }    
334E:  BRA    338E
3350:  MOVLB  1
....................            else 
....................               COM1_send_str("\r\n$FAULT\r\n"); 
3352:  MOVLW  01
3354:  MOVWF  FEA
3356:  MOVLW  1C
3358:  MOVWF  FE9
335A:  MOVFF  FF2,13A
335E:  BCF    FF2.7
3360:  MOVLW  0B
3362:  MOVWF  01
3364:  CLRF   FF7
3366:  MOVLW  00
3368:  MOVLB  0
336A:  CALL   03A0
336E:  TBLRD*-
3370:  TBLRD*+
3372:  MOVFF  FF5,FEE
3376:  DECFSZ 01,F
3378:  BRA    3370
337A:  MOVLB  1
337C:  BTFSC  x3A.7
337E:  BSF    FF2.7
3380:  MOVLW  01
3382:  MOVWF  xAB
3384:  MOVLW  1C
3386:  MOVWF  xAA
3388:  MOVLB  0
338A:  CALL   0CE2
338E:  MOVLB  1
....................       } 
....................       break; 
3390:  MOVLB  0
3392:  BRA    34AA
....................     case COMM_WAIT_CR: 
....................       if (COM1_rcnt) 
3394:  MOVF   31,F
3396:  BTFSC  FD8.2
3398:  BRA    347C
....................         { 
....................         comm_timeout = 0; 
339A:  CLRF   xA7
339C:  CLRF   xA6
....................         chr = COM1_get_chr(); 
339E:  CALL   10E8
33A2:  MOVLB  1
33A4:  CLRF   x19
33A6:  MOVFF  01,118
....................         comm_buf[comm_ridx++] = chr; 
33AA:  MOVF   55,W
33AC:  INCF   55,F
33AE:  CLRF   03
33B0:  ADDLW  56
33B2:  MOVWF  FE9
33B4:  MOVLW  00
33B6:  ADDWFC 03,W
33B8:  MOVWF  FEA
33BA:  MOVFF  118,FEF
....................         if (comm_ridx > 70) 
33BE:  MOVF   55,W
33C0:  SUBLW  46
33C2:  BC    33CC
....................           { 
....................           comm_state = 0; 
33C4:  CLRF   54
....................           break; 
33C6:  MOVLB  0
33C8:  BRA    34AA
33CA:  MOVLB  1
....................           } 
....................         if (chr == 13)				//<CR> 
33CC:  MOVF   x18,W
33CE:  SUBLW  0D
33D0:  BNZ   3434
33D2:  MOVF   x19,F
33D4:  BNZ   3434
....................           { 
....................           ret = process_dollar_commands(); 
33D6:  MOVLB  0
33D8:  GOTO   29AA
33DC:  MOVLB  1
33DE:  CLRF   x1B
33E0:  MOVFF  01,11A
....................           if (ret != 255) 
33E4:  INCFSZ x1A,W
33E6:  BRA    33EC
33E8:  MOVF   x1B,F
33EA:  BZ    342A
....................             COM1_send_str("\r\n$OK\r\n"); 
33EC:  MOVLW  01
33EE:  MOVWF  FEA
33F0:  MOVLW  27
33F2:  MOVWF  FE9
33F4:  MOVFF  FF2,13A
33F8:  BCF    FF2.7
33FA:  MOVLW  08
33FC:  MOVWF  01
33FE:  CLRF   FF7
3400:  MOVLW  00
3402:  MOVLB  0
3404:  CALL   03C6
3408:  TBLRD*-
340A:  TBLRD*+
340C:  MOVFF  FF5,FEE
3410:  DECFSZ 01,F
3412:  BRA    340A
3414:  MOVLB  1
3416:  BTFSC  x3A.7
3418:  BSF    FF2.7
341A:  MOVLW  01
341C:  MOVWF  xAB
341E:  MOVLW  27
3420:  MOVWF  xAA
3422:  MOVLB  0
3424:  CALL   0CE2
3428:  MOVLB  1
....................           COM1_init(); 
342A:  MOVLB  0
342C:  CALL   065A
....................           } 
3430:  BRA    347C
3432:  MOVLB  1
....................         else if (chr == 27)			//ESC 
3434:  MOVF   x18,W
3436:  SUBLW  1B
3438:  BNZ   347E
343A:  MOVF   x19,F
343C:  BNZ   347E
....................           { 
....................           COM1_send_str("\r\n$BREAK\r\n"); 
343E:  MOVLW  01
3440:  MOVWF  FEA
3442:  MOVLW  2F
3444:  MOVWF  FE9
3446:  MOVFF  FF2,13A
344A:  BCF    FF2.7
344C:  MOVLW  0B
344E:  MOVWF  01
3450:  CLRF   FF7
3452:  MOVLW  00
3454:  MOVLB  0
3456:  CALL   03E8
345A:  TBLRD*-
345C:  TBLRD*+
345E:  MOVFF  FF5,FEE
3462:  DECFSZ 01,F
3464:  BRA    345C
3466:  MOVLB  1
3468:  BTFSC  x3A.7
346A:  BSF    FF2.7
346C:  MOVLW  01
346E:  MOVWF  xAB
3470:  MOVLW  2F
3472:  MOVWF  xAA
3474:  MOVLB  0
3476:  CALL   0CE2
....................           comm_state = 0; 
347A:  CLRF   54
347C:  MOVLB  1
....................           } 
....................         } 
....................           
....................  
....................       if (comm_state > COMM_WAIT_DLR) 
347E:  MOVF   54,W
3480:  SUBLW  01
3482:  BC    34A6
....................         if (TMR_100MS_COMM_TO) 
3484:  BTFSS  1E.1
3486:  BRA    34A6
....................           { 
....................           TMR_100MS_COMM_TO = 0; 
3488:  BCF    1E.1
....................           if (++comm_timeout > 10000) // time out after 10 seconds from last char 
348A:  MOVLB  0
348C:  INCF   xA6,F
348E:  BTFSC  FD8.2
3490:  INCF   xA7,F
3492:  MOVF   xA7,W
3494:  SUBLW  26
3496:  BC    34A4
3498:  XORLW  FF
349A:  BNZ   34A2
349C:  MOVF   xA6,W
349E:  SUBLW  10
34A0:  BC    34A4
....................             comm_state = 0; 
34A2:  CLRF   54
34A4:  MOVLB  1
....................           } 
....................       break; 
34A6:  MOVLB  0
34A8:  BRA    34AA
....................     case COMM_DELAY: 
....................       break; 
....................     } 
34AA:  GOTO   34E0 (RETURN)
....................   } 
....................  
....................  
.................... //----------------------------------------------------------------------------- 
.................... void clear_comm_errors(void) 
....................   { 
....................   UCHAR chr; 
....................   if (OERR) 
*
10C2:  BTFSS  FAB.1
10C4:  BRA    10DA
....................     { 
....................     OERR = 0; 
10C6:  BCF    FAB.1
....................     CREN = 0; 
10C8:  BCF    FAB.4
....................     delay_us(5); 
10CA:  CLRWDT
10CC:  MOVLW  05
10CE:  MOVWF  00
10D0:  DECFSZ 00,F
10D2:  BRA    10D0
10D4:  BRA    10D6
10D6:  NOP   
....................     CREN = 1; 
10D8:  BSF    FAB.4
....................     } 
....................   if (FERR) 
10DA:  BTFSS  FAB.2
10DC:  BRA    10E4
....................     { 
....................     FERR = 0; 
10DE:  BCF    FAB.2
....................     chr = RCREG1; 
10E0:  MOVFF  FAE,118
....................     } 
10E4:  GOTO   34DE (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
....................   { 
....................   clear_comm_errors(); 
*
34DA:  GOTO   10C2
....................   dollar_handler(); 
34DE:  BRA    3312
34E0:  GOTO   363C (RETURN)
....................   } 
....................  
....................  
....................  
....................  
.................... //========== functions ======================================================== 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0634:  CLRF   F89
....................   output_b(0); 
0636:  CLRF   F8A
....................   output_c(0); 
0638:  CLRF   F8B
....................   output_d(0); 
063A:  CLRF   F8C
....................   output_e(0); 
063C:  CLRF   F8D
....................   set_tris_a(0b11000001); 
063E:  MOVLW  C1
0640:  MOVWF  F92
....................   set_tris_b(0b11000100); 
0642:  MOVLW  C4
0644:  MOVWF  F93
....................   set_tris_c(0b10000001); 
0646:  MOVLW  81
0648:  MOVWF  F94
....................   set_tris_d(0b10000000); 
064A:  MOVLW  80
064C:  MOVWF  F95
....................   set_tris_e(0b11111111); 
064E:  BSF    F96.0
0650:  BSF    F96.1
0652:  BSF    F96.2
0654:  BSF    F96.3
0656:  GOTO   0694 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
1498:  MOVLB  1
149A:  MOVFF  156,03
149E:  MOVF   x55,W
14A0:  BTFSC  FD8.2
14A2:  DECF   x56,F
14A4:  DECF   x55,F
14A6:  IORWF  03,W
14A8:  BZ    1502
....................     write_eeprom(addr++, *data++); 
14AA:  MOVF   x52,W
14AC:  MOVWF  03
14AE:  MOVF   x51,W
14B0:  INCF   x51,F
14B2:  BTFSC  FD8.2
14B4:  INCF   x52,F
14B6:  MOVWF  x57
14B8:  MOVFF  03,158
14BC:  MOVF   x54,W
14BE:  MOVWF  03
14C0:  MOVF   x53,W
14C2:  INCF   x53,F
14C4:  BTFSC  FD8.2
14C6:  INCF   x54,F
14C8:  MOVWF  FE9
14CA:  MOVFF  03,FEA
14CE:  MOVFF  FEF,159
14D2:  MOVF   FF2,W
14D4:  MOVWF  00
14D6:  BCF    FF2.7
14D8:  MOVFF  157,FA9
14DC:  MOVFF  159,FA8
14E0:  BCF    FA6.6
14E2:  BCF    FA6.7
14E4:  BSF    FA6.2
14E6:  MOVLB  F
14E8:  MOVLW  55
14EA:  MOVWF  FA7
14EC:  MOVLW  AA
14EE:  MOVWF  FA7
14F0:  BSF    FA6.1
14F2:  BTFSC  FA6.1
14F4:  BRA    14F2
14F6:  BCF    FA6.2
14F8:  MOVF   00,W
14FA:  IORWF  FF2,F
14FC:  MOVLB  0
14FE:  BRA    1498
1500:  MOVLB  1
1502:  MOVLB  0
1504:  GOTO   152A (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
06D2:  MOVLB  1
06D4:  MOVFF  11D,03
06D8:  MOVF   x1C,W
06DA:  BTFSC  FD8.2
06DC:  DECF   x1D,F
06DE:  DECF   x1C,F
06E0:  IORWF  03,W
06E2:  BZ    0722
....................     *data++ = read_eeprom(addr++); 
06E4:  MOVF   x1B,W
06E6:  MOVWF  03
06E8:  MOVF   x1A,W
06EA:  INCF   x1A,F
06EC:  BTFSC  FD8.2
06EE:  INCF   x1B,F
06F0:  MOVWF  FE9
06F2:  MOVFF  03,FEA
06F6:  MOVF   x19,W
06F8:  MOVWF  03
06FA:  MOVF   x18,W
06FC:  INCF   x18,F
06FE:  BTFSC  FD8.2
0700:  INCF   x19,F
0702:  MOVWF  x20
0704:  MOVFF  03,121
0708:  MOVFF  FF2,122
070C:  BCF    FF2.7
070E:  MOVFF  120,FA9
0712:  BCF    FA6.6
0714:  BCF    FA6.7
0716:  BSF    FA6.0
0718:  MOVF   FA8,W
071A:  BTFSC  x22.7
071C:  BSF    FF2.7
071E:  MOVWF  FEF
0720:  BRA    06D4
0722:  MOVLB  0
0724:  GOTO   075A (RETURN)
....................   } 
....................  
.................... //============================================================================== 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
1508:  MOVF   xE9,W
150A:  SUBLW  9F
150C:  BNZ   152A
150E:  MOVF   xEA,W
1510:  SUBLW  0B
1512:  BNZ   152A
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
1514:  MOVLB  1
1516:  CLRF   x52
1518:  CLRF   x51
151A:  CLRF   x54
151C:  MOVLW  A8
151E:  MOVWF  x53
1520:  CLRF   x56
1522:  MOVLW  41
1524:  MOVWF  x55
1526:  MOVLB  0
1528:  BRA    1498
....................   allow_write = 0; 
152A:  CLRF   xEA
152C:  CLRF   xE9
152E:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0744:  MOVLB  1
0746:  CLRF   x19
0748:  CLRF   x18
074A:  CLRF   x1B
074C:  MOVLW  A8
074E:  MOVWF  x1A
0750:  CLRF   x1D
0752:  MOVLW  41
0754:  MOVWF  x1C
0756:  MOVLB  0
0758:  BRA    06D2
....................   if (setup.frequency == 0xFFFF) 
075A:  INCFSZ xA9,W
075C:  BRA    0772
075E:  INCFSZ xAA,W
0760:  BRA    0772
....................     memset(&setup, 0, sizeof(setup)); 
0762:  CLRF   FEA
0764:  MOVLW  A8
0766:  MOVWF  FE9
0768:  CLRF   00
076A:  CLRF   02
076C:  MOVLW  41
076E:  MOVWF  01
0770:  BRA    0728
0772:  GOTO   3566 (RETURN)
....................   } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... #separate 
.................... void power_output(void)				//function not defined yet, need to finish it. 
....................   { 
....................   UINT power; 
....................  
.................... //  if (input(STANDBY)) 
.................... //    { 
.................... //    if (pwr_command) 
.................... //      output_high(POWER_EN); 
.................... //    else 
.................... //      output_low(POWER_EN); 
.................... 	if(pa_command) 
*
0FF2:  MOVLB  1
0FF4:  MOVF   x00,F
0FF6:  BZ    0FFC
.................... 	{ 
.................... 		output_high(LNA_EN); 
0FF8:  BSF    F8C.2
.................... 	} 
0FFA:  BRA    0FFE
.................... 	else 
.................... 	{ 
.................... 		output_low(LNA_EN); 
0FFC:  BCF    F8C.2
.................... 	} 
....................     //set_adc_channel(A2D_VGMON); // select forward power input 
.................... //	set_adc_channel(PWR_IN); // select forward power input 
.................... //    delay_us(20); 
.................... //    power = read_adc(); 
.................... //    if (power > VGMON_THRESHOLD) 
.................... //      output_low(PA_ON); 
.................... //    else if (pa_command) 
.................... //      output_high(PA_ON); 
.................... //    else 
.................... //      output_low(PA_ON); 
.................... //   } 
.................... //  else 
.................... //    { 
.................... //    output_low(POWER_EN); 
.................... //    output_low(PA_ON); 
.................... //    } 
....................  
....................  
....................  
....................   if (setup.power_level) 
0FFE:  MOVLB  0
1000:  MOVF   xAB,W
1002:  IORWF  xAC,W
1004:  BZ    101A
....................     { 
.................... 	set_AD5314(DAC_MON_CTRL, setup.monitor_ctrl[1]); 
1006:  MOVLW  0E
1008:  MOVLB  1
100A:  MOVWF  x1A
100C:  MOVFF  B0,11C
1010:  MOVFF  AF,11B
1014:  MOVLB  0
1016:  RCALL  0DA2
....................     } 
1018:  BRA    102C
....................   else 
....................     { 
.................... 	set_AD5314(DAC_MON_CTRL, setup.monitor_ctrl[0]); 
101A:  MOVLW  0E
101C:  MOVLB  1
101E:  MOVWF  x1A
1020:  MOVFF  AE,11C
1024:  MOVFF  AD,11B
1028:  MOVLB  0
102A:  RCALL  0DA2
....................     } 
....................  
....................  
....................  
.................... 	if(auto_power) 
102C:  MOVLB  1
102E:  MOVF   x03,F
1030:  BZ    10AC
.................... 	{ 
....................   	set_adc_channel(A2D_PWR_IN); // select PWR_IN power input 
1032:  MOVLW  1C
1034:  MOVWF  01
1036:  MOVF   FC2,W
1038:  ANDLW  83
103A:  IORWF  01,W
103C:  MOVWF  FC2
....................     delay_us(20); 
103E:  CLRWDT
1040:  MOVLW  19
1042:  MOVWF  00
1044:  DECFSZ 00,F
1046:  BRA    1044
1048:  BRA    104A
104A:  NOP   
....................     power = read_adc(); 
104C:  BSF    FC2.1
104E:  BTFSC  FC2.1
1050:  BRA    104E
1052:  MOVFF  FC3,118
1056:  MOVFF  FC4,119
.................... 	//if(power > 125)				//400mv  P0 
.................... 	if(power > setup.auto_mode_tresh[0]) 
105A:  MOVLB  0
105C:  MOVF   xE6,W
105E:  MOVLB  1
1060:  SUBWF  x19,W
1062:  BNC   1084
1064:  BNZ   1076
1066:  MOVF   x18,W
1068:  MOVLB  0
106A:  SUBWF  xE5,W
106C:  BTFSS  FD8.0
106E:  BRA    1074
1070:  MOVLB  1
1072:  BRA    1084
1074:  MOVLB  1
.................... 		{ 
.................... 		output_high(VC1); 
1076:  BSF    F8C.0
.................... 		output_low(VC2); 
1078:  BCF    F8C.1
.................... 		setup.power_level = 0; 
107A:  MOVLB  0
107C:  CLRF   xAC
107E:  CLRF   xAB
.................... 		} 
1080:  BRA    10A8
1082:  MOVLB  1
.................... 	//else if(power < 108)		//350mv P1 
.................... 	else if(power < setup.auto_mode_tresh[1]) 
1084:  MOVF   x19,W
1086:  MOVLB  0
1088:  SUBWF  xE8,W
108A:  BNC   10A8
108C:  BNZ   109E
108E:  MOVF   xE7,W
1090:  MOVLB  1
1092:  SUBWF  x18,W
1094:  BTFSS  FD8.0
1096:  BRA    109C
1098:  MOVLB  0
109A:  BRA    10A8
109C:  MOVLB  0
.................... 		{ 
.................... 		output_low(VC1);		 
109E:  BCF    F8C.0
.................... 		output_high(VC2); 
10A0:  BSF    F8C.1
.................... 		setup.power_level = 1; 
10A2:  CLRF   xAC
10A4:  MOVLW  01
10A6:  MOVWF  xAB
.................... 		} 
.................... 	} 
10A8:  BRA    10BE
10AA:  MOVLB  1
.................... 	else  
.................... 	{ 
.................... 		if(setup.power_level) 
10AC:  MOVLB  0
10AE:  MOVF   xAB,W
10B0:  IORWF  xAC,W
10B2:  BZ    10BA
.................... 		{ 
.................... 			output_low(VC1); 
10B4:  BCF    F8C.0
.................... 			output_high(VC2); 
10B6:  BSF    F8C.1
.................... 		} 
10B8:  BRA    10BE
.................... 		else 
.................... 		{ 
.................... 			output_high(VC1); 
10BA:  BSF    F8C.0
.................... 			output_low(VC2); 
10BC:  BCF    F8C.1
.................... 		} 
.................... 	} 
10BE:  GOTO   363A (RETURN)
.................... /*  
....................   if (TMR_100MS_POWER) 
....................     { 
....................     TMR_100MS_POWER = 0; 
....................     set_adc_channel(A2D_PREV); // select RSSI power input 
....................     delay_us(20); 
....................     power = read_adc(); 
....................     power_avg[pavgx] = power; 
....................     if (++pavgx > 3) 
....................       pavgx = 0; 
....................     power = (power_avg[0] + power_avg[1] + power_avg[2] + power_avg[3]) / 4; 
....................  
....................     if (power < setup.rssi_table[0][0]) 
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT1); 
....................     else if (power < setup.rssi_table[4][0]) 
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT2); 
....................     else if (power < setup.rssi_table[8][0]) 
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT3); 
....................     else 
....................       set_AD5314(DAC_POS_VOLT, METER_OUTPUT4); 
.................... */ 
....................      
....................   } 
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
066A:  MOVLW  48
066C:  IORLW  05
066E:  MOVWF  FBA
0670:  MOVLW  63
0672:  MOVWF  FBB
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0674:  CLRF   FB4
0676:  CLRF   FB1
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0678:  MOVLW  00
067A:  IORLW  05
067C:  MOVLB  F
067E:  MOVWF  x51
0680:  MOVLW  63
0682:  MOVWF  x52
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0684:  CLRF   x4D
0686:  CLRF   x4E
....................   setup_timer_6(T6_DISABLED,0,1); 
0688:  MOVLW  00
068A:  MOVWF  x4A
068C:  MOVLW  00
068E:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0690:  MOVLB  0
0692:  BRA    0634
....................  
....................   //setup_ccp5(CCP_OFF); 
.................... //				  3p3  RSSI TMP  PWR_IN 28v 
....................   setup_adc_ports(sAN0|sAN5|sAN6|sAN7|sAN8); 
0694:  MOVF   FC1,W
0696:  ANDLW  F0
0698:  MOVWF  FC1
069A:  MOVLW  01
069C:  MOVLB  F
069E:  MOVWF  x38
06A0:  MOVLW  07
06A2:  MOVWF  x3C
06A4:  MOVLW  04
06A6:  MOVWF  x39
06A8:  MOVLW  00
06AA:  MOVWF  x3A
06AC:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
06AE:  MOVF   FC0,W
06B0:  ANDLW  C0
06B2:  IORLW  25
06B4:  MOVWF  FC0
06B6:  BSF    FC0.7
06B8:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
06BA:  CLRF   F77
06BC:  MOVLW  04
06BE:  MOVWF  F78
06C0:  MOVWF  F79
....................  
....................   COM1_init(); 
06C2:  MOVLB  0
06C4:  RCALL  065A
....................   disable_interrupts(INT_RDA2);  
06C6:  BCF    FA3.5
....................   enable_interrupts(INT_TIMER2); 
06C8:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
06CA:  MOVLW  C0
06CC:  IORWF  FF2,F
06CE:  GOTO   3562 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq; 
....................   freq = setup.frequency; 
*
0C88:  MOVFF  AA,152
0C8C:  MOVFF  A9,151
....................   PLL_compute_freq_parameters(freq * 10); 
0C90:  MOVFF  152,154
0C94:  MOVFF  151,153
0C98:  MOVLB  1
0C9A:  CLRF   x56
0C9C:  MOVLW  0A
0C9E:  MOVWF  x55
0CA0:  MOVLB  0
0CA2:  BRA    08F0
0CA4:  MOVFF  02,154
0CA8:  MOVFF  01,153
0CAC:  MOVFF  02,156
0CB0:  MOVFF  01,155
0CB4:  RCALL  0A02
....................   PLL_update(); 
0CB6:  RCALL  0B98
....................   power_control = 1000; 
0CB8:  MOVLW  03
0CBA:  MOVWF  17
0CBC:  MOVLW  E8
0CBE:  MOVWF  16
0CC0:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
....................  
.................... void check_bit_mode(void) 
....................   { 
....................  
.................... 	if(TMR_1Sec_BIT_EN) 
*
0D76:  BTFSS  20.3
0D78:  BRA    0D9C
.................... 		{ 
.................... 			TMR_1Sec_BIT_EN = 0; 
0D7A:  BCF    20.3
.................... 			count_1sec++; 
0D7C:  INCF   21,F
0D7E:  BTFSC  FD8.2
0D80:  INCF   22,F
.................... 			if(count_1sec >= 6000) 
0D82:  MOVF   22,W
0D84:  SUBLW  16
0D86:  BC    0D9C
0D88:  XORLW  FF
0D8A:  BNZ   0D92
0D8C:  MOVF   21,W
0D8E:  SUBLW  6F
0D90:  BC    0D9C
.................... 			{	 
.................... 				count_1sec = 0; 
0D92:  CLRF   22
0D94:  CLRF   21
.................... 				output_low(BIT_MODE_EN); 
0D96:  BCF    F8C.3
....................   				bit_mode = 0; 
0D98:  MOVLB  1
0D9A:  CLRF   x02
0D9C:  MOVLB  0
.................... 				 
.................... 			} 
.................... 		} 
0D9E:  GOTO   3632 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void main(void) 
*
34E4:  CLRF   FF8
34E6:  BCF    FD0.7
34E8:  BSF    07.7
34EA:  MOVLW  70
34EC:  MOVWF  FD3
34EE:  BCF    F9B.6
34F0:  BCF    F9B.7
34F2:  BCF    FB8.3
34F4:  MOVLW  19
34F6:  MOVWF  FAF
34F8:  MOVLW  A6
34FA:  MOVWF  FAC
34FC:  MOVLW  90
34FE:  MOVWF  FAB
3500:  BCF    F70.3
3502:  MOVLW  19
3504:  MOVWF  F75
3506:  MOVLW  A6
3508:  MOVWF  F72
350A:  MOVLW  90
350C:  MOVWF  F71
350E:  CLRF   22
3510:  CLRF   21
3512:  CLRF   2C
3514:  CLRF   2B
3516:  CLRF   2E
3518:  CLRF   2D
351A:  CLRF   xEA
351C:  CLRF   xE9
351E:  MOVFF  A8,100
3522:  MOVLW  01
3524:  MOVLB  1
3526:  MOVWF  x01
3528:  CLRF   x02
352A:  CLRF   x03
352C:  CLRF   x05
352E:  CLRF   x04
3530:  MOVF   FC1,W
3532:  ANDLW  F0
3534:  MOVWF  FC1
3536:  MOVLW  00
3538:  MOVLB  F
353A:  MOVWF  x38
353C:  MOVWF  x3C
353E:  MOVWF  x39
3540:  MOVWF  x3A
3542:  MOVWF  x3B
3544:  MOVLB  1
3546:  CLRF   x88
3548:  CLRF   F77
354A:  CLRF   F78
354C:  CLRF   F79
354E:  MOVLW  03
3550:  MOVWF  x07
3552:  MOVLW  E8
3554:  MOVWF  x06
3556:  CLRF   x09
3558:  MOVLW  01
355A:  MOVWF  x08
....................   { 
....................   int16 vouta =1000, five = 1; 
....................   init_system(); 
355C:  MOVLB  0
355E:  GOTO   066A
....................    
....................   read_setup(); 
3562:  GOTO   0744
....................  
.................... //  power_level = setup.power_in[setup.power_level]; 
....................   power_control = 10; 
3566:  CLRF   17
3568:  MOVLW  0A
356A:  MOVWF  16
....................  
....................   PLL_initialize(); 
356C:  GOTO   084E
....................  
....................   update_all(); 
3570:  CALL   0C88
....................  
....................   COM1_send_str("\r\n"); 
3574:  MOVLW  0D
3576:  MOVLB  1
3578:  MOVWF  x0A
357A:  MOVLW  0A
357C:  MOVWF  x0B
357E:  CLRF   x0C
3580:  MOVLW  01
3582:  MOVWF  xAB
3584:  MOVLW  0A
3586:  MOVWF  xAA
3588:  MOVLB  0
358A:  CALL   0CE2
....................   COM1_send_str(VERSION); 
358E:  MOVLW  01
3590:  MOVWF  FEA
3592:  MOVLW  0A
3594:  MOVWF  FE9
3596:  MOVFF  FF2,118
359A:  BCF    FF2.7
359C:  MOVLW  0E
359E:  MOVWF  01
35A0:  CLRF   FF7
35A2:  MOVLW  00
35A4:  CALL   040E
35A8:  TBLRD*-
35AA:  TBLRD*+
35AC:  MOVFF  FF5,FEE
35B0:  DECFSZ 01,F
35B2:  BRA    35AA
35B4:  MOVLB  1
35B6:  BTFSC  x18.7
35B8:  BSF    FF2.7
35BA:  MOVLW  01
35BC:  MOVWF  xAB
35BE:  MOVLW  0A
35C0:  MOVWF  xAA
35C2:  MOVLB  0
35C4:  CALL   0CE2
....................   COM1_send_str("\r\n"); 
35C8:  MOVLW  0D
35CA:  MOVLB  1
35CC:  MOVWF  x0A
35CE:  MOVLW  0A
35D0:  MOVWF  x0B
35D2:  CLRF   x0C
35D4:  MOVLW  01
35D6:  MOVWF  xAB
35D8:  MOVLW  0A
35DA:  MOVWF  xAA
35DC:  MOVLB  0
35DE:  CALL   0CE2
....................  
.................... //  set_AD5314(DAC_POS_VOLT, vouta); 
....................   delay_ms(10); 
35E2:  MOVLW  0A
35E4:  MOVLB  1
35E6:  MOVWF  x1E
35E8:  MOVLB  0
35EA:  CALL   081E
....................   output_low(BIT_MODE_EN); 
35EE:  BCF    F8C.3
....................   bit_mode = 0; 
35F0:  MOVLB  1
35F2:  CLRF   x02
....................   output_low(VC1); 
35F4:  BCF    F8C.0
....................   output_high(VC2); 
35F6:  BSF    F8C.1
....................   output_high(LNA_EN); 
35F8:  BSF    F8C.2
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     if (TMR_100mS_BLINK) 
35FA:  BTFSS  1E.0
35FC:  BRA    3628
....................       { 
....................       TMR_100mS_BLINK = 0; 
35FE:  BCF    1E.0
.................... 	  if(five) 
3600:  MOVF   x08,W
3602:  IORWF  x09,W
3604:  BZ    3612
.................... 	  { 
.................... 	  five = 0; 
3606:  CLRF   x09
3608:  CLRF   x08
.................... 	  update_all(); 
360A:  MOVLB  0
360C:  CALL   0C88
3610:  MOVLB  1
....................       } 
....................       if (setup.power_level)		//$p power mode high 
3612:  MOVLB  0
3614:  MOVF   xAB,W
3616:  IORWF  xAC,W
3618:  BZ    361E
....................         output_high(LED1); 
361A:  BSF    F8A.4
361C:  BRA    3620
....................       else 
....................         output_toggle(LED1);		//$p power mode low 
361E:  BTG    F8A.4
....................       delay_us(1); 
3620:  CLRWDT
3622:  BRA    3624
3624:  NOP   
3626:  MOVLB  1
....................       } 
....................  
.................... 	if(bit_mode == 1) 
3628:  DECFSZ x02,W
362A:  BRA    3634
.................... 		check_bit_mode(); 
362C:  MOVLB  0
362E:  GOTO   0D76
3632:  MOVLB  1
....................  
....................     power_output(); 
3634:  MOVLB  0
3636:  GOTO   0FF2
....................     comm_handler(); 
363A:  BRA    34DA
363C:  MOVLB  1
363E:  BRA    35FA
....................     } 
....................  
....................   vouta = 1; 
3640:  CLRF   x07
3642:  MOVLW  01
3644:  MOVWF  x06
....................   } 
....................  
3646:  BRA    3646
....................  
....................  

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
