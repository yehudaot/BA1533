--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="YES" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=64 LPM_WIDTHB=7 LPM_WIDTHP=71 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 15.1 cbx_cycloneii 2015:10:21:18:09:23:SJ cbx_lpm_add_sub 2015:10:21:18:09:23:SJ cbx_lpm_mult 2015:10:21:18:09:23:SJ cbx_mgl 2015:10:21:18:12:49:SJ cbx_nadder 2015:10:21:18:09:23:SJ cbx_padd 2015:10:21:18:09:23:SJ cbx_stratix 2015:10:21:18:09:23:SJ cbx_stratixii 2015:10:21:18:09:23:SJ cbx_util_mgl 2015:10:21:18:09:23:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION fiftyfivenm_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION fiftyfivenm_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 8 lut 54 
SUBDESIGN mult_6qs
( 
	dataa[63..0]	:	input;
	datab[6..0]	:	input;
	result[70..0]	:	output;
) 
VARIABLE
	add9_result[53..0]	:	WIRE;
	mac_mult1 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 7,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 7,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 7,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 10,
			datab_clock = "none",
			datab_width = 7,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out2 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 25,
			output_clock = "none"
		);
	mac_out4 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 25,
			output_clock = "none"
		);
	mac_out6 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 25,
			output_clock = "none"
		);
	mac_out8 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 17,
			output_clock = "none"
		);
	sft10a[53..0] : soft;
	sft11a[53..0] : soft;
	sft12a[53..0] : soft;
	w194w	: WIRE;
	w375w[71..0]	: WIRE;

BEGIN 
	add9_result[] = sft10a[].out + sft11a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[6..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult3.dataa[] = ( dataa[35..18]);
	mac_mult3.datab[] = ( datab[6..0]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"0";
	mac_mult5.dataa[] = ( dataa[53..36]);
	mac_mult5.datab[] = ( datab[6..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"0";
	mac_mult7.dataa[] = ( dataa[63..54]);
	mac_mult7.datab[] = ( datab[6..0]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"0";
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out8.dataa[] = mac_mult7.dataout[];
	sft10a[].in = ( w194w, ( mac_out8.dataout[16..16], ( mac_out8.dataout[15..15], ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( mac_out6.dataout[17..17], ( mac_out6.dataout[16..16], ( mac_out6.dataout[15..15], ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( mac_out6.dataout[10..10], ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out4.dataout[24..24], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..19], ( mac_out4.dataout[18..18], ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18])))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft11a[].in = ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( mac_out8.dataout[6..6], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..1], ( mac_out8.dataout[0..0], ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..1], ( mac_out6.dataout[0..0], ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( w194w, ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0])))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft12a[].in = add9_result[];
	result[70..0] = w375w[70..0];
	w194w = B"0";
	w375w[] = ( sft12a[53..52].out, sft12a[51..50].out, sft12a[49..48].out, sft12a[47..46].out, sft12a[45..44].out, sft12a[43..42].out, sft12a[41..40].out, sft12a[39..38].out, sft12a[37..36].out, sft12a[35..34].out, sft12a[33..32].out, sft12a[31..30].out, sft12a[29..28].out, sft12a[27..26].out, sft12a[25..24].out, sft12a[23..22].out, sft12a[21..20].out, sft12a[19..18].out, sft12a[17..16].out, sft12a[15..14].out, sft12a[13..12].out, sft12a[11..10].out, sft12a[9..8].out, sft12a[7..6].out, sft12a[5..4].out, sft12a[3..2].out, sft12a[1..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
